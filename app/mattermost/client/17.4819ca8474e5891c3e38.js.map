{"version":3,"sources":["webpack:///./actions/views/mfa.js","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/audit_table/index.js","webpack:///./components/user_settings/advanced/join_leave_section/join_leave_section.jsx","webpack:///./components/user_settings/advanced/join_leave_section/index.js","webpack:///./components/user_settings/advanced/user_settings_advanced.jsx","webpack:///./components/user_settings/advanced/index.js","webpack:///./components/color_input.tsx","webpack:///./components/user_settings/display/user_settings_theme/color_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/custom_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/premade_theme_chooser.jsx","webpack:///./components/user_settings/display/user_settings_theme/premade_theme_chooser/index.js","webpack:///./components/user_settings/display/user_settings_theme/user_settings_theme.jsx","webpack:///./components/user_settings/display/user_settings_theme/index.js","webpack:///./components/suggestion/timezone_provider.jsx","webpack:///./components/user_settings/display/manage_timezones/manage_timezones.jsx","webpack:///./components/user_settings/display/manage_timezones/index.js","webpack:///./components/user_settings/display/manage_languages/manage_languages.jsx","webpack:///./components/user_settings/display/manage_languages/index.js","webpack:///./components/user_settings/display/user_settings_display.jsx","webpack:///./components/user_settings/display/index.js","webpack:///./components/user_settings/general/user_settings_general.jsx","webpack:///./components/user_settings/general/index.js","webpack:///./components/user_settings/notifications/desktop_notification_settings.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/email_notification_setting.jsx","webpack:///./components/user_settings/notifications/email_notification_setting/index.js","webpack:///./components/user_settings/notifications/manage_auto_responder.jsx","webpack:///./components/user_settings/notifications/user_settings_notifications.jsx","webpack:///./components/user_settings/notifications/index.js","webpack:///./components/access_history_modal/access_history_modal.tsx","webpack:///./components/access_history_modal/index.ts","webpack:///./components/activity_log_modal/components/more_info.jsx","webpack:///./components/activity_log_modal/components/activity_log.jsx","webpack:///./components/activity_log_modal/activity_log_modal.jsx","webpack:///./components/activity_log_modal/index.js","webpack:///./components/user_settings/security/mfa_section/mfa_section.jsx","webpack:///./components/user_settings/security/mfa_section/index.js","webpack:///./components/user_settings/security/user_access_token_section/user_access_token_section.jsx","webpack:///./components/user_settings/security/user_access_token_section/index.js","webpack:///./components/user_settings/security/user_settings_security.jsx","webpack:///./components/user_settings/security/index.js","webpack:///./components/user_settings/sidebar/user_settings_sidebar.jsx","webpack:///./components/user_settings/sidebar/index.js","webpack:///./components/user_settings/user_settings.jsx","webpack:///./components/user_settings/index.js"],"names":["activateMfa","code","dispatch","getState","currentUserId","getCurrentUserId","UserActions","deactivateMfa","generateMfaSecret","holders","defineMessages","sessionRevoked","id","t","defaultMessage","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","React","PureComponent","componentDidMount","ids","this","props","audits","map","audit","user_id","actions","getMissingProfilesByIds","render","showUserId","showIp","showSession","accessList","i","length","auditInfo","formatAuditInfo","uContent","iContent","sContent","className","userId","ip","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","ipContent","sessionContent","formatMessage","intl","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelObj","channelURL","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","isSystemAdmin","roles","email","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","value","day","month","year","hour","minute","auditProfile","ip_address","session_id","intlShape","isRequired","PropTypes","array","bool","object","func","shape","injectIntl","connect","state","getCurrentUser","getChannelByName","bindActionCreators","JoinLeaveSection","constructor","super","e","currentTarget","setState","joinLeaveState","section","joinLeave","onUpdateSection","joinLeavePreference","category","Preferences","CATEGORY_ADVANCED_SETTINGS","name","ADVANCED_FILTER_JOIN_LEAVE","savePreferences","activeSection","AdvancedSections","JOIN_LEAVE","title","inputs","type","checked","onChange","handleOnChange","setting","submit","handleSubmit","saving","isSaving","server_error","serverError","updateSection","handleUpdateSection","describe","renderOnOffLabel","string","getPreference","PreReleaseFeatures","Constants","PRE_RELEASE_FEATURES","AdvancedSettingsDisplay","advancedSettings","advancedSettingsCategory","settings","send_on_ctrl_enter","sendOnCtrlEnter","code_block_ctrl_enter","codeBlockOnCtrlEnter","formatting","join_leave","preReleaseFeaturesKeys","Object","keys","enabledFeatures","as","feature","FeatureTogglePrefix","label","previewFeaturesEnabled","enablePreviewFeatures","preReleaseFeatures","showDeactivateAccountModal","String","forEach","features","push","async","preferences","Array","isArray","updateUserActive","then","error","message","data","revokeAllSessionsForUser","emitUserLoggedOutEvent","getStateFromProps","description","default","mac","Utils","ctrlSendTitle","ctrlSendDesc","updateSetting","bind","enabled","renderCtrlEnterLabel","ctrlEnter","codeBlockCtrlEnter","renderFeatureLabel","ctrlSendSection","getCtrlSendText","ctrlSendActive","formattingSection","renderFormattingSection","previewFeaturesSection","previewFeaturesSectionDivider","formattingSectionDivider","toggleFeature","target","saveEnabledFeatures","values","count","deactivateAccountSection","makeConfirmationModal","auth_service","enableUserDeactivation","saveButtonText","handleShowDeactivateAccountModal","confirmButtonClass","deactivateMemberButton","show","confirmButtonText","onConfirm","handleDeactivateAccountSubmit","onCancel","handleHideDeactivateAccountModal","data-dismiss","aria-label","onClick","closeModal","aria-hidden","ref","collapseModal","getAdvancedSettingsCategory","makeGetCategory","config","getConfig","EnablePreviewFeatures","EnableUserDeactivation","get","hexRegex","ColorInput","colorPicker","current","contains","isOpened","colorInput","focus","newColorData","hex","handleChange","ch","index","join","event","startsWith","ensureLongColourValue","toUpperCase","setHex","togglePicker","setSelectionRange","createRef","color","componentWillMount","componentDidUpdate","prevProps","prevState","prevIsOpened","document","addEventListener","checkClick","removeEventListener","onBlur","onKeyDown","onFocus","selectValue","style","backgroundColor","handleColorChange","disableAlpha","ColorChooser","Component","newColor","node","COPY_SUCCESS_INTERVAL","messages","sidebarBg","sidebarText","sidebarHeaderBg","sidebarHeaderTextColor","sidebarUnreadText","sidebarTextHoverBg","sidebarTextActiveBorder","sidebarTextActiveColor","onlineIndicator","awayIndicator","dndIndicator","mentionBg","mentionColor","centerChannelBg","centerChannelColor","newMessageSeparator","linkColor","buttonBg","buttonColor","errorTextColor","mentionHighlightBg","mentionHighlightLink","codeTheme","CustomThemeChooser","settingId","updateTheme","theme","newTheme","mentionBj","copyTheme","setCopyTheme","text","window","clipboardData","getData","JSON","parse","err","stringify","stopPropagation","textarea","refs","preventDefault","$","sidebarStylesHeader","toggleClass","toggleSection","sidebarStyles","centerChannelStylesHeader","centerChannelStyles","linkAndButtonStylesHeader","linkAndButtonStyles","selectTheme","execCommand","showCopySuccess","copySuccess","setTimeout","hide","on","onCodeThemeChange","componentWillUnmount","off","assign","image","UserAgent","slideToggle","sidebarElements","centerChannelElements","linkAndButtonElements","THEME_ELEMENTS","element","codeThemeOptions","codeThemeURL","themes","codeThemeIndex","iconURL","uiName","popoverContent","popoverStyle","width","alt","src","defaultValue","placement","overlay","group","pasteBox","onCopy","onPaste","pasteBoxChange","onChangeHandle","role","display","toggleSidebarStyles","toggleCenterChannelStyles","toggleLinkAndButtonStyles","PremadeThemeChooser","premadeThemes","allowedThemes","hasAllowedThemes","k","THEMES","hasOwnProperty","premadeTheme","extend","activeClass","propTypes","arrayOf","defaultProps","AllowedThemes","ThemeSetting","teamId","applyToAllTeams","currentTeamId","saveTheme","deleteTeamSpecificThemes","setRequireConfirm","originalTheme","scrollToTop","themeChanged","field","AppDispatcher","handleViewAction","ActionTypes","TOGGLE_IMPORT_THEME_MODAL","callback","setEnforceFocus","selected","ReactDOM","findDOMNode","addClass","removeClass","UNSAFE_componentWillReceiveProps","nextProps","resetFields","DEFAULT_CODE_THEME","showAllTeamsCheckbox","scrollTop","displayCustom","custom","premade","themeUI","allowCustomThemes","href","rel","handleImportModal","allTeamsCheckbox","submitExtra","submitTheme","disableEnterSubmit","focused","getThemeCategory","getCurrentTeamId","getTheme","CATEGORY_THEME","getMyTeamsCount","UserSettingsTheme","TimezoneSuggestion","Suggestion","item","isSelection","timezone","handleClick","baseProps","TimezoneProvider","Provider","handlePretextChanged","timezonePrefix","resultsCallback","displayAllTimezones","filterTimezones","matchedPretext","terms","getSupportedTimezones","items","component","filteredTimezones","filter","getTimezoneRegion","ManageTimezones","manualTimezoneInput","manualTimezone","useAutomaticTimezone","automaticTimezone","oldUseAutomaticTimezone","oldAutomaticTimezone","oldManualTimezone","timezoneNotChanged","submitUser","updatedUser","toString","updateMe","getBrowserTimezone","timezones","timezoneRegion","noTimezonesFromServer","automaticTimezoneInput","handleAutomaticTimezone","disabled","providers","setSwitchBoxRef","onItemSelected","handleTimezoneSelected","listComponent","SuggestionList","maxLength","requiredCharacters","listStyle","completeOnTab","renderDividers","openOnFocus","containerStyle","changeTimezone","ManageLanguage","isKeyPressed","KeyCodes","ESCAPE","openMenu","querySelector","classList","remove","ENTER","add","selectedOption","locale","locales","I18n","userLocale","reactSelectContainer","handleContainerKeyDown","options","l","order","sort","a","b","lang","reactStyles","menuPortal","provided","zIndex","input","classNamePrefix","menuIsOpen","menuPortalTarget","body","styles","clearable","setLanguage","handleKeyDown","onMenuClose","handleMenuClose","onMenuOpen","handleMenuOpen","aria-labelledby","changeLanguage","ManageLanguages","getDisplayStateFromProps","militaryTime","teammateNameDisplay","channelDisplayMode","messageDisplay","collapseDisplay","linkPreviewDisplay","UserSettingsDisplay","timePreference","CATEGORY_DISPLAY_SETTINGS","USE_MILITARY_TIME","teammateNameDisplayPreference","NAME_NAME_FORMAT","channelDisplayModePreference","CHANNEL_DISPLAY_MODE","messageDisplayPreference","MESSAGE_DISPLAY","collapseDisplayPreference","COLLAPSE_DISPLAY","linkPreviewDisplayPreference","LINK_PREVIEW_DISPLAY","updateState","newState","prevSections","clock","linkpreview","message_display","channel_display_mode","languages","enableTimezone","shouldAutoUpdateTimezone","autoUpdateTimezone","handleChannelDisplayModeRadio","handlemessageDisplayRadio","handleCollapseRadio","handleLinkPreviewRadio","createSection","firstOption","secondOption","thirdOption","extraInfo","firstMessage","radionButtonText","moreColon","firstMessageMore","moreId","moreMessage","secondMessage","secondMessageMore","thirdMessage","messageTitle","messageDesc","format","firstDisplay","secondDisplay","thirdDisplay","thirdSection","collapseSection","defaultDisplay","linkPreviewSection","enableLinkPreviews","clockSection","teammateNameDisplaySection","lockTeammateNameDisplay","configTeammateNameDisplay","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","timezoneSelection","userTimezone","currentUserTimezone","messageDisplaySection","MESSAGE_DISPLAY_CLEAN","MESSAGE_DISPLAY_COMPACT","channelDisplayModeSection","CHANNEL_DISPLAY_MODE_FULL_SCREEN","CHANNEL_DISPLAY_MODE_CENTERED","languagesSection","themeSection","defaultClientLocale","enableThemeSelection","getTimezones","getUserTimezone","automaticTimezoneNotSet","AllowCustomThemes","EnableLinkPreviews","DefaultClientLocale","EnableThemeSelection","ExperimentalTimezone","getLicense","LockTeammateNameDisplay","TeammateNameDisplay","getUserCurrentTimezone","USE_MILITARY_TIME_DEFAULT","CHANNEL_DISPLAY_MODE_DEFAULT","MESSAGE_DISPLAY_DEFAULT","COLLAPSE_DISPLAY_DEFAULT","LINK_PREVIEW_DISPLAY_DEFAULT","usernameReserved","usernameRestrictions","validEmail","emailMatch","incorrectPassword","emptyPassword","validImage","imageTooLarge","uploadImage","uploadImageMobile","fullName","nickname","profilePicture","close","position","UserSettingsGeneralTab","resendStatus","showSpinner","sendVerificationEmail","loading","handleEmailResend","usernameError","clientError","min","MIN_USERNAME_LENGTH","max","MAX_USERNAME_LENGTH","trackEvent","firstName","lastName","first_name","last_name","confirmEmail","currentPassword","isEmail","password","emailError","emailUpdated","sectionIsSaving","getMe","requireEmailVerification","clearErrors","logError","AnnouncementBarMessages","EMAIL_VERIFICATION_REQUIRED","AnnouncementBarTypes","SUCCESS","server_error_id","setDefaultProfileImage","submitActive","pictureFile","file","AcceptedProfileImageTypes","includes","size","maxFileSize","loadingPicture","uploadProfileImage","setupInitialState","files","originalEmail","createEmailSection","emailSection","emailVerificationEnabled","helpText","autoFocus","updateEmail","MAX_EMAIL_LENGTH","updateConfirmEmail","updateCurrentPassword","submitEmail","GITLAB_SERVICE","GOOGLE_SERVICE","OFFICE365_SERVICE","LDAP_SERVICE","SAML_SERVICE","nameSection","ldapFirstNameAttributeSet","ldapLastNameAttributeSet","samlFirstNameAttributeSet","samlLastNameAttributeSet","updateFirstName","MAX_FIRSTNAME_LENGTH","updateLastName","MAX_LASTNAME_LENGTH","notifLink","updateTab","notify","submitName","nicknameSection","usernameSection","positionSection","ldapNicknameAttributeSet","samlNicknameAttributeSet","nicknameLabel","updateNickname","MAX_NICKNAME_LENGTH","autoCapitalize","submitNickname","usernameLabel","updateUsername","submitUsername","ldapPositionAttributeSet","samlPositionAttributeSet","positionLabel","updatePosition","MAX_POSITION_LENGTH","submitPosition","pictureSection","onSubmit","submitPicture","onSetDefault","last_picture_update","setDefaultProfilePicture","defaultImageSrc","onFileChange","minMessage","number","RequireEmailVerification","parseInt","MaxFileSize","LdapFirstNameAttributeSet","LdapLastNameAttributeSet","SamlFirstNameAttributeSet","SamlLastNameAttributeSet","LdapNicknameAttributeSet","SamlNicknameAttributeSet","SamlPositionAttributeSet","LdapPositionAttributeSet","DesktopNotificationSettings","cancel","getAttribute","setParentState","activityRadio","soundSection","activity","NotificationLevels","MENTION","NONE","soundRadio","sound","data-key","data-value","ALL","handleMaxUpdateSection","formattedMessageProps","hasSoundOption","handleMinUpdateSection","active","buildMaximizedSetting","buildMinimizedSetting","SECONDS_PER_MINUTE","EmailNotificationSetting","enableEmail","newInterval","emailInterval","emailIntervalPreference","CATEGORY_NOTIFICATIONS","EMAIL_INTERVAL","sendEmailNotifications","INTERVAL_IMMEDIATE","INTERVAL_HOUR","INTERVAL_FIFTEEN_MINUTES","localizeMessage","batchingOptions","batchingInfo","enableEmailBatching","data-enable-email","data-email-interval","INTERVAL_NEVER","getEmailInterval","renderMinSettingView","renderMaxSettingView","INTERVAL_NOT_SET","EnableEmailBatching","SendEmailNotifications","MESSAGE_MAX_LENGTH","ManageAutoResponder","autoResponderActive","autoResponderMessage","activeToggle","handleAutoResponderChecked","resize","rows","placeholder","onMessageChanged","shiftEnter","getNotificationsStateFromProps","desktop","comments","pushActivity","pushStatus","UserStatuses","AWAY","notify_props","desktop_sound","push_status","auto_responder_active","auto_responder_message","usernameKey","customKeys","firstNameKey","channelKey","mention_keys","splice","channel","desktopActivity","desktopSound","customKeysChecked","notifyCommentsLevel","NotificationsTab","mentionKeys","stringKeys","result","handleCancel","val","customcheck","custommentions","updateCustomMentionKeys","sendPushNotifications","pushActivityRadio","pushStatusRadio","pushStatusSettings","ONLINE","handlePushStatusRadio","OFFLINE","handlePushRadio","handleNotifyCommentsRadio","keysSection","commentsSection","autoResponderSection","handleUpdateFirstNameKey","updateFirstNameKey","handleUpdateUsernameKey","updateUsernameKey","handleUpdateChannelKey","updateChannelKey","onCustomChange","concat","commentsActive","enableAutoResponder","setStateValue","pushNotificationSection","createPushNotificationSection","handleEmailRadio","activeTab","SendPushNotifications","ExperimentalEnableAutomaticReplies","UserSettingsNotifications","AccessHistoryModal","getUserAudits","onShow","content","userAudits","Modal","dialogClassName","onHide","onExited","bsSize","Header","closeButton","Title","componentClass","Body","Footer","getCurrentUserAudits","MoreInfo","currentSession","moreInfo","handleMoreInfo","firstAccessTime","getMonthLong","time","os","browser","ActivityLog","submitRevoke","session","device_id","deviceTypeId","deviceTypeMessage","devicePicture","deviceTitle","General","PUSH_NOTIFY_APPLE_REACT_NATIVE","PUSH_NOTIFY_ANDROID_REACT_NATIVE","devicePlatform","lastAccessTime","last_activity_at","platform","isMobileSession","sessionInfo","mobileSessionInfo","ActivityLogModal","altId","modalContent","closest","revokeSession","getSessions","sessions","activityList","reduce","oneOfType","getUserSessions","getCurrentLocale","SECTION_MFA","MfaSection","browserHistory","mfaEnforced","mfaActive","buttonText","removeMfa","setupMfa","renderTitle","mfaAvailable","renderContent","renderHelpText","renderDescription","license","mfaLicensed","IsLicensed","MFA","mfaEnabled","EnableMultifactorAuthentication","EnforceMultifactorAuthentication","mfa_active","SECTION_TOKENS","TOKEN_CREATING","TOKEN_CREATED","TOKEN_NOT_CREATING","UserAccessTokenSection","tokenCreationState","handleCancelConfirm","newtokendescription","tokenError","confirmCopyToken","createUserAccessToken","newToken","confirmAction","showConfirmModal","confirmTitle","confirmMessage","confirmButton","confirmComplete","confirmHideCancel","UserUtils","handleCreateToken","confirmCreateToken","tokenId","userAccessTokens","revokeToken","revokeUserAccessToken","enableUserAccessToken","disableUserAccessToken","clearUserAccessTokens","getUserAccessTokensForUser","tokenListClass","tokenList","noTokenText","newTokenSection","activeLink","activeStatus","is_active","deactivateToken","activateToken","confirmRevokeToken","isMobile","onKeyPress","saveTokenKeyPress","btnClass","savingMessage","stopCreatingToken","additionalClassName","startCreatingToken","infoPosition","cancelButtonText","hideCancel","entities","users","myUserAccessTokens","SECTION_PASSWORD","SECTION_SIGNIN","SECTION_APPS","SecurityTab","getAuthorizedOAuthApps","authorizedApps","newPassword","confirmPassword","passwordError","valid","passwordConfig","defaultState","getDefaultState","savingPassword","updateUserPassword","appId","deauthorizeOAuthApp","app","submitPassword","updateNewPassword","updateConfirmPassword","d","last_password_update","hour12","emailOption","gitlabOption","googleOption","office365Option","ldapOption","samlOption","enableSignUpWithGitLab","to","encodeURIComponent","enableSignUpWithGoogle","enableSignUpWithOffice365","enableLdap","enableSaml","enableSignUpWithEmail","link","apps","homepage","data-app","deauthorizeApp","icon_url","icon50","wrapperClass","authService","enableOAuthServiceProvider","loadAuthorizedOAuthApps","passwordSection","createPasswordSection","signInSection","oauthSection","tokensSection","numMethods","experimentalEnableAuthenticationTransfer","createSignInSection","createOAuthAppsSection","canUseAccessTokens","ariaLabel","dialogType","ownProps","tokensEnabled","EnableUserAccessTokens","userHasTokenRole","EnableOAuthServiceProvider","EnableSignUpWithEmail","EnableSignUpWithGitLab","EnableSignUpWithGoogle","EnableLdap","EnableSaml","EnableSignUpWithOffice365","ExperimentalEnableAuthenticationTransfer","getPasswordConfig","getBool","UserSettingsSidebar","closeUnusedDirectMessages","channelSwitcherOption","sidebarPreference","grouping","sorting","unreadsAtTop","favoriteAtTop","close_unused_direct_messages","channel_switcher_section","updatedSidebarSettings","unreads_at_top","favorite_at_top","CATEGORY_SIDEBAR_SETTINGS","trackSettingChangeIfNecessary","sectionName","showChannelOrganization","contents","renderAutoCloseDMLabel","Fragment","sortingId","sortingDefaultMessage","atTopId","atTopDefaultMessage","renderOrganizationLabel","channelSwitcherSectionDescId","channelSwitcherSectionDescDefault","isMac","helpChannelSwitcherText","renderChannelSwitcherLabel","showUnusedOption","channelOrganizationSection","renderChannelOrganizationSection","autoCloseDMSection","renderAutoCloseDMSection","channelSwitcherSection","renderChannelSwitcherSection","getSidebarPreferences","ExperimentalChannelOrganization","CloseUnusedDirectMessages","UserSettings"],"mappings":"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","file":"17.4819ca8474e5891c3e38.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport * as UserActions from 'mattermost-redux/actions/users';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nexport function activateMfa(code) {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, true, code));\n    };\n}\n\nexport function deactivateMfa() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.updateUserMfa(currentUserId, false));\n    };\n}\n\nexport function generateMfaSecret() {\n    return (dispatch, getState) => {\n        const currentUserId = getCurrentUserId(getState());\n\n        return dispatch(UserActions.generateMfaSecret(currentUserId));\n    };\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport {intlShape} from 'utils/react_intl';\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nexport class AuditTable extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        audits: PropTypes.array.isRequired,\n        showUserId: PropTypes.bool,\n        showIp: PropTypes.bool,\n        showSession: PropTypes.bool,\n        currentUser: PropTypes.object.isRequired,\n        getUser: PropTypes.func.isRequired,\n        getByName: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const audits = this.props.audits;\n        const showUserId = this.props.showUserId;\n        const showIp = this.props.showIp;\n        const showSession = this.props.showSession;\n        var accessList = [];\n\n        for (var i = 0; i < audits.length; i++) {\n            const audit = audits[i];\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit) {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        var profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const auditInfo = {};\n        auditInfo.timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        auditInfo.userId = auditProfile ? auditProfile.email : audit.user_id;\n        auditInfo.desc = auditDesc;\n        auditInfo.ip = audit.ip_address;\n        auditInfo.sessionId = audit.session_id;\n\n        return auditInfo;\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport {AdvancedSections} from 'utils/constants';\n\nexport default class JoinLeaveSection extends React.PureComponent {\n    static propTypes = {\n        activeSection: PropTypes.string,\n        currentUserId: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string,\n        onUpdateSection: PropTypes.func.isRequired,\n        renderOnOffLabel: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            joinLeaveState: props.joinLeave,\n        };\n    }\n\n    handleOnChange = (e) => {\n        const value = e.currentTarget.value;\n\n        this.setState({joinLeaveState: value});\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState({joinLeaveState: this.props.joinLeave});\n        }\n\n        this.props.onUpdateSection(section);\n    }\n\n    handleSubmit = () => {\n        const {actions, currentUserId, onUpdateSection} = this.props;\n        const joinLeavePreference = {category: Preferences.CATEGORY_ADVANCED_SETTINGS, user_id: currentUserId, name: Preferences.ADVANCED_FILTER_JOIN_LEAVE, value: this.state.joinLeaveState};\n        actions.savePreferences(currentUserId, [joinLeavePreference]);\n\n        onUpdateSection();\n    }\n\n    render() {\n        const {joinLeaveState} = this.state;\n        if (this.props.activeSection === AdvancedSections.JOIN_LEAVE) {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.joinLeaveTitle'\n                            defaultMessage='Enable Join/Leave Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='joinLeaveSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveTitle'\n                                    defaultMessage='Enable Join/Leave Messages'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOn'\n                                        type='radio'\n                                        value={'true'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'true'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='joinLeaveOff'\n                                        type='radio'\n                                        value={'false'}\n                                        name={AdvancedSections.JOIN_LEAVE}\n                                        checked={joinLeaveState === 'false'}\n                                        onChange={this.handleOnChange}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.joinLeaveDesc'\n                                    defaultMessage='When \"On\", System Messages saying a user has joined or left a channel will be visible. When \"Off\", the System Messages about joining or leaving a channel will be hidden. A message will still show up when you are added to a channel, so you can receive a notification.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={AdvancedSections.JOIN_LEAVE}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.joinLeaveTitle'\n                        defaultMessage='Enable Join/Leave Messages'\n                    />\n                }\n                describe={this.props.renderOnOffLabel(joinLeaveState)}\n                section={AdvancedSections.JOIN_LEAVE}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport JoinLeaveSection from './join_leave_section.jsx';\n\nfunction mapStateToProps(state) {\n    const joinLeave = getPreference(\n        state,\n        Preferences.CATEGORY_ADVANCED_SETTINGS,\n        Preferences.ADVANCED_FILTER_JOIN_LEAVE,\n        'true'\n    );\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        joinLeave,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(JoinLeaveSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport JoinLeaveSection from './join_leave_section';\n\nconst PreReleaseFeatures = Constants.PRE_RELEASE_FEATURES;\n\nexport default class AdvancedSettingsDisplay extends React.PureComponent {\n    static propTypes = {\n        currentUser: PropTypes.object.isRequired,\n        advancedSettingsCategory: PropTypes.array.isRequired,\n        sendOnCtrlEnter: PropTypes.string.isRequired,\n        codeBlockOnCtrlEnter: PropTypes.bool,\n        formatting: PropTypes.string.isRequired,\n        joinLeave: PropTypes.string.isRequired,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        enablePreviewFeatures: PropTypes.bool,\n        enableUserDeactivation: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const advancedSettings = this.props.advancedSettingsCategory;\n        const settings = {\n            send_on_ctrl_enter: this.props.sendOnCtrlEnter,\n            code_block_ctrl_enter: this.props.codeBlockOnCtrlEnter,\n            formatting: this.props.formatting,\n            join_leave: this.props.joinLeave,\n        };\n\n        const preReleaseFeaturesKeys = Object.keys(PreReleaseFeatures);\n        let enabledFeatures = 0;\n        for (const as of advancedSettings) {\n            for (const key of preReleaseFeaturesKeys) {\n                const feature = PreReleaseFeatures[key];\n\n                if (as.name === Constants.FeatureTogglePrefix + feature.label) {\n                    settings[as.name] = as.value;\n\n                    if (as.value === 'true') {\n                        enabledFeatures += 1;\n                    }\n                }\n            }\n        }\n\n        const isSaving = false;\n\n        const previewFeaturesEnabled = this.props.enablePreviewFeatures;\n        const showDeactivateAccountModal = false;\n\n        return {\n            preReleaseFeatures: PreReleaseFeatures,\n            settings,\n            preReleaseFeaturesKeys,\n            enabledFeatures,\n            isSaving,\n            previewFeaturesEnabled,\n            showDeactivateAccountModal,\n        };\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n        this.setState(settings);\n    }\n\n    toggleFeature = (feature, checked) => {\n        const settings = this.state.settings;\n        settings[Constants.FeatureTogglePrefix + feature] = String(checked);\n\n        let enabledFeatures = 0;\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0 && this.state.settings[setting] === 'true') {\n                enabledFeatures++;\n            }\n        });\n\n        this.setState({settings, enabledFeatures});\n    }\n\n    saveEnabledFeatures = () => {\n        const features = [];\n        Object.keys(this.state.settings).forEach((setting) => {\n            if (setting.lastIndexOf(Constants.FeatureTogglePrefix) === 0) {\n                features.push(setting);\n            }\n        });\n\n        this.handleSubmit(features);\n    }\n\n    handleSubmit = async (settings) => {\n        const preferences = [];\n        const {actions, currentUser} = this.props;\n        const userId = currentUser.id;\n\n        // this should be refactored so we can actually be certain about what type everything is\n        (Array.isArray(settings) ? settings : [settings]).forEach((setting) => {\n            preferences.push({\n                user_id: userId,\n                category: Constants.Preferences.CATEGORY_ADVANCED_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n        });\n\n        this.setState({isSaving: true});\n        await actions.savePreferences(userId, preferences);\n\n        this.handleUpdateSection('');\n    }\n\n    handleDeactivateAccountSubmit = async () => {\n        const userId = this.props.currentUser.id;\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateUserActive(userId, false).\n            then(({error}) => {\n                if (error) {\n                    this.setState({serverError: error.message});\n                }\n            });\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(userId);\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleShowDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: true,\n        });\n    }\n\n    handleHideDeactivateAccountModal = () => {\n        this.setState({\n            showDeactivateAccountModal: false,\n        });\n    }\n\n    handleUpdateSection = (section) => {\n        if (!section) {\n            this.setState(this.getStateFromProps());\n        }\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    }\n\n    // This function changes ctrl to cmd when OS is mac\n    getCtrlSendText = () => {\n        const description = {\n            default: {\n                id: t('user.settings.advance.sendDesc'),\n                defaultMessage: 'When enabled, CTRL + ENTER will send the message and ENTER inserts a new line.',\n            },\n            mac: {\n                id: t('user.settings.advance.sendDesc.mac'),\n                defaultMessage: 'When enabled, ⌘ + ENTER will send the message and ENTER inserts a new line.',\n            },\n        };\n        const title = {\n            default: {\n                id: t('user.settings.advance.sendTitle'),\n                defaultMessage: 'Send messages on CTRL+ENTER',\n            },\n            mac: {\n                id: t('user.settings.advance.sendTitle.mac'),\n                defaultMessage: 'Send messages on ⌘+ENTER',\n            },\n        };\n        if (Utils.isMac()) {\n            return {\n                ctrlSendTitle: title.mac,\n                ctrlSendDesc: description.mac,\n            };\n        }\n        return {\n            ctrlSendTitle: title.default,\n            ctrlSendDesc: description.default,\n        };\n    }\n\n    renderOnOffLabel(enabled) {\n        if (enabled === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.advance.on'\n                defaultMessage='On'\n            />\n        );\n    }\n\n    renderCtrlEnterLabel() {\n        const ctrlEnter = this.state.settings.send_on_ctrl_enter;\n        const codeBlockCtrlEnter = this.state.settings.code_block_ctrl_enter;\n        if (ctrlEnter === 'false' && codeBlockCtrlEnter === 'false') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.off'\n                    defaultMessage='Off'\n                />\n            );\n        } else if (ctrlEnter === 'true' && codeBlockCtrlEnter === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.onForAllMessages'\n                    defaultMessage='On for all messages'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='user.settings.advance.onForCode'\n                defaultMessage='On only for code blocks starting with ```'\n            />\n        );\n    }\n\n    renderFormattingSection = () => {\n        if (this.props.activeSection === 'formatting') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.formattingTitle'\n                            defaultMessage='Enable Post Formatting'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='formattingSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingTitle'\n                                    defaultMessage='Enable Post Formatting'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOn'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting !== 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='postFormattingOff'\n                                        type='radio'\n                                        name='formatting'\n                                        checked={this.state.settings.formatting === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'formatting', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.advance.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.advance.formattingDesc'\n                                    defaultMessage='If enabled, posts will be formatted to create links, show emoji, style the text, and add line breaks. By default, this setting is enabled.'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'formatting'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.advance.formattingTitle'\n                        defaultMessage='Enable Post Formatting'\n                    />\n                }\n                describe={this.renderOnOffLabel(this.state.settings.formatting)}\n                section={'formatting'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderFeatureLabel(feature) {\n        switch (feature) {\n        case 'MARKDOWN_PREVIEW':\n            return (\n                <FormattedMessage\n                    id='user.settings.advance.markdown_preview'\n                    defaultMessage='Show markdown preview option in message input box'\n                />\n            );\n        default:\n            return null;\n        }\n    }\n\n    render() {\n        const serverError = this.state.serverError || null;\n        let ctrlSendSection;\n        const {ctrlSendTitle, ctrlSendDesc} = this.getCtrlSendText();\n\n        if (this.props.activeSection === 'advancedCtrlSend') {\n            const ctrlSendActive = [\n                this.state.settings.send_on_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'true',\n                this.state.settings.send_on_ctrl_enter === 'false' && this.state.settings.code_block_ctrl_enter === 'false',\n            ];\n\n            const inputs = [\n                <fieldset key='ctrlSendSetting'>\n                    <legend className='form-legend hidden-label'>\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOn'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[0]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'true');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForAllMessages'\n                                defaultMessage='On for all messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOnForCode'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[1]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'true');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.onForCode'\n                                defaultMessage='On only for code blocks starting with ```'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='ctrlSendOff'\n                                type='radio'\n                                name='sendOnCtrlEnter'\n                                checked={ctrlSendActive[2]}\n                                onChange={() => {\n                                    this.updateSetting('send_on_ctrl_enter', 'false');\n                                    this.updateSetting('code_block_ctrl_enter', 'false');\n                                }}\n                            />\n                            <FormattedMessage\n                                id='user.settings.advance.off'\n                                defaultMessage='Off'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage {...ctrlSendDesc}/>\n                    </div>\n                </fieldset>,\n            ];\n            ctrlSendSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    inputs={inputs}\n                    submit={this.handleSubmit.bind(this, ['send_on_ctrl_enter', 'code_block_ctrl_enter'])}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            ctrlSendSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage {...ctrlSendTitle}/>\n                    }\n                    describe={this.renderCtrlEnterLabel()}\n                    section={'advancedCtrlSend'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const formattingSection = this.renderFormattingSection();\n        let formattingSectionDivider = null;\n        if (formattingSection) {\n            formattingSectionDivider = <div className='divider-light'/>;\n        }\n\n        let previewFeaturesSection;\n        let previewFeaturesSectionDivider;\n        if (this.state.previewFeaturesEnabled && this.state.preReleaseFeaturesKeys.length > 0) {\n            previewFeaturesSectionDivider = (\n                <div className='divider-light'/>\n            );\n\n            if (this.props.activeSection === 'advancedPreviewFeatures') {\n                const inputs = [];\n\n                this.state.preReleaseFeaturesKeys.forEach((key) => {\n                    const feature = this.state.preReleaseFeatures[key];\n                    inputs.push(\n                        <div key={'advancedPreviewFeatures_' + feature.label}>\n                            <div className='checkbox'>\n                                <label>\n                                    <input\n                                        id={'advancedPreviewFeatures' + feature.label}\n                                        type='checkbox'\n                                        checked={this.state.settings[Constants.FeatureTogglePrefix + feature.label] === 'true'}\n                                        onChange={(e) => {\n                                            this.toggleFeature(feature.label, e.target.checked);\n                                        }}\n                                    />\n                                    {this.renderFeatureLabel(key)}\n                                </label>\n                            </div>\n                        </div>\n                    );\n                });\n\n                inputs.push(\n                    <div key='advancedPreviewFeatures_helptext'>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.advance.preReleaseDesc'\n                            defaultMessage=\"Check any pre-released features you'd like to preview.  You may also need to refresh the page before the setting will take effect.\"\n                        />\n                    </div>\n                );\n                previewFeaturesSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.preReleaseTitle'\n                                defaultMessage='Preview pre-release features'\n                            />\n                        }\n                        inputs={inputs}\n                        submit={this.saveEnabledFeatures}\n                        saving={this.state.isSaving}\n                        server_error={serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                previewFeaturesSection = (\n                    <SettingItemMin\n                        title={Utils.localizeMessage('user.settings.advance.preReleaseTitle', 'Preview pre-release features')}\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.enabledFeatures'\n                                defaultMessage='{count, number} {count, plural, one {Feature} other {Features}} Enabled'\n                                values={{count: this.state.enabledFeatures}}\n                            />\n                        }\n                        section={'advancedPreviewFeatures'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        let deactivateAccountSection = '';\n        let makeConfirmationModal = '';\n        const currentUser = this.props.currentUser;\n\n        if (currentUser.auth_service === '' && this.props.enableUserDeactivation) {\n            if (this.props.activeSection === 'deactivateAccount') {\n                deactivateAccountSection = (\n                    <SettingItemMax\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        inputs={[\n                            <div key='formattingSetting'>\n                                <div>\n                                    <br/>\n                                    <FormattedMessage\n                                        id='user.settings.advance.deactivateDesc'\n                                        defaultMessage='Deactivating your account removes your ability to log in to this server and disables all email and mobile notifications. To reactivate your account, contact your System Administrator.'\n                                    />\n                                </div>\n                            </div>,\n                        ]}\n                        saveButtonText={'Deactivate'}\n                        setting={'deactivateAccount'}\n                        submit={this.handleShowDeactivateAccountModal}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            } else {\n                deactivateAccountSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateAccountTitle'\n                                defaultMessage='Deactivate Account'\n                            />\n                        }\n                        describe={\n                            <FormattedMessage\n                                id='user.settings.advance.deactivateDescShort'\n                                defaultMessage=\"Click 'Edit' to deactivate your account\"\n                            />\n                        }\n                        section={'deactivateAccount'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n\n            const confirmButtonClass = 'btn btn-danger';\n            const deactivateMemberButton = (\n                <FormattedMessage\n                    id='user.settings.advance.deactivate_member_modal.deactivateButton'\n                    defaultMessage='Yes, deactivate my account'\n                />\n            );\n\n            makeConfirmationModal = (\n                <ConfirmModal\n                    show={this.state.showDeactivateAccountModal}\n                    title={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateAccountTitle'\n                            defaultMessage='Confirm Deactivation'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='user.settings.advance.confirmDeactivateDesc'\n                            defaultMessage='Are you sure you want to deactivate your account? This can only be reversed by your System Administrator.'\n                        />\n                    }\n                    confirmButtonClass={confirmButtonClass}\n                    confirmButtonText={deactivateMemberButton}\n                    onConfirm={this.handleDeactivateAccountSubmit}\n                    onCancel={this.handleHideDeactivateAccountModal}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.advance.title'\n                            defaultMessage='Advanced Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {ctrlSendSection}\n                    {formattingSectionDivider}\n                    {formattingSection}\n                    <div className='divider-light'/>\n                    <JoinLeaveSection\n                        activeSection={this.props.activeSection}\n                        onUpdateSection={this.handleUpdateSection}\n                        renderOnOffLabel={this.renderOnOffLabel}\n                    />\n                    {previewFeaturesSectionDivider}\n                    {previewFeaturesSection}\n                    {formattingSectionDivider}\n                    {deactivateAccountSection}\n                    <div className='divider-dark'/>\n                    {makeConfirmationModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {get, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {updateUserActive, revokeAllSessionsForUser} from 'mattermost-redux/actions/users';\n\nimport {Preferences} from 'utils/constants';\n\nimport AdvancedSettingsDisplay from './user_settings_advanced.jsx';\n\nfunction makeMapStateToProps() {\n    const getAdvancedSettingsCategory = makeGetCategory();\n\n    return (state) => {\n        const config = getConfig(state);\n\n        const enablePreviewFeatures = config.EnablePreviewFeatures === 'true';\n        const enableUserDeactivation = config.EnableUserDeactivation === 'true';\n\n        return {\n            advancedSettingsCategory: getAdvancedSettingsCategory(state, Preferences.CATEGORY_ADVANCED_SETTINGS),\n            sendOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'send_on_ctrl_enter', 'false'),\n            codeBlockOnCtrlEnter: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'code_block_ctrl_enter', 'true'),\n            formatting: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'formatting', 'true'),\n            joinLeave: get(state, Preferences.CATEGORY_ADVANCED_SETTINGS, 'join_leave', 'true'),\n            currentUser: getCurrentUser(state),\n            enablePreviewFeatures,\n            enableUserDeactivation,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n            updateUserActive,\n            revokeAllSessionsForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(AdvancedSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\nconst hexRegex = /^#([\\da-f]{3}|[\\da-f]{6})$/i;\n\ntype Props = {\n    id: string;\n    color: string;\n    onChange?: (hex: string) => void;\n}\n\ntype State = {\n    isOpened: boolean;\n    hex: string;\n}\n\nclass ColorInput extends React.PureComponent<Props, State> {\n    private colorPicker: React.RefObject<HTMLDivElement>;\n    private colorInput: React.RefObject<HTMLInputElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.colorPicker = React.createRef();\n        this.colorInput = React.createRef();\n        this.state = {\n            isOpened: false,\n            hex: this.props.color.toUpperCase(),\n        };\n    }\n\n    public componentWillMount() {\n        this.setHex();\n    }\n\n    public componentDidUpdate(prevProps: Props, prevState: State) {\n        const {isOpened: prevIsOpened} = prevState;\n        const {isOpened} = this.state;\n\n        if (this.props.color !== prevProps.color && this.ensureLongColourValue(this.state.hex) !== this.props.color) {\n            this.setHex();\n        }\n\n        if (isOpened !== prevIsOpened) {\n            if (isOpened) {\n                document.addEventListener('click', this.checkClick);\n            } else {\n                document.removeEventListener('click', this.checkClick);\n            }\n        }\n    }\n\n    private setHex() {\n        this.setState({hex: this.props.color.toUpperCase()});\n    }\n\n    private checkClick = (e: MouseEvent): void => {\n        if (!this.colorPicker.current || !this.colorPicker.current.contains(e.target as Element)) {\n            this.setState({isOpened: false});\n        }\n    };\n\n    private togglePicker = () => {\n        if (!this.state.isOpened && this.colorInput.current) {\n            this.colorInput.current.focus();\n        }\n        this.setState({isOpened: !this.state.isOpened});\n    };\n\n    public handleColorChange = (newColorData: ColorResult) => {\n        const {hex} = newColorData;\n        const {onChange: handleChange} = this.props;\n\n        if (handleChange) {\n            handleChange(hex);\n        }\n    };\n\n    private ensureLongColourValue = (value: string) => {\n        if (value.length !== 4) {\n            return value;\n        }\n        return value.split('').map((ch, index) => {\n            if (index === 0) {\n                return ch;\n            }\n            return `${ch}${ch}`;\n        }).join('');\n    }\n\n    private onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        let {value} = event.target;\n        if (!value.startsWith('#')) {\n            value = '#' + value;\n        }\n        if (!hexRegex.test(value)) {\n            return;\n        }\n        this.setState({hex: value});\n        const {onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(this.ensureLongColourValue(value));\n        }\n    };\n\n    private onBlur = () => {\n        const {hex} = this.state;\n        if (hex.length === 4) {\n            const value = this.ensureLongColourValue(hex);\n            const {onChange: handleChange} = this.props;\n            if (handleChange && value.length === 7) {\n                handleChange(value);\n                this.setState({hex: value.toUpperCase()});\n            }\n        } else {\n            this.setHex();\n        }\n    };\n\n    private onKeyDown = (event: React.KeyboardEvent<HTMLInputElement>) => {\n        // open picker on enter or space\n        if (event.key === 'Enter' || event.key === ' ') {\n            this.togglePicker();\n        }\n    };\n\n    private selectValue = (event: React.FocusEvent<HTMLInputElement>): void => {\n        if (event.target) {\n            event.target.setSelectionRange(1, event.target.value.length);\n        }\n    }\n\n    public render() {\n        const {color, id} = this.props;\n        const {isOpened, hex} = this.state;\n\n        return (\n            <div className='color-input input-group'>\n                <input\n                    id={`${id}-inputColorValue`}\n                    ref={this.colorInput}\n                    className='form-control'\n                    type='text'\n                    value={hex}\n                    onChange={this.onChange}\n                    onBlur={this.onBlur}\n                    onKeyDown={this.onKeyDown}\n                    onFocus={this.selectValue}\n                />\n                <span\n                    id={`${id}-squareColorIcon`}\n                    className='input-group-addon color-pad'\n                    onClick={this.togglePicker}\n                >\n                    <i\n                        id={`${id}-squareColorIconValue`}\n                        className='color-icon'\n                        style={{\n                            backgroundColor: color,\n                        }}\n                    />\n                </span>\n                {isOpened && (\n                    <div\n                        ref={this.colorPicker}\n                        className='color-popover'\n                        id={`${id}-ChromePickerModal`}\n                    >\n                        <ChromePicker\n                            color={color}\n                            onChange={this.handleColorChange}\n                            disableAlpha={true}\n                        />\n                    </div>\n                )}\n            </div>\n        );\n    }\n}\n\nexport default ColorInput;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport ColorInput from 'components/color_input';\n\nclass ColorChooser extends React.Component {\n    static propTypes = {\n\n        /*\n         * The id of setting that we will change\n         */\n        id: PropTypes.string.isRequired,\n\n        /*\n         * The label of setting that we will choose\n         */\n        label: PropTypes.node.isRequired,\n\n        /*\n         * Selected color\n         */\n        color: PropTypes.string.isRequired,\n\n        /*\n         * Function called when color changed takes 2 arguments: Id of changing setting and new color\n         */\n        onChange: PropTypes.func,\n    }\n\n    handleChange = (newColor) => {\n        const {id, onChange: handleChange} = this.props;\n        if (handleChange) {\n            handleChange(id, newColor);\n        }\n    }\n\n    render() {\n        const {label, color, id} = this.props;\n        return (\n            <div>\n                <label className='custom-label'>{label}</label>\n                <ColorInput\n                    id={id}\n                    color={color}\n                    onChange={this.handleChange}\n                />\n            </div>\n        );\n    }\n}\n\nexport default ColorChooser;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport 'bootstrap-colorpicker';\n\nimport Constants from 'utils/constants';\nimport * as UserAgent from 'utils/user_agent';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Popover from 'components/widgets/popover';\n\nimport ColorChooser from './color_chooser.jsx';\n\nconst COPY_SUCCESS_INTERVAL = 3000;\n\nconst messages = defineMessages({\n    sidebarBg: {\n        id: t('user.settings.custom_theme.sidebarBg'),\n        defaultMessage: 'Sidebar BG',\n    },\n    sidebarText: {\n        id: t('user.settings.custom_theme.sidebarText'),\n        defaultMessage: 'Sidebar Text',\n    },\n    sidebarHeaderBg: {\n        id: t('user.settings.custom_theme.sidebarHeaderBg'),\n        defaultMessage: 'Sidebar Header BG',\n    },\n    sidebarHeaderTextColor: {\n        id: t('user.settings.custom_theme.sidebarHeaderTextColor'),\n        defaultMessage: 'Sidebar Header Text',\n    },\n    sidebarUnreadText: {\n        id: t('user.settings.custom_theme.sidebarUnreadText'),\n        defaultMessage: 'Sidebar Unread Text',\n    },\n    sidebarTextHoverBg: {\n        id: t('user.settings.custom_theme.sidebarTextHoverBg'),\n        defaultMessage: 'Sidebar Text Hover BG',\n    },\n    sidebarTextActiveBorder: {\n        id: t('user.settings.custom_theme.sidebarTextActiveBorder'),\n        defaultMessage: 'Sidebar Text Active Border',\n    },\n    sidebarTextActiveColor: {\n        id: t('user.settings.custom_theme.sidebarTextActiveColor'),\n        defaultMessage: 'Sidebar Text Active Color',\n    },\n    onlineIndicator: {\n        id: t('user.settings.custom_theme.onlineIndicator'),\n        defaultMessage: 'Online Indicator',\n    },\n    awayIndicator: {\n        id: t('user.settings.custom_theme.awayIndicator'),\n        defaultMessage: 'Away Indicator',\n    },\n    dndIndicator: {\n        id: t('user.settings.custom_theme.dndIndicator'),\n        defaultMessage: 'Do Not Disturb Indicator',\n    },\n    mentionBg: {\n        id: t('user.settings.custom_theme.mentionBg'),\n        defaultMessage: 'Mention Jewel BG',\n    },\n    mentionColor: {\n        id: t('user.settings.custom_theme.mentionColor'),\n        defaultMessage: 'Mention Jewel Text',\n    },\n    centerChannelBg: {\n        id: t('user.settings.custom_theme.centerChannelBg'),\n        defaultMessage: 'Center Channel BG',\n    },\n    centerChannelColor: {\n        id: t('user.settings.custom_theme.centerChannelColor'),\n        defaultMessage: 'Center Channel Text',\n    },\n    newMessageSeparator: {\n        id: t('user.settings.custom_theme.newMessageSeparator'),\n        defaultMessage: 'New Message Separator',\n    },\n    linkColor: {\n        id: t('user.settings.custom_theme.linkColor'),\n        defaultMessage: 'Link Color',\n    },\n    buttonBg: {\n        id: t('user.settings.custom_theme.buttonBg'),\n        defaultMessage: 'Button BG',\n    },\n    buttonColor: {\n        id: t('user.settings.custom_theme.buttonColor'),\n        defaultMessage: 'Button Text',\n    },\n    errorTextColor: {\n        id: t('user.settings.custom_theme.errorTextColor'),\n        defaultMessage: 'Error Text Color',\n    },\n    mentionHighlightBg: {\n        id: t('user.settings.custom_theme.mentionHighlightBg'),\n        defaultMessage: 'Mention Highlight BG',\n    },\n    mentionHighlightLink: {\n        id: t('user.settings.custom_theme.mentionHighlightLink'),\n        defaultMessage: 'Mention Highlight Link',\n    },\n    codeTheme: {\n        id: t('user.settings.custom_theme.codeTheme'),\n        defaultMessage: 'Code Theme',\n    },\n});\n\nexport default class CustomThemeChooser extends React.Component {\n    static propTypes = {\n        theme: PropTypes.object.isRequired,\n        updateTheme: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const copyTheme = this.setCopyTheme(this.props.theme);\n\n        this.state = {\n            copyTheme,\n        };\n    }\n\n    componentDidMount() {\n        $('.group--code').on('change', this.onCodeThemeChange);\n    }\n\n    componentWillUnmount() {\n        $('.group--code').off('change', this.onCodeThemeChange);\n    }\n\n    handleColorChange = (settingId, color) => {\n        const {updateTheme, theme} = this.props;\n        if (theme[settingId] !== color) {\n            const newTheme = {\n                ...theme,\n                type: 'custom',\n                [settingId]: color,\n            };\n\n            // For backwards compatability\n            if (settingId === 'mentionBg') {\n                newTheme.mentionBj = color;\n            }\n\n            updateTheme(newTheme);\n\n            const copyTheme = this.setCopyTheme(newTheme);\n\n            this.setState({\n                copyTheme,\n            });\n        }\n    }\n\n    setCopyTheme(theme) {\n        const copyTheme = Object.assign({}, theme);\n        delete copyTheme.type;\n        delete copyTheme.image;\n\n        return JSON.stringify(copyTheme);\n    }\n\n    pasteBoxChange = (e) => {\n        let text = '';\n\n        if (window.clipboardData && window.clipboardData.getData) { // IE\n            text = window.clipboardData.getData('Text');\n        } else {\n            text = e.clipboardData.getData('Text');//e.clipboardData.getData('text/plain');\n        }\n\n        if (text.length === 0) {\n            return;\n        }\n\n        let theme;\n        try {\n            theme = JSON.parse(text);\n        } catch (err) {\n            return;\n        }\n\n        this.setState({\n            copyTheme: JSON.stringify(theme),\n        });\n\n        theme.type = 'custom';\n        this.props.updateTheme(theme);\n    }\n\n    onChangeHandle = (e) => {\n        e.stopPropagation();\n    }\n\n    selectTheme = () => {\n        const textarea = this.refs.textarea;\n        textarea.focus();\n        textarea.setSelectionRange(0, this.state.copyTheme.length);\n    }\n\n    toggleSidebarStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.sidebarStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.sidebarStyles);\n    }\n\n    toggleCenterChannelStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.centerChannelStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.centerChannelStyles);\n    }\n\n    toggleLinkAndButtonStyles = (e) => {\n        e.preventDefault();\n\n        $(this.refs.linkAndButtonStylesHeader).toggleClass('open');\n        this.toggleSection(this.refs.linkAndButtonStyles);\n    }\n\n    toggleSection(node) {\n        if (UserAgent.isIos()) {\n            // iOS doesn't support jQuery animations\n            $(node).toggleClass('open');\n        } else {\n            $(node).slideToggle();\n        }\n    }\n\n    onCodeThemeChange = (e) => {\n        const theme = {\n            ...this.props.theme,\n            type: 'custom',\n            codeTheme: e.target.value,\n        };\n\n        this.props.updateTheme(theme);\n    }\n\n    copyTheme = () => {\n        this.selectTheme();\n        document.execCommand('copy');\n        this.showCopySuccess();\n    }\n\n    showCopySuccess = () => {\n        const copySuccess = $('.copy-theme-success');\n        copySuccess.show();\n\n        setTimeout(() => {\n            copySuccess.hide();\n        }, COPY_SUCCESS_INTERVAL);\n    }\n\n    render() {\n        const theme = this.props.theme;\n\n        const sidebarElements = [];\n        const centerChannelElements = [];\n        const linkAndButtonElements = [];\n        Constants.THEME_ELEMENTS.forEach((element, index) => {\n            if (element.id === 'codeTheme') {\n                const codeThemeOptions = [];\n                let codeThemeURL = '';\n\n                element.themes.forEach((codeTheme, codeThemeIndex) => {\n                    if (codeTheme.id === theme[element.id]) {\n                        codeThemeURL = codeTheme.iconURL;\n                    }\n                    codeThemeOptions.push(\n                        <option\n                            key={'code-theme-key' + codeThemeIndex}\n                            value={codeTheme.id}\n                        >\n                            {codeTheme.uiName}\n                        </option>,\n                    );\n                });\n\n                var popoverContent = (\n                    <Popover\n                        popoverStyle='info'\n                        id='code-popover'\n                        className='code-popover'\n                    >\n                        <img\n                            width='200'\n                            alt={'code theme image'}\n                            src={codeThemeURL}\n                        />\n                    </Popover>\n                );\n\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group'\n                        key={'custom-theme-key' + index}\n                    >\n                        <label className='custom-label'>\n                            <FormattedMessage {...messages[element.id]}/>\n                        </label>\n                        <div\n                            className='input-group theme-group group--code dropdown'\n                            id={element.id}\n                        >\n                            <select\n                                id='codeThemeSelect'\n                                className='form-control'\n                                type='text'\n                                defaultValue={theme[element.id]}\n                            >\n                                {codeThemeOptions}\n                            </select>\n                            <OverlayTrigger\n                                placement='top'\n                                overlay={popoverContent}\n                                ref='headerOverlay'\n                            >\n                                <span className='input-group-addon'>\n                                    <img\n                                        alt={'code theme image'}\n                                        src={codeThemeURL}\n                                    />\n                                </span>\n                            </OverlayTrigger>\n                        </div>\n                    </div>,\n                );\n            } else if (element.group === 'centerChannelElements') {\n                centerChannelElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else if (element.group === 'sidebarElements') {\n                // Need to support old typo mentionBj element for mentionBg\n                let color = theme[element.id];\n                if (!color && element.id === 'mentionBg') {\n                    color = theme.mentionBj;\n                }\n\n                sidebarElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={color}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            } else {\n                linkAndButtonElements.push(\n                    <div\n                        className='col-sm-6 form-group element'\n                        key={'custom-theme-key' + index}\n                    >\n                        <ColorChooser\n                            id={element.id}\n                            label={<FormattedMessage {...messages[element.id]}/>}\n                            color={theme[element.id]}\n                            onChange={this.handleColorChange}\n                        />\n                    </div>,\n                );\n            }\n        });\n\n        const pasteBox = (\n            <div className='col-sm-12'>\n                <label className='custom-label'>\n                    <FormattedMessage\n                        id='user.settings.custom_theme.copyPaste'\n                        defaultMessage='Copy to share or paste theme colors here:'\n                    />\n                </label>\n                <textarea\n                    ref='textarea'\n                    className='form-control'\n                    id='pasteBox'\n                    value={this.state.copyTheme}\n                    onCopy={this.showCopySuccess}\n                    onPaste={this.pasteBoxChange}\n                    onChange={this.onChangeHandle}\n                    onClick={this.selectTheme}\n                />\n                <div className='margin-top x2'>\n                    <button\n                        className='btn btn-link copy-theme-button'\n                        onClick={this.copyTheme}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copyThemeColors'\n                            defaultMessage='Copy Theme Colors'\n                        />\n                    </button>\n                    <span\n                        className='alert alert-success copy-theme-success'\n                        role='alert'\n                        style={{display: 'none'}}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.copied'\n                            defaultMessage='✔ Copied'\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n\n        return (\n            <div className='appearance-section padding-top'>\n                <div className='theme-elements row'>\n                    <div\n                        ref='sidebarStylesHeader'\n                        id='sidebarStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleSidebarStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.sidebarTitle'\n                            defaultMessage='Sidebar Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='sidebarStyles'\n                        className='theme-elements__body'\n                    >\n                        {sidebarElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='centerChannelStylesHeader'\n                        id='centerChannelStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleCenterChannelStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.centerChannelTitle'\n                            defaultMessage='Center Channel Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='centerChannelStyles'\n                        id='centerChannelStyles'\n                        className='theme-elements__body'\n                    >\n                        {centerChannelElements}\n                    </div>\n                </div>\n                <div className='theme-elements row'>\n                    <div\n                        ref='linkAndButtonStylesHeader'\n                        id='linkAndButtonsStyles'\n                        className='theme-elements__header'\n                        onClick={this.toggleLinkAndButtonStyles}\n                    >\n                        <FormattedMessage\n                            id='user.settings.custom_theme.linkButtonTitle'\n                            defaultMessage='Link and Button Styles'\n                        />\n                        <div className='header__icon'>\n                            <LocalizedIcon\n                                className='fa fa-plus'\n                                title={{id: t('generic_icons.expand'), defaultMessage: 'Expand Icon'}}\n                            />\n                            <LocalizedIcon\n                                className='fa fa-minus'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                    </div>\n                    <div\n                        ref='linkAndButtonStyles'\n                        className='theme-elements__body'\n                    >\n                        {linkAndButtonElements}\n                    </div>\n                </div>\n                <div className='row margin-top x2'>\n                    {pasteBox}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class PremadeThemeChooser extends React.Component {\n    render() {\n        const theme = this.props.theme;\n\n        const premadeThemes = [];\n        const allowedThemes = this.props.allowedThemes;\n        const hasAllowedThemes = allowedThemes.length > 1 || (allowedThemes[0] && allowedThemes[0].trim().length > 0);\n\n        for (const k in Constants.THEMES) {\n            if (Constants.THEMES.hasOwnProperty(k)) {\n                if (hasAllowedThemes && allowedThemes.indexOf(k) < 0) {\n                    continue;\n                }\n\n                const premadeTheme = $.extend(true, {}, Constants.THEMES[k]);\n\n                let activeClass = '';\n                if (premadeTheme.type === theme.type) {\n                    activeClass = 'active';\n                }\n\n                premadeThemes.push(\n                    <div\n                        className='col-xs-6 col-sm-3 premade-themes'\n                        key={'premade-theme-key' + k}\n                    >\n                        <div\n                            id={`premadeTheme${premadeTheme.type.replace(' ', '')}`}\n                            className={activeClass}\n                            onClick={() => this.props.updateTheme(premadeTheme)}\n                        >\n                            <label>\n                                <img\n                                    alt={'premade theme ' + k}\n                                    className='img-responsive'\n                                    src={premadeTheme.image}\n                                />\n                                <div className='theme-label'>{Utils.toTitleCase(premadeTheme.type)}</div>\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        return (\n            <div className='row appearance-section'>\n                <div className='clearfix'>\n                    {premadeThemes}\n                </div>\n            </div>\n        );\n    }\n}\n\nPremadeThemeChooser.propTypes = {\n    theme: PropTypes.object.isRequired,\n    updateTheme: PropTypes.func.isRequired,\n    allowedThemes: PropTypes.arrayOf(PropTypes.string),\n};\n\nPremadeThemeChooser.defaultProps = {\n    allowedThemes: [],\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PremadeThemeChooser from './premade_theme_chooser.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const allowedThemes = (config.AllowedThemes && config.AllowedThemes.split(',')) || [];\n\n    return {\n        allowedThemes,\n    };\n}\n\nexport default connect(mapStateToProps)(PremadeThemeChooser);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {ActionTypes, Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport AppDispatcher from 'dispatcher/app_dispatcher.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport CustomThemeChooser from './custom_theme_chooser.jsx';\nimport PremadeThemeChooser from './premade_theme_chooser';\n\nexport default class ThemeSetting extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n            saveTheme: PropTypes.func.isRequired,\n            deleteTeamSpecificThemes: PropTypes.func.isRequired,\n        }).isRequired,\n        currentTeamId: PropTypes.string.isRequired,\n        theme: PropTypes.object,\n        selected: PropTypes.bool.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        focused: PropTypes.bool.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...this.getStateFromProps(props),\n            isSaving: false,\n        };\n\n        this.originalTheme = Object.assign({}, this.state.theme);\n    }\n\n    componentDidMount() {\n        if (this.props.selected) {\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    componentDidUpdate() {\n        if (this.props.selected) {\n            $('.color-btn').removeClass('active-border');\n            $(ReactDOM.findDOMNode(this.refs[this.state.theme])).addClass('active-border');\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected && !nextProps.selected) {\n            this.resetFields();\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.props.selected) {\n            Utils.applyTheme(this.props.theme);\n        }\n    }\n\n    getStateFromProps(props = this.props) {\n        const theme = {...props.theme};\n        if (!theme.codeTheme) {\n            theme.codeTheme = Constants.DEFAULT_CODE_THEME;\n        }\n\n        return {\n            theme,\n            type: theme.type || 'premade',\n            showAllTeamsCheckbox: props.showAllTeamsCheckbox,\n            applyToAllTeams: props.applyToAllTeams,\n        };\n    }\n\n    scrollToTop() {\n        $('.ps-container.modal-body').scrollTop(0);\n    }\n\n    submitTheme = async () => {\n        const teamId = this.state.applyToAllTeams ? '' : this.props.currentTeamId;\n\n        this.setState({isSaving: true});\n\n        await this.props.actions.saveTheme(teamId, this.state.theme);\n\n        if (this.state.applyToAllTeams) {\n            await this.props.actions.deleteTeamSpecificThemes();\n        }\n\n        this.props.setRequireConfirm(false);\n        this.originalTheme = Object.assign({}, this.state.theme);\n        this.scrollToTop();\n        this.props.updateSection('');\n        this.setState({isSaving: false});\n    };\n\n    updateTheme = (theme) => {\n        let themeChanged = this.state.theme.length === theme.length;\n        if (!themeChanged) {\n            for (const field in theme) {\n                if (theme.hasOwnProperty(field)) {\n                    if (this.state.theme[field] !== theme[field]) {\n                        themeChanged = true;\n                        break;\n                    }\n                }\n            }\n        }\n\n        this.props.setRequireConfirm(themeChanged);\n\n        this.setState({theme});\n        Utils.applyTheme(theme);\n    };\n\n    updateType(type) {\n        this.setState({type});\n    }\n\n    resetFields = () => {\n        const state = this.getStateFromProps();\n        state.serverError = null;\n        this.setState(state);\n        this.scrollToTop();\n\n        Utils.applyTheme(state.theme);\n\n        this.props.setRequireConfirm(false);\n    };\n\n    handleImportModal = () => {\n        AppDispatcher.handleViewAction({\n            type: ActionTypes.TOGGLE_IMPORT_THEME_MODAL,\n            value: true,\n            callback: this.updateTheme,\n        });\n\n        this.props.setEnforceFocus(false);\n    };\n\n    handleUpdateSection = (section) => {\n        this.props.updateSection(section);\n    };\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        const displayCustom = this.state.type === 'custom';\n\n        let custom;\n        let premade;\n        if (displayCustom && this.props.allowCustomThemes) {\n            custom = (\n                <div key='customThemeChooser'>\n                    <CustomThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        } else {\n            premade = (\n                <div key='premadeThemeChooser'>\n                    <br/>\n                    <PremadeThemeChooser\n                        theme={this.state.theme}\n                        updateTheme={this.updateTheme}\n                    />\n                </div>\n            );\n        }\n\n        let themeUI;\n        if (this.props.selected) {\n            const inputs = [];\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='premadeThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='standardThemes'\n                                type='radio'\n                                name='theme'\n                                checked={!displayCustom}\n                                onChange={this.updateType.bind(this, 'premade')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.themeColors'\n                                defaultMessage='Theme Colors'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            inputs.push(premade);\n\n            if (this.props.allowCustomThemes) {\n                inputs.push(\n                    <div\n                        className='radio'\n                        key='customThemeColorLabel'\n                    >\n                        <label>\n                            <input\n                                id='customThemes'\n                                type='radio'\n                                name='theme'\n                                checked={displayCustom}\n                                onChange={this.updateType.bind(this, 'custom')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.customTheme'\n                                defaultMessage='Custom Theme'\n                            />\n                        </label>\n                    </div>\n                );\n\n                inputs.push(custom);\n\n                inputs.push(\n                    <div key='otherThemes'>\n                        <br/>\n                        <a\n                            id='otherThemes'\n                            href='http://docs.mattermost.com/help/settings/theme-colors.html#custom-theme-examples'\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.otherThemes'\n                                defaultMessage='See other themes'\n                            />\n                        </a>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='importSlackThemeButton'\n                        className='padding-top'\n                    >\n                        <button\n                            id='slackImportTheme'\n                            className='theme style--none color--link'\n                            onClick={this.handleImportModal}\n                        >\n                            <FormattedMessage\n                                id='user.settings.display.theme.import'\n                                defaultMessage='Import theme colors from Slack'\n                            />\n                        </button>\n                    </div>\n                );\n            }\n\n            let allTeamsCheckbox = null;\n            if (this.state.showAllTeamsCheckbox) {\n                allTeamsCheckbox = (\n                    <div className='checkbox user-settings__submit-checkbox'>\n                        <label>\n                            <input\n                                id='applyThemeToAllTeams'\n                                type='checkbox'\n                                checked={this.state.applyToAllTeams}\n                                onChange={(e) => this.setState({applyToAllTeams: e.target.checked})}\n                            />\n                            <FormattedMessage\n                                id='user.settings.display.theme.applyToAllTeams'\n                                defaultMessage='Apply new theme to all my teams'\n                            />\n                        </label>\n                    </div>\n                );\n            }\n\n            themeUI = (\n                <SettingItemMax\n                    inputs={inputs}\n                    submitExtra={allTeamsCheckbox}\n                    submit={this.submitTheme}\n                    disableEnterSubmit={true}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    width='full'\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            themeUI = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.display.theme.title'\n                            defaultMessage='Theme'\n                        />\n                    }\n                    describe={\n                        <FormattedMessage\n                            id='user.settings.display.theme.describe'\n                            defaultMessage='Open to manage your theme'\n                        />\n                    }\n                    section={'theme'}\n                    updateSection={this.handleUpdateSection}\n                    focused={this.props.focused}\n                />\n            );\n        }\n\n        return themeUI;\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTheme, makeGetCategory} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentTeamId, getMyTeamsCount} from 'mattermost-redux/selectors/entities/teams';\n\nimport {saveTheme, deleteTeamSpecificThemes} from 'mattermost-redux/actions/preferences';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsTheme from './user_settings_theme.jsx';\n\nfunction makeMapStateToProps() {\n    const getThemeCategory = makeGetCategory();\n\n    return (state) => {\n        return {\n            currentTeamId: getCurrentTeamId(state),\n            theme: getTheme(state),\n            applyToAllTeams: getThemeCategory(state, Preferences.CATEGORY_THEME).length <= 1,\n            showAllTeamsCheckbox: getMyTeamsCount(state) > 1,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            saveTheme,\n            deleteTeamSpecificThemes,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(UserSettingsTheme);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\n\nimport {getSupportedTimezones} from 'utils/timezone';\n\nimport Provider from './provider.jsx';\nimport Suggestion from './suggestion.jsx';\n\nclass TimezoneSuggestion extends Suggestion {\n    render() {\n        const {item, isSelection} = this.props;\n        const timezone = item;\n\n        let className = 'mentions__name';\n        if (isSelection) {\n            className += ' suggestion--selected';\n        }\n\n        return (\n            <div\n                onClick={this.handleClick}\n                className={className}\n                ref={(node) => {\n                    this.node = node;\n                }}\n                {...Suggestion.baseProps}\n            >\n                {timezone}\n            </div>\n        );\n    }\n}\n\nexport default class TimezoneProvider extends Provider {\n    handlePretextChanged(timezonePrefix, resultsCallback) {\n        if (timezonePrefix.length === 0) {\n            this.displayAllTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        if (timezonePrefix) {\n            this.filterTimezones(resultsCallback, timezonePrefix);\n            return true;\n        }\n\n        return false;\n    }\n\n    async displayAllTimezones(resultsCallback) {\n        resultsCallback({\n            matchedPretext: '',\n            terms: getSupportedTimezones(),\n            items: getSupportedTimezones(),\n            component: TimezoneSuggestion,\n        });\n    }\n\n    async filterTimezones(resultsCallback, timezonePrefix) {\n        const filteredTimezones = getSupportedTimezones().filter((t) => (\n            getTimezoneRegion(t).toLowerCase().indexOf(timezonePrefix) >= 0 ||\n                t.toLowerCase().indexOf(timezonePrefix) >= 0\n        ));\n\n        resultsCallback({\n            matchedPretext: timezonePrefix,\n            terms: filteredTimezones,\n            items: filteredTimezones,\n            component: TimezoneSuggestion,\n        });\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {getBrowserTimezone} from 'utils/timezone';\n\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\nimport TimezoneProvider from 'components/suggestion/timezone_provider.jsx';\n\nexport default class ManageTimezones extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        useAutomaticTimezone: PropTypes.bool.isRequired,\n        automaticTimezone: PropTypes.string.isRequired,\n        manualTimezone: PropTypes.string.isRequired,\n        timezones: PropTypes.array.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            useAutomaticTimezone: props.useAutomaticTimezone,\n            automaticTimezone: props.automaticTimezone,\n            manualTimezone: props.manualTimezone,\n            manualTimezoneInput: props.manualTimezone,\n            isSaving: false,\n        };\n    }\n\n    onChange = (e) => {\n        this.setState({manualTimezoneInput: e.target.value});\n    };\n\n    handleTimezoneSelected = (selected) => {\n        if (!selected) {\n            return;\n        }\n\n        this.setState({\n            manualTimezone: selected,\n            manualTimezoneInput: selected,\n        });\n    };\n\n    timezoneNotChanged = () => {\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const {\n            useAutomaticTimezone: oldUseAutomaticTimezone,\n            automaticTimezone: oldAutomaticTimezone,\n            manualTimezone: oldManualTimezone,\n        } = this.props;\n\n        return (\n            useAutomaticTimezone === oldUseAutomaticTimezone &&\n            automaticTimezone === oldAutomaticTimezone &&\n            manualTimezone === oldManualTimezone\n        );\n    };\n\n    changeTimezone = () => {\n        if (this.timezoneNotChanged()) {\n            this.props.updateSection('');\n            return;\n        }\n\n        this.submitUser();\n    };\n\n    submitUser = () => {\n        const {user, actions} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n            manualTimezone,\n        } = this.state;\n\n        const timezone = {\n            useAutomaticTimezone: useAutomaticTimezone.toString(),\n            automaticTimezone,\n            manualTimezone,\n        };\n\n        const updatedUser = {\n            ...user,\n            timezone,\n        };\n\n        actions.updateMe(updatedUser).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.props.updateSection('');\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    };\n\n    handleAutomaticTimezone = (e) => {\n        const useAutomaticTimezone = e.target.checked;\n        let automaticTimezone = '';\n\n        if (useAutomaticTimezone) {\n            automaticTimezone = getBrowserTimezone();\n        }\n\n        this.setState({\n            useAutomaticTimezone,\n            automaticTimezone,\n        });\n    };\n\n    handleManualTimezone = (e) => {\n        this.setState({manualTimezone: e.target.value});\n    };\n\n    render() {\n        const {timezones} = this.props;\n        const {\n            useAutomaticTimezone,\n            automaticTimezone,\n        } = this.state;\n\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const inputs = [];\n\n        const timezoneRegion = (\n            <div\n                className='section-describe padding-top'\n            >\n                {useAutomaticTimezone && getTimezoneRegion(automaticTimezone)}\n            </div>\n        );\n\n        const noTimezonesFromServer = timezones.length === 0;\n        const automaticTimezoneInput = (\n            <div className='checkbox'>\n                <label>\n                    <input\n                        id='automaticTimezoneInput'\n                        type='checkbox'\n                        checked={useAutomaticTimezone}\n                        onChange={this.handleAutomaticTimezone}\n                        disabled={noTimezonesFromServer}\n                    />\n                    <FormattedMessage\n                        id='user.settings.timezones.automatic'\n                        defaultMessage='Set automatically'\n                    />\n                    {timezoneRegion}\n                </label>\n            </div>\n        );\n\n        const providers = [new TimezoneProvider()];\n        const manualTimezoneInput = (\n            <div key='changeTimezone'>\n                <label className='control-label'>\n                    <FormattedMessage\n                        id='user.settings.timezones.change'\n                        defaultMessage='Change timezone'\n                    />\n                </label>\n                <div className='padding-top'>\n                    <SuggestionBox\n                        ref={this.setSwitchBoxRef}\n                        className='form-control focused'\n                        type='search'\n                        onChange={this.onChange}\n                        value={this.state.manualTimezoneInput}\n                        onItemSelected={this.handleTimezoneSelected}\n                        listComponent={SuggestionList}\n                        maxLength='64'\n                        requiredCharacters={0}\n                        providers={providers}\n                        listStyle='bottom'\n                        completeOnTab={false}\n                        renderDividers={false}\n                        openOnFocus={true}\n                        disabled={noTimezonesFromServer}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(automaticTimezoneInput);\n\n        if (!useAutomaticTimezone) {\n            inputs.push(manualTimezoneInput);\n        }\n\n        inputs.push(\n            <div>\n                <br/>\n                <FormattedHTMLMessage\n                    id='user.settings.timezones.promote'\n                    defaultMessage='Select the time zone used for timestamps in the user interface and email notifications.'\n                />\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.timezone'\n                        defaultMessage='Timezone'\n                    />\n                }\n                containerStyle='timezone-container'\n                width='medium'\n                submit={this.changeTimezone}\n                saving={this.state.isSaving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageTimezones from './manage_timezones';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageTimezones);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport ReactSelect from 'react-select';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {isKeyPressed} from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nexport default class ManageLanguage extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        locale: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        const locales = I18n.getLanguages();\n        const userLocale = props.locale;\n        const selectedOption = {value: locales[userLocale].value, label: locales[userLocale].name};\n        this.reactSelectContainer = React.createRef();\n\n        this.state = {\n            locale: props.locale,\n            selectedOption,\n            isSaving: false,\n            openMenu: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.addEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    componentWillUnmount() {\n        if (this.reactSelectContainer.current) {\n            this.reactSelectContainer.current.removeEventListener('keydown', this.handleContainerKeyDown);\n        }\n    }\n\n    handleContainerKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ESCAPE) && this.state.openMenu) {\n            document.querySelector('.modal-body').classList.remove('no-scroll');\n            this.setState({openMenu: false});\n            e.stopPropagation();\n        }\n    }\n\n    handleKeyDown = (e) => {\n        if (isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            document.querySelector('.modal-body').classList.add('no-scroll');\n            this.setState({openMenu: true});\n        }\n    }\n\n    setLanguage = (selectedOption) => {\n        this.setState({\n            locale: selectedOption.value,\n            selectedOption,\n        });\n    }\n\n    changeLanguage = () => {\n        if (this.props.user.locale === this.state.locale) {\n            this.props.updateSection('');\n        } else {\n            this.submitUser({\n                ...this.props.user,\n                locale: this.state.locale,\n            });\n        }\n    }\n\n    submitUser = (user) => {\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    // Do nothing since changing the locale essentially refreshes the page\n                } else if (err) {\n                    let serverError;\n                    if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, isSaving: false});\n                }\n            });\n    }\n\n    handleMenuClose = () => {\n        document.querySelector('.modal-body').classList.remove('no-scroll');\n        this.setState({openMenu: false});\n    }\n\n    handleMenuOpen = () => {\n        document.querySelector('.modal-body').classList.add('no-scroll');\n        this.setState({openMenu: true});\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <label className='has-error'>{this.state.serverError}</label>;\n        }\n\n        const options = [];\n        const locales = I18n.getLanguages();\n\n        const languages = Object.keys(locales).map((l) => {\n            return {\n                value: locales[l].value,\n                name: locales[l].name,\n                order: locales[l].order,\n            };\n        }).sort((a, b) => a.order - b.order);\n\n        languages.forEach((lang) => {\n            options.push(\n                {value: lang.value, label: lang.name}\n            );\n        });\n\n        const reactStyles = {\n            menuPortal: (provided) => ({\n                ...provided,\n                zIndex: 9999,\n            }),\n        };\n\n        const input = (\n            <div key='changeLanguage'>\n                <br/>\n                <label\n                    className='control-label'\n                    id='changeInterfaceLanguageLabel'\n                >\n                    <FormattedMessage\n                        id='user.settings.languages.change'\n                        defaultMessage='Change interface language'\n                    />\n                </label>\n                <div\n                    ref={this.reactSelectContainer}\n                    className='padding-top'\n                >\n                    <ReactSelect\n                        className='react-select react-select-top'\n                        classNamePrefix='react-select'\n                        id='displayLanguage'\n                        menuIsOpen={this.state.openMenu}\n                        menuPortalTarget={document.body}\n                        styles={reactStyles}\n                        options={options}\n                        clearable={false}\n                        onChange={this.setLanguage}\n                        onKeyDown={this.handleKeyDown}\n                        value={this.state.selectedOption}\n                        onMenuClose={this.handleMenuClose}\n                        onMenuOpen={this.handleMenuOpen}\n                        aria-labelledby='changeInterfaceLanguageLabel'\n                    />\n                    {serverError}\n                </div>\n                <div>\n                    <br/>\n                    <FormattedMarkdownMessage\n                        id='user.settings.languages.promote'\n                        defaultMessage='Select which language Mattermost displays in the user interface.\\n \\nWould you like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.'\n                    />\n                </div>\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.display.language'\n                        defaultMessage='Language'\n                    />\n                }\n                width='medium'\n                submit={this.changeLanguage}\n                saving={this.state.isSaving}\n                inputs={[input]}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\n\nimport ManageLanguages from './manage_languages';\n\nfunction mapDispatchToProps(dispatch) {\n    return {actions: bindActionCreators({updateMe}, dispatch)};\n}\n\nexport default connect(null, mapDispatchToProps)(ManageLanguages);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {getTimezoneRegion} from 'mattermost-redux/utils/timezone_utils';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getBrowserTimezone} from 'utils/timezone.jsx';\n\nimport * as I18n from 'i18n/i18n.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ThemeSetting from 'components/user_settings/display/user_settings_theme';\nimport BackIcon from 'components/widgets/icons/fa_back_icon';\n\nimport ManageTimezones from './manage_timezones';\nimport ManageLanguages from './manage_languages';\n\nconst Preferences = Constants.Preferences;\n\nfunction getDisplayStateFromProps(props) {\n    return {\n        militaryTime: props.militaryTime,\n        teammateNameDisplay: props.teammateNameDisplay,\n        channelDisplayMode: props.channelDisplayMode,\n        messageDisplay: props.messageDisplay,\n        collapseDisplay: props.collapseDisplay,\n        linkPreviewDisplay: props.linkPreviewDisplay,\n    };\n}\n\nexport default class UserSettingsDisplay extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        timezones: PropTypes.array.isRequired,\n        userTimezone: PropTypes.object.isRequired,\n        allowCustomThemes: PropTypes.bool,\n        enableLinkPreviews: PropTypes.bool,\n        defaultClientLocale: PropTypes.string,\n        enableThemeSelection: PropTypes.bool,\n        configTeammateNameDisplay: PropTypes.string,\n        currentUserTimezone: PropTypes.string,\n        enableTimezone: PropTypes.bool,\n        shouldAutoUpdateTimezone: PropTypes.bool,\n        militaryTime: PropTypes.string,\n        teammateNameDisplay: PropTypes.string,\n        channelDisplayMode: PropTypes.string,\n        messageDisplay: PropTypes.string,\n        collapseDisplay: PropTypes.string,\n        linkPreviewDisplay: PropTypes.string,\n        lockTeammateNameDisplay: PropTypes.bool,\n        actions: PropTypes.shape({\n            getSupportedTimezones: PropTypes.func.isRequired,\n            autoUpdateTimezone: PropTypes.func.isRequired,\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            ...getDisplayStateFromProps(props),\n            isSaving: false,\n        };\n\n        if (props.timezones.length === 0) {\n            props.actions.getSupportedTimezones();\n        }\n\n        this.prevSections = {\n            theme: 'dummySectionName', // dummy value that should never match any section name\n            clock: 'theme',\n            linkpreview: 'clock',\n            message_display: 'linkpreview',\n            channel_display_mode: 'message_display',\n            languages: 'channel_display_mode',\n        };\n    }\n\n    componentDidMount() {\n        const {actions, enableTimezone, shouldAutoUpdateTimezone} = this.props;\n\n        if (enableTimezone && shouldAutoUpdateTimezone) {\n            actions.autoUpdateTimezone(getBrowserTimezone());\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.teammateNameDisplay !== prevProps.teammateNameDisplay) {\n            this.updateState();\n        }\n    }\n\n    handleSubmit = async () => {\n        const userId = this.props.user.id;\n\n        const timePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.USE_MILITARY_TIME,\n            value: this.state.militaryTime,\n        };\n        const teammateNameDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.NAME_NAME_FORMAT,\n            value: this.state.teammateNameDisplay,\n        };\n        const channelDisplayModePreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.CHANNEL_DISPLAY_MODE,\n            value: this.state.channelDisplayMode,\n        };\n        const messageDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.MESSAGE_DISPLAY,\n            value: this.state.messageDisplay,\n        };\n        const collapseDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.COLLAPSE_DISPLAY,\n            value: this.state.collapseDisplay,\n        };\n        const linkPreviewDisplayPreference = {\n            user_id: userId,\n            category: Preferences.CATEGORY_DISPLAY_SETTINGS,\n            name: Preferences.LINK_PREVIEW_DISPLAY,\n            value: this.state.linkPreviewDisplay,\n        };\n\n        this.setState({isSaving: true});\n\n        const preferences = [\n            timePreference,\n            channelDisplayModePreference,\n            messageDisplayPreference,\n            collapseDisplayPreference,\n            linkPreviewDisplayPreference,\n            teammateNameDisplayPreference,\n        ];\n\n        await this.props.actions.savePreferences(userId, preferences);\n\n        this.updateSection('');\n    }\n\n    handleClockRadio = (militaryTime) => {\n        this.setState({militaryTime});\n    }\n\n    handleTeammateNameDisplayRadio = (teammateNameDisplay) => {\n        this.setState({teammateNameDisplay});\n    }\n\n    handleChannelDisplayModeRadio(channelDisplayMode) {\n        this.setState({channelDisplayMode});\n    }\n\n    handlemessageDisplayRadio(messageDisplay) {\n        this.setState({messageDisplay});\n    }\n\n    handleCollapseRadio(collapseDisplay) {\n        this.setState({collapseDisplay});\n    }\n\n    handleLinkPreviewRadio(linkPreviewDisplay) {\n        this.setState({linkPreviewDisplay});\n    }\n\n    handleOnChange(display) {\n        this.setState({...display});\n    }\n\n    updateSection = (section) => {\n        this.updateState();\n        this.props.updateSection(section);\n    }\n\n    updateState = () => {\n        const newState = getDisplayStateFromProps(this.props);\n        if (!Utils.areObjectsEqual(newState, this.state)) {\n            this.setState(newState);\n        }\n\n        this.setState({isSaving: false});\n    }\n\n    createSection(props) {\n        const {\n            section,\n            display,\n            value,\n            title,\n            firstOption,\n            secondOption,\n            thirdOption,\n            description,\n            disabled,\n        } = props;\n        let extraInfo = null;\n        let submit = this.handleSubmit;\n\n        const firstMessage = (\n            <FormattedMessage\n                id={firstOption.radionButtonText.id}\n                defaultMessage={firstOption.radionButtonText.message}\n            />\n        );\n\n        let moreColon;\n        let firstMessageMore;\n        if (firstOption.radionButtonText.moreId) {\n            moreColon = ': ';\n            firstMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={firstOption.radionButtonText.moreId}\n                        defaultMessage={firstOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        const secondMessage = (\n            <FormattedMessage\n                id={secondOption.radionButtonText.id}\n                defaultMessage={secondOption.radionButtonText.message}\n            />\n        );\n\n        let secondMessageMore;\n        if (secondOption.radionButtonText.moreId) {\n            secondMessageMore = (\n                <span className='font-weight--normal'>\n                    <FormattedMessage\n                        id={secondOption.radionButtonText.moreId}\n                        defaultMessage={secondOption.radionButtonText.moreMessage}\n                    />\n                </span>\n            );\n        }\n\n        let thirdMessage;\n        if (thirdOption) {\n            thirdMessage = (\n                <FormattedMessage\n                    id={thirdOption.radionButtonText.id}\n                    defaultMessage={thirdOption.radionButtonText.message}\n                />\n            );\n        }\n\n        const messageTitle = (\n            <FormattedMessage\n                id={title.id}\n                defaultMessage={title.message}\n            />\n        );\n\n        const messageDesc = (\n            <FormattedMessage\n                id={description.id}\n                defaultMessage={description.message}\n            />\n        );\n\n        if (this.props.activeSection === section) {\n            const format = [false, false, false];\n            if (value === firstOption.value) {\n                format[0] = true;\n            } else if (value === secondOption.value) {\n                format[1] = true;\n            } else {\n                format[2] = true;\n            }\n\n            const name = section + 'Format';\n            const key = section + 'UserDisplay';\n\n            const firstDisplay = {};\n            firstDisplay[display] = firstOption.value;\n\n            const secondDisplay = {};\n            secondDisplay[display] = secondOption.value;\n\n            const thirdDisplay = {};\n            if (thirdOption) {\n                thirdDisplay[display] = thirdOption.value;\n            }\n\n            let thirdSection;\n            if (thirdMessage) {\n                thirdSection = (\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'C'}\n                                type='radio'\n                                name={name}\n                                checked={format[2]}\n                                onChange={() => this.handleOnChange(thirdDisplay)}\n                            />\n                            {thirdMessage}\n                        </label>\n                        <br/>\n                    </div>\n                );\n            }\n\n            let inputs = [\n                <fieldset key={key}>\n                    <legend className='form-legend hidden-label'>\n                        {messageTitle}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'A'}\n                                type='radio'\n                                name={name}\n                                checked={format[0]}\n                                onChange={() => this.handleOnChange(firstDisplay)}\n                            />\n                            {firstMessage}\n                            {moreColon}\n                            {firstMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id={name + 'B'}\n                                type='radio'\n                                name={name}\n                                checked={format[1]}\n                                onChange={() => this.handleOnChange(secondDisplay)}\n                            />\n                            {secondMessage}\n                            {moreColon}\n                            {secondMessageMore}\n                        </label>\n                        <br/>\n                    </div>\n                    {thirdSection}\n                    <div>\n                        <br/>\n                        {messageDesc}\n                    </div>\n                </fieldset>,\n            ];\n\n            if (display === 'teammateNameDisplay' && disabled) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.display.teammateNameDisplay'\n                            defaultMessage='This field is handled through your System Administrator. If you want to change it, you need to do so through your System Administrator.'\n                        />\n                    </span>\n                );\n                submit = null;\n                inputs = [];\n            }\n            return (\n                <div>\n                    <SettingItemMax\n                        title={messageTitle}\n                        inputs={inputs}\n                        submit={submit}\n                        saving={this.state.isSaving}\n                        server_error={this.state.serverError}\n                        updateSection={this.updateSection}\n                        extraInfo={extraInfo}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        let describe;\n        if (value === firstOption.value) {\n            describe = firstMessage;\n        } else if (value === secondOption.value) {\n            describe = secondMessage;\n        } else {\n            describe = thirdMessage;\n        }\n\n        return (\n            <div>\n                <SettingItemMin\n                    title={messageTitle}\n                    describe={describe}\n                    section={section}\n                    updateSection={this.updateSection}\n                />\n                <div className='divider-dark'/>\n            </div>\n        );\n    }\n\n    render() {\n        const collapseSection = this.createSection({\n            section: 'collapse',\n            display: 'collapseDisplay',\n            value: this.state.collapseDisplay,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.collapseDisplay'),\n                message: 'Default appearance of image previews',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOn'),\n                    message: 'On',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.collapseOff'),\n                    message: 'Off',\n                },\n            },\n            description: {\n                id: t('user.settings.display.collapseDesc'),\n                message: 'Set whether previews of image links and image attachment thumbnails show as expanded or collapsed by default. This setting can also be controlled using the slash commands /expand and /collapse.',\n            },\n        });\n\n        let linkPreviewSection = null;\n\n        if (this.props.enableLinkPreviews) {\n            linkPreviewSection = this.createSection({\n                section: 'linkpreview',\n                display: 'linkPreviewDisplay',\n                value: this.state.linkPreviewDisplay,\n                defaultDisplay: 'true',\n                title: {\n                    id: t('user.settings.display.linkPreviewDisplay'),\n                    message: 'Website Link Previews',\n                },\n                firstOption: {\n                    value: 'true',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOn'),\n                        message: 'On',\n                    },\n                },\n                secondOption: {\n                    value: 'false',\n                    radionButtonText: {\n                        id: t('user.settings.display.linkPreviewOff'),\n                        message: 'Off',\n                    },\n                },\n                description: {\n                    id: t('user.settings.display.linkPreviewDesc'),\n                    message: 'When available, the first web link in a message will show a preview of the website content below the message.',\n                },\n            });\n            this.prevSections.message_display = 'linkpreview';\n        } else {\n            this.prevSections.message_display = this.prevSections.linkpreview;\n        }\n\n        const clockSection = this.createSection({\n            section: 'clock',\n            display: 'militaryTime',\n            value: this.state.militaryTime,\n            defaultDisplay: 'false',\n            title: {\n                id: t('user.settings.display.clockDisplay'),\n                message: 'Clock Display',\n            },\n            firstOption: {\n                value: 'false',\n                radionButtonText: {\n                    id: t('user.settings.display.normalClock'),\n                    message: '12-hour clock (example: 4:00 PM)',\n                },\n            },\n            secondOption: {\n                value: 'true',\n                radionButtonText: {\n                    id: t('user.settings.display.militaryClock'),\n                    message: '24-hour clock (example: 16:00)',\n                },\n            },\n            description: {\n                id: t('user.settings.display.preferTime'),\n                message: 'Select how you prefer time displayed.',\n            },\n        });\n\n        const teammateNameDisplaySection = this.createSection({\n            section: Preferences.NAME_NAME_FORMAT,\n            display: 'teammateNameDisplay',\n            value: this.props.lockTeammateNameDisplay ? this.props.configTeammateNameDisplay : this.state.teammateNameDisplay,\n            defaultDisplay: this.props.configTeammateNameDisplay,\n            title: {\n                id: t('user.settings.display.teammateNameDisplayTitle'),\n                message: 'Teammate Name Display',\n            },\n            firstOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayUsername'),\n                    message: 'Show username',\n                },\n            },\n            secondOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayNicknameFullname'),\n                    message: 'Show nickname if one exists, otherwise show first and last name',\n                },\n            },\n            thirdOption: {\n                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                radionButtonText: {\n                    id: t('user.settings.display.teammateNameDisplayFullname'),\n                    message: 'Show first and last name',\n                },\n            },\n            description: {\n                id: t('user.settings.display.teammateNameDisplayDescription'),\n                message: 'Set how to display other user\\'s names in posts and the Direct Messages list.',\n            },\n            disabled: this.props.lockTeammateNameDisplay\n        });\n\n        let timezoneSelection;\n        if (this.props.enableTimezone && !this.props.shouldAutoUpdateTimezone) {\n            const userTimezone = this.props.userTimezone;\n            if (this.props.activeSection === 'timezone') {\n                timezoneSelection = (\n                    <div>\n                        <ManageTimezones\n                            user={this.props.user}\n                            timezones={this.props.timezones}\n                            useAutomaticTimezone={userTimezone.useAutomaticTimezone}\n                            automaticTimezone={userTimezone.automaticTimezone}\n                            manualTimezone={userTimezone.manualTimezone}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                timezoneSelection = (\n                    <div>\n                        <SettingItemMin\n                            title={\n                                <FormattedMessage\n                                    id='user.settings.display.timezone'\n                                    defaultMessage='Timezone'\n                                />\n                            }\n                            width='medium'\n                            describe={getTimezoneRegion(this.props.currentUserTimezone)}\n                            section={'timezone'}\n                            updateSection={this.updateSection}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            }\n        }\n\n        const messageDisplaySection = this.createSection({\n            section: Preferences.MESSAGE_DISPLAY,\n            display: 'messageDisplay',\n            value: this.state.messageDisplay,\n            defaultDisplay: Preferences.MESSAGE_DISPLAY_CLEAN,\n            title: {\n                id: t('user.settings.display.messageDisplayTitle'),\n                message: 'Message Display',\n            },\n            firstOption: {\n                value: Preferences.MESSAGE_DISPLAY_CLEAN,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayClean'),\n                    message: 'Standard',\n                    moreId: t('user.settings.display.messageDisplayCleanDes'),\n                    moreMessage: 'Easy to scan and read.',\n                },\n            },\n            secondOption: {\n                value: Preferences.MESSAGE_DISPLAY_COMPACT,\n                radionButtonText: {\n                    id: t('user.settings.display.messageDisplayCompact'),\n                    message: 'Compact',\n                    moreId: t('user.settings.display.messageDisplayCompactDes'),\n                    moreMessage: 'Fit as many messages on the screen as we can.',\n                },\n            },\n            description: {\n                id: t('user.settings.display.messageDisplayDescription'),\n                message: 'Select how messages in a channel should be displayed.',\n            },\n        });\n\n        const channelDisplayModeSection = this.createSection({\n            section: Preferences.CHANNEL_DISPLAY_MODE,\n            display: 'channelDisplayMode',\n            value: this.state.channelDisplayMode,\n            defaultDisplay: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n            title: {\n                id: t('user.settings.display.channelDisplayTitle'),\n                message: 'Channel Display',\n            },\n            firstOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_FULL_SCREEN,\n                radionButtonText: {\n                    id: t('user.settings.display.fullScreen'),\n                    message: 'Full width',\n                },\n            },\n            secondOption: {\n                value: Preferences.CHANNEL_DISPLAY_MODE_CENTERED,\n                radionButtonText: {\n                    id: t('user.settings.display.fixedWidthCentered'),\n                    message: 'Fixed width, centered',\n                },\n            },\n            description: {\n                id: t('user.settings.display.channeldisplaymode'),\n                message: 'Select the width of the center channel.',\n            },\n        });\n\n        let languagesSection;\n        let userLocale = this.props.user.locale;\n        if (this.props.activeSection === 'languages') {\n            if (!I18n.isLanguageAvailable(userLocale)) {\n                userLocale = this.props.defaultClientLocale;\n            }\n            languagesSection = (\n                <div>\n                    <ManageLanguages\n                        user={this.props.user}\n                        locale={userLocale}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        } else {\n            let locale;\n            if (I18n.isLanguageAvailable(userLocale)) {\n                locale = I18n.getLanguageInfo(userLocale).name;\n            } else {\n                locale = I18n.getLanguageInfo(this.props.defaultClientLocale).name;\n            }\n\n            languagesSection = (\n                <div>\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.display.language'\n                                defaultMessage='Language'\n                            />\n                        }\n                        width='medium'\n                        describe={locale}\n                        section={'languages'}\n                        updateSection={this.updateSection}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        if (Object.keys(I18n.getLanguages()).length === 1) {\n            languagesSection = null;\n        }\n\n        let themeSection;\n        if (this.props.enableThemeSelection) {\n            themeSection = (\n                <div>\n                    <ThemeSetting\n                        selected={this.props.activeSection === 'theme'}\n                        updateSection={this.updateSection}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        allowCustomThemes={this.props.allowCustomThemes}\n                    />\n                    <div className='divider-dark'/>\n                </div>\n            );\n        }\n\n        return (\n            <div id='displaySettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <span onClick={this.props.collapseModal}>\n                                <BackIcon/>\n                            </span>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='displaySettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.display.title'\n                            defaultMessage='Display Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {themeSection}\n                    {clockSection}\n                    {teammateNameDisplaySection}\n                    {timezoneSelection}\n                    {linkPreviewSection}\n                    {collapseSection}\n                    {messageDisplaySection}\n                    {channelDisplayModeSection}\n                    {languagesSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {getSupportedTimezones} from 'mattermost-redux/actions/general';\nimport {autoUpdateTimezone} from 'mattermost-redux/actions/timezone';\nimport {getConfig, getSupportedTimezones as getTimezones, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {get} from 'mattermost-redux/selectors/entities/preferences';\nimport {getUserTimezone} from 'mattermost-redux/selectors/entities/timezone';\nimport {getUserCurrentTimezone} from 'mattermost-redux/utils/timezone_utils';\n\nimport {Preferences} from 'utils/constants';\n\nimport UserSettingsDisplay from './user_settings_display.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const timezones = getTimezones(state);\n    const currentUserId = getCurrentUserId(state);\n    const userTimezone = getUserTimezone(state, currentUserId);\n    const automaticTimezoneNotSet = userTimezone && userTimezone.useAutomaticTimezone && !userTimezone.automaticTimezone;\n    const shouldAutoUpdateTimezone = !userTimezone || automaticTimezoneNotSet;\n\n    const allowCustomThemes = config.AllowCustomThemes === 'true';\n    const enableLinkPreviews = config.EnableLinkPreviews === 'true';\n    const defaultClientLocale = config.DefaultClientLocale;\n    const enableThemeSelection = config.EnableThemeSelection === 'true';\n    const enableTimezone = config.ExperimentalTimezone === 'true';\n    const lockTeammateNameDisplay = getLicense(state).LockTeammateNameDisplay === 'true' && config.LockTeammateNameDisplay === 'true';\n    const configTeammateNameDisplay = config.TeammateNameDisplay;\n\n    return {\n        lockTeammateNameDisplay,\n        allowCustomThemes,\n        configTeammateNameDisplay,\n        enableLinkPreviews,\n        defaultClientLocale,\n        enableThemeSelection,\n        enableTimezone,\n        timezones,\n        userTimezone,\n        shouldAutoUpdateTimezone,\n        currentUserTimezone: getUserCurrentTimezone(userTimezone),\n        militaryTime: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, Preferences.USE_MILITARY_TIME_DEFAULT),\n        teammateNameDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.NAME_NAME_FORMAT, configTeammateNameDisplay),\n        channelDisplayMode: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.CHANNEL_DISPLAY_MODE, Preferences.CHANNEL_DISPLAY_MODE_DEFAULT),\n        messageDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.MESSAGE_DISPLAY, Preferences.MESSAGE_DISPLAY_DEFAULT),\n        collapseDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.COLLAPSE_DISPLAY, Preferences.COLLAPSE_DISPLAY_DEFAULT),\n        linkPreviewDisplay: get(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.LINK_PREVIEW_DISPLAY, Preferences.LINK_PREVIEW_DISPLAY_DEFAULT),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSupportedTimezones,\n            autoUpdateTimezone,\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsDisplay);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, injectIntl} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SettingPicture from 'components/setting_picture.jsx';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport {AnnouncementBarMessages, AnnouncementBarTypes, AcceptedProfileImageTypes, Constants} from 'utils/constants';\n\nconst holders = defineMessages({\n    usernameReserved: {\n        id: t('user.settings.general.usernameReserved'),\n        defaultMessage: 'This username is reserved, please choose a new one.',\n    },\n    usernameRestrictions: {\n        id: t('user.settings.general.usernameRestrictions'),\n        defaultMessage: \"Username must begin with a letter, and contain between {min} to {max} lowercase characters made up of numbers, letters, and the symbols '.', '-', and '_'.\",\n    },\n    validEmail: {\n        id: t('user.settings.general.validEmail'),\n        defaultMessage: 'Please enter a valid email address.',\n    },\n    emailMatch: {\n        id: t('user.settings.general.emailMatch'),\n        defaultMessage: 'The new emails you entered do not match.',\n    },\n    incorrectPassword: {\n        id: t('user.settings.general.incorrectPassword'),\n        defaultMessage: 'Your password is incorrect.',\n    },\n    emptyPassword: {\n        id: t('user.settings.general.emptyPassword'),\n        defaultMessage: 'Please enter your current password.',\n    },\n    validImage: {\n        id: t('user.settings.general.validImage'),\n        defaultMessage: 'Only BMP, JPG or PNG images may be used for profile pictures',\n    },\n    imageTooLarge: {\n        id: t('user.settings.general.imageTooLarge'),\n        defaultMessage: 'Unable to upload profile image. File is too large.',\n    },\n    uploadImage: {\n        id: t('user.settings.general.uploadImage'),\n        defaultMessage: \"Click 'Edit' to upload an image.\",\n    },\n    uploadImageMobile: {\n        id: t('user.settings.general.mobile.uploadImage'),\n        defaultMessage: 'Click to upload an image',\n    },\n    fullName: {\n        id: t('user.settings.general.fullName'),\n        defaultMessage: 'Full Name',\n    },\n    nickname: {\n        id: t('user.settings.general.nickname'),\n        defaultMessage: 'Nickname',\n    },\n    username: {\n        id: t('user.settings.general.username'),\n        defaultMessage: 'Username',\n    },\n    profilePicture: {\n        id: t('user.settings.general.profilePicture'),\n        defaultMessage: 'Profile Picture',\n    },\n    close: {\n        id: t('user.settings.general.close'),\n        defaultMessage: 'Close',\n    },\n    position: {\n        id: t('user.settings.general.position'),\n        defaultMessage: 'Position',\n    },\n});\n\nclass UserSettingsGeneralTab extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        user: PropTypes.object.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        updateTab: PropTypes.func.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            logError: PropTypes.func.isRequired,\n            clearErrors: PropTypes.func.isRequired,\n            getMe: PropTypes.func.isRequired,\n            updateMe: PropTypes.func.isRequired,\n            sendVerificationEmail: PropTypes.func.isRequired,\n            setDefaultProfileImage: PropTypes.func.isRequired,\n            uploadProfileImage: PropTypes.func.isRequired,\n        }).isRequired,\n        requireEmailVerification: PropTypes.bool,\n        maxFileSize: PropTypes.number,\n        ldapFirstNameAttributeSet: PropTypes.bool,\n        ldapLastNameAttributeSet: PropTypes.bool,\n        samlFirstNameAttributeSet: PropTypes.bool,\n        samlLastNameAttributeSet: PropTypes.bool,\n        ldapNicknameAttributeSet: PropTypes.bool,\n        samlNicknameAttributeSet: PropTypes.bool,\n        ldapPositionAttributeSet: PropTypes.bool,\n        samlPositionAttributeSet: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.submitActive = false;\n\n        this.state = this.setupInitialState(props);\n    }\n\n    handleEmailResend = (email) => {\n        this.setState({resendStatus: 'sending', showSpinner: true});\n        this.props.actions.sendVerificationEmail(email).then(({data, error: err}) => {\n            if (data) {\n                this.setState({resendStatus: 'success'});\n            } else if (err) {\n                this.setState({resendStatus: 'failure'});\n            }\n        });\n    }\n\n    createEmailResendLink = (email) => {\n        return (\n            <span className='resend-verification-wrapper'>\n                <LoadingWrapper\n                    loading={this.state.showSpinner}\n                    text={Utils.localizeMessage('user.settings.general.sending', 'Sending')}\n                >\n                    <a\n                        onClick={() => {\n                            this.handleEmailResend(email);\n                            setTimeout(() => {\n                                this.setState({\n                                    showSpinner: false,\n                                });\n                            }, 500);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.sendAgain'\n                            defaultMessage='Send again'\n                        />\n                    </a>\n                </LoadingWrapper>\n            </span>\n        );\n    }\n\n    submitUsername = () => {\n        const user = Object.assign({}, this.props.user);\n        const username = this.state.username.trim().toLowerCase();\n\n        const {formatMessage} = this.props.intl;\n        const usernameError = Utils.isValidUsername(username);\n        if (usernameError === 'Cannot use a reserved word as a username.') {\n            this.setState({clientError: formatMessage(holders.usernameReserved), serverError: ''});\n            return;\n        } else if (usernameError) {\n            this.setState({clientError: formatMessage(holders.usernameRestrictions, {min: Constants.MIN_USERNAME_LENGTH, max: Constants.MAX_USERNAME_LENGTH}), serverError: ''});\n            return;\n        }\n\n        if (user.username === username) {\n            this.updateSection('');\n            return;\n        }\n\n        user.username = username;\n\n        trackEvent('settings', 'user_settings_update', {field: 'username'});\n\n        this.submitUser(user, false);\n    }\n\n    submitNickname = () => {\n        const user = Object.assign({}, this.props.user);\n        const nickname = this.state.nickname.trim();\n\n        if (user.nickname === nickname) {\n            this.updateSection('');\n            return;\n        }\n\n        user.nickname = nickname;\n\n        trackEvent('settings', 'user_settings_update', {field: 'nickname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitName = () => {\n        const user = Object.assign({}, this.props.user);\n        const firstName = this.state.firstName.trim();\n        const lastName = this.state.lastName.trim();\n\n        if (user.first_name === firstName && user.last_name === lastName) {\n            this.updateSection('');\n            return;\n        }\n\n        user.first_name = firstName;\n        user.last_name = lastName;\n\n        trackEvent('settings', 'user_settings_update', {field: 'fullname'});\n\n        this.submitUser(user, false);\n    }\n\n    submitEmail = () => {\n        const user = Object.assign({}, this.props.user);\n        const email = this.state.email.trim().toLowerCase();\n        const confirmEmail = this.state.confirmEmail.trim().toLowerCase();\n        const currentPassword = this.state.currentPassword;\n\n        const {formatMessage} = this.props.intl;\n\n        if (email === user.email && (confirmEmail === '' || confirmEmail === user.email)) {\n            this.updateSection('');\n            return;\n        }\n\n        if (email === '' || !isEmail(email)) {\n            this.setState({emailError: formatMessage(holders.validEmail), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (email !== confirmEmail) {\n            this.setState({emailError: formatMessage(holders.emailMatch), clientError: '', serverError: ''});\n            return;\n        }\n\n        if (currentPassword === '') {\n            this.setState({emailError: formatMessage(holders.emptyPassword), clientError: '', serverError: ''});\n            return;\n        }\n\n        user.email = email;\n        user.password = currentPassword;\n        trackEvent('settings', 'user_settings_update', {field: 'email'});\n        this.submitUser(user, true);\n    }\n\n    submitUser = (user, emailUpdated) => {\n        const {formatMessage} = this.props.intl;\n        this.setState({sectionIsSaving: true});\n\n        this.props.actions.updateMe(user).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.props.actions.getMe();\n                    const verificationEnabled = this.props.requireEmailVerification && emailUpdated;\n                    if (verificationEnabled) {\n                        this.props.actions.clearErrors();\n                        this.props.actions.logError({\n                            message: AnnouncementBarMessages.EMAIL_VERIFICATION_REQUIRED,\n                            type: AnnouncementBarTypes.SUCCESS,\n                        }, true);\n                    }\n                } else if (err) {\n                    let serverError;\n                    if (err.server_error_id &&\n                        err.server_error_id === 'api.user.check_user_password.invalid.app_error') {\n                        serverError = formatMessage(holders.incorrectPassword);\n                    } else if (err.message) {\n                        serverError = err.message;\n                    } else {\n                        serverError = err;\n                    }\n                    this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n                }\n            });\n    }\n\n    setDefaultProfilePicture = async () => {\n        try {\n            await this.props.actions.setDefaultProfileImage(this.props.user.id);\n            this.updateSection('');\n            this.submitActive = false;\n        } catch (err) {\n            let serverError;\n            if (err.message) {\n                serverError = err.message;\n            } else {\n                serverError = err;\n            }\n            this.setState({serverError, emailError: '', clientError: '', sectionIsSaving: false});\n        }\n    }\n\n    submitPicture = () => {\n        if (!this.state.pictureFile) {\n            return;\n        }\n\n        if (!this.submitActive) {\n            return;\n        }\n\n        trackEvent('settings', 'user_settings_update', {field: 'picture'});\n\n        const {formatMessage} = this.props.intl;\n        const file = this.state.pictureFile;\n\n        if (!AcceptedProfileImageTypes.includes(file.type)) {\n            this.setState({clientError: formatMessage(holders.validImage), serverError: ''});\n            return;\n        } else if (file.size > this.props.maxFileSize) {\n            this.setState({clientError: formatMessage(holders.imageTooLarge), serverError: ''});\n            return;\n        }\n\n        this.setState({loadingPicture: true});\n\n        this.props.actions.uploadProfileImage(this.props.user.id, file).\n            then(({data, error: err}) => {\n                if (data) {\n                    this.updateSection('');\n                    this.submitActive = false;\n                } else if (err) {\n                    var state = this.setupInitialState(this.props);\n                    state.serverError = err.message;\n                    this.setState(state);\n                }\n            });\n    }\n\n    submitPosition = () => {\n        const user = Object.assign({}, this.props.user);\n        const position = this.state.position.trim();\n\n        if (user.position === position) {\n            this.updateSection('');\n            return;\n        }\n\n        user.position = position;\n\n        trackEvent('settings', 'user_settings_update', {field: 'position'});\n\n        this.submitUser(user, false);\n    }\n\n    updateUsername = (e) => {\n        this.setState({username: e.target.value});\n    }\n\n    updateFirstName = (e) => {\n        this.setState({firstName: e.target.value});\n    }\n\n    updateLastName = (e) => {\n        this.setState({lastName: e.target.value});\n    }\n\n    updateNickname = (e) => {\n        this.setState({nickname: e.target.value});\n    }\n\n    updatePosition = (e) => {\n        this.setState({position: e.target.value});\n    }\n\n    updateEmail = (e) => {\n        this.setState({email: e.target.value});\n    }\n\n    updateConfirmEmail = (e) => {\n        this.setState({confirmEmail: e.target.value});\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updatePicture = (e) => {\n        if (e.target.files && e.target.files[0]) {\n            this.setState({pictureFile: e.target.files[0]});\n\n            this.submitActive = true;\n            this.setState({clientError: null});\n        } else {\n            this.setState({pictureFile: null});\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(Object.assign({}, this.setupInitialState(this.props), {clientError: '', serverError: '', emailError: '', sectionIsSaving: false}));\n        this.submitActive = false;\n        this.props.updateSection(section);\n    }\n\n    setupInitialState(props) {\n        const user = props.user;\n\n        return {\n            username: user.username,\n            firstName: user.first_name,\n            lastName: user.last_name,\n            nickname: user.nickname,\n            position: user.position,\n            originalEmail: user.email,\n            email: '',\n            confirmEmail: '',\n            currentPassword: '',\n            pictureFile: null,\n            loadingPicture: false,\n            sectionIsSaving: false,\n            showSpinner: false,\n        };\n    }\n\n    createEmailSection() {\n        const {formatMessage} = this.props.intl;\n\n        let emailSection;\n        if (this.props.activeSection === 'email') {\n            const emailVerificationEnabled = this.props.requireEmailVerification;\n            const inputs = [];\n\n            let helpText = (\n                <FormattedMessage\n                    id='user.settings.general.emailHelp1'\n                    defaultMessage='Email is used for sign-in, notifications, and password reset. Email requires verification if changed.'\n                />\n            );\n\n            if (!emailVerificationEnabled) {\n                helpText = (\n                    <FormattedMessage\n                        id='user.settings.general.emailHelp3'\n                        defaultMessage='Email is used for sign-in, notifications, and password reset.'\n                    />\n                );\n            }\n\n            let submit = null;\n\n            if (this.props.user.auth_service === '') {\n                inputs.push(\n                    <div key='currentEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentEmail'\n                                    defaultMessage='Current Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <label className='control-label word-break--all text-left'>{this.state.originalEmail}</label>\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='emailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.newEmail'\n                                    defaultMessage='New Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    autoFocus={true}\n                                    id='primaryEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.email}\n                                    aria-label={formatMessage({id: 'user.settings.general.newEmail', defaultMessage: 'New Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='confirmEmailSetting'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.confirmEmail'\n                                    defaultMessage='Confirm Email'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='confirmEmail'\n                                    className='form-control'\n                                    type='email'\n                                    onChange={this.updateConfirmEmail}\n                                    maxLength={Constants.MAX_EMAIL_LENGTH}\n                                    value={this.state.confirmEmail}\n                                    aria-label={formatMessage({id: 'user.settings.general.confirmEmail', defaultMessage: 'Confirm Email'})}\n                                />\n                            </div>\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div key='currentPassword'>\n                        <div className='form-group'>\n                            <label className='col-sm-5 control-label'>\n                                <FormattedMessage\n                                    id='user.settings.general.currentPassword'\n                                    defaultMessage='Current Password'\n                                />\n                            </label>\n                            <div className='col-sm-7'>\n                                <input\n                                    id='currentPassword'\n                                    className='form-control'\n                                    type='password'\n                                    onChange={this.updateCurrentPassword}\n                                    value={this.state.currentPassword}\n                                    aria-label={formatMessage({id: 'user.settings.general.currentPassword', defaultMessage: 'Current Password'})}\n                                />\n                            </div>\n                        </div>\n                        {helpText}\n                    </div>\n                );\n\n                submit = this.submitEmail;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-bottom'\n                    >\n                        <div className='setting-list__hint padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.general.emailSamlCantUpdate'\n                                defaultMessage='Login occurs through SAML. Email cannot be updated. Email address used for notifications is {email}.'\n                                values={{\n                                    email: this.state.originalEmail,\n                                }}\n                            />\n                        </div>\n                        {helpText}\n                    </div>\n                );\n            }\n\n            emailSection = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={this.state.serverError}\n                    clientError={this.state.emailError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.props.user.auth_service === '') {\n                describe = this.props.user.email;\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGitlab'\n                        defaultMessage='Login done through GitLab ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginGoogle'\n                        defaultMessage='Login done through Google Apps ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginOffice365'\n                        defaultMessage='Login done through Office 365 ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginLdap'\n                        defaultMessage='Login done through AD/LDAP ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.loginSaml'\n                        defaultMessage='Login done through SAML ({email})'\n                        values={{\n                            email: this.state.originalEmail,\n                        }}\n                    />\n                );\n            }\n\n            emailSection = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.general.email'\n                            defaultMessage='Email'\n                        />\n                    }\n                    describe={describe}\n                    section={'email'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return emailSection;\n    }\n\n    render() {\n        const user = this.props.user;\n        const {formatMessage} = this.props.intl;\n\n        let clientError = null;\n        if (this.state.clientError) {\n            clientError = this.state.clientError;\n        }\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = this.state.serverError;\n        }\n\n        let nameSection;\n        const inputs = [];\n\n        if (this.props.activeSection === 'name') {\n            let extraInfo;\n            let submit = null;\n            if (\n                (this.props.user.auth_service === 'ldap' &&\n                    (this.props.ldapFirstNameAttributeSet || this.props.ldapLastNameAttributeSet)) ||\n                (this.props.user.auth_service === Constants.SAML_SERVICE &&\n                    (this.props.samlFirstNameAttributeSet || this.props.samlLastNameAttributeSet))\n            ) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                inputs.push(\n                    <div\n                        key='firstNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.firstName'\n                                defaultMessage='First Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='firstName'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateFirstName}\n                                maxLength={Constants.MAX_FIRSTNAME_LENGTH}\n                                value={this.state.firstName}\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.firstName', defaultMessage: 'First Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                inputs.push(\n                    <div\n                        key='lastNameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.general.lastName'\n                                defaultMessage='Last Name'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='lastName'\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateLastName}\n                                maxLength={Constants.MAX_LASTNAME_LENGTH}\n                                value={this.state.lastName}\n                                aria-label={formatMessage({id: 'user.settings.general.lastName', defaultMessage: 'Last Name'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                function notifClick(e) {\n                    e.preventDefault();\n                    this.updateSection('');\n                    this.props.updateTab('notifications');\n                }\n\n                const notifLink = (\n                    <a\n                        href='#'\n                        onClick={notifClick.bind(this)}\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.notificationsLink'\n                            defaultMessage='Notifications'\n                        />\n                    </a>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.notificationsExtra'\n                            defaultMessage='By default, you will receive mention notifications when someone types your first name. Go to {notify} settings to change this default.'\n                            values={{\n                                notify: (notifLink),\n                            }}\n                        />\n                    </span>\n                );\n\n                submit = this.submitName;\n            }\n\n            nameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.fullName)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n\n            if (user.first_name && user.last_name) {\n                describe = user.first_name + ' ' + user.last_name;\n            } else if (user.first_name) {\n                describe = user.first_name;\n            } else if (user.last_name) {\n                describe = user.last_name;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyName'\n                        defaultMessage=\"Click 'Edit' to add your full name\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyName'\n                            defaultMessage='Click to add your full name'\n                        />\n                    );\n                }\n            }\n\n            nameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.fullName)}\n                    describe={describe}\n                    section={'name'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let nicknameSection;\n        if (this.props.activeSection === 'nickname') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === 'ldap' && this.props.ldapNicknameAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlNicknameAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let nicknameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.nickname'\n                        defaultMessage='Nickname'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    nicknameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='nicknameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{nicknameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='nickname'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateNickname}\n                                value={this.state.nickname}\n                                maxLength={Constants.MAX_NICKNAME_LENGTH}\n                                autoCapitalize='off'\n                                aria-label={formatMessage({id: 'user.settings.general.nickname', defaultMessage: 'Nickname'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.nicknameExtra'\n                            defaultMessage='Use Nickname for a name you might be called that is different from your first name and username. This is most often used when two or more people have similar sounding names and usernames.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitNickname;\n            }\n\n            nicknameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.nickname)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.nickname) {\n                describe = user.nickname;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyNickname'\n                        defaultMessage=\"Click 'Edit' to add a nickname\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyNickname'\n                            defaultMessage='Click to add a nickname'\n                        />\n                    );\n                }\n            }\n\n            nicknameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.nickname)}\n                    describe={describe}\n                    section={'nickname'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let usernameSection;\n        if (this.props.activeSection === 'username') {\n            let extraInfo;\n            let submit = null;\n            if (this.props.user.auth_service === '') {\n                let usernameLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.username'\n                        defaultMessage='Username'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    usernameLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='usernameSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{usernameLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='username'\n                                autoFocus={true}\n                                maxLength={Constants.MAX_USERNAME_LENGTH}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updateUsername}\n                                value={this.state.username}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.username', defaultMessage: 'Username'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.usernameInfo'\n                            defaultMessage='Pick something easy for teammates to recognize and recall.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitUsername;\n            } else {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            }\n\n            usernameSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.username)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            usernameSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.username)}\n                    describe={this.props.user.username}\n                    section={'username'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        let positionSection;\n        if (this.props.activeSection === 'position') {\n            let extraInfo;\n            let submit = null;\n            if ((this.props.user.auth_service === Constants.LDAP_SERVICE && this.props.ldapPositionAttributeSet) || (this.props.user.auth_service === Constants.SAML_SERVICE && this.props.samlPositionAttributeSet)) {\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.field_handled_externally'\n                            defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so though your login provider.'\n                        />\n                    </span>\n                );\n            } else {\n                let positionLabel = (\n                    <FormattedMessage\n                        id='user.settings.general.position'\n                        defaultMessage='Position'\n                    />\n                );\n                if (Utils.isMobile()) {\n                    positionLabel = '';\n                }\n\n                inputs.push(\n                    <div\n                        key='positionSetting'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>{positionLabel}</label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='position'\n                                autoFocus={true}\n                                className='form-control'\n                                type='text'\n                                onChange={this.updatePosition}\n                                value={this.state.position}\n                                maxLength={Constants.MAX_POSITION_LENGTH}\n                                autoCapitalize='off'\n                                onFocus={Utils.moveCursorToEnd}\n                                aria-label={formatMessage({id: 'user.settings.general.position', defaultMessage: 'Position'})}\n                            />\n                        </div>\n                    </div>\n                );\n\n                extraInfo = (\n                    <span>\n                        <FormattedMessage\n                            id='user.settings.general.positionExtra'\n                            defaultMessage='Use Position for your role or job title. This will be shown in your profile popover.'\n                        />\n                    </span>\n                );\n\n                submit = this.submitPosition;\n            }\n\n            positionSection = (\n                <SettingItemMax\n                    title={formatMessage(holders.position)}\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.sectionIsSaving}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={this.updateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let describe = '';\n            if (user.position) {\n                describe = user.position;\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.general.emptyPosition'\n                        defaultMessage=\"Click 'Edit' to add your job title / position\"\n                    />\n                );\n                if (Utils.isMobile()) {\n                    describe = (\n                        <FormattedMessage\n                            id='user.settings.general.mobile.emptyPosition'\n                            defaultMessage='Click to add your job title / position'\n                        />\n                    );\n                }\n            }\n\n            positionSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.position)}\n                    describe={describe}\n                    section={'position'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        const emailSection = this.createEmailSection();\n\n        let pictureSection;\n        if (this.props.activeSection === 'picture') {\n            pictureSection = (\n                <SettingPicture\n                    title={formatMessage(holders.profilePicture)}\n                    onSubmit={this.submitPicture}\n                    onSetDefault={user.last_picture_update > 0 ? this.setDefaultProfilePicture : null}\n                    src={Utils.imageURLForUser(user)}\n                    defaultImageSrc={Utils.defaultImageURLForUser(user.id)}\n                    serverError={serverError}\n                    clientError={clientError}\n                    updateSection={(e) => {\n                        this.updateSection('');\n                        e.preventDefault();\n                    }}\n                    file={this.state.pictureFile}\n                    onFileChange={this.updatePicture}\n                    submitActive={this.submitActive}\n                    loadingPicture={this.state.loadingPicture}\n                    maxFileSize={this.props.maxFileSize}\n                />\n            );\n        } else {\n            let minMessage = formatMessage(holders.uploadImage);\n            if (Utils.isMobile()) {\n                minMessage = formatMessage(holders.uploadImageMobile);\n            }\n            if (user.last_picture_update) {\n                minMessage = (\n                    <FormattedMessage\n                        id='user.settings.general.imageUpdated'\n                        defaultMessage='Image last updated {date}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={new Date(user.last_picture_update)}\n                                    day='2-digit'\n                                    month='short'\n                                    year='numeric'\n                                />\n                            ),\n                        }}\n                    />\n                );\n            }\n            pictureSection = (\n                <SettingItemMin\n                    title={formatMessage(holders.profilePicture)}\n                    describe={minMessage}\n                    section={'picture'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <div id='generalSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeUserSettings'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label={formatMessage(holders.close)}\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3\n                        id='generalSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.general.title'\n                            defaultMessage='General Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {nameSection}\n                    <div className='divider-light'/>\n                    {usernameSection}\n                    <div className='divider-light'/>\n                    {nicknameSection}\n                    <div className='divider-light'/>\n                    {positionSection}\n                    <div className='divider-light'/>\n                    {emailSection}\n                    <div className='divider-light'/>\n                    {pictureSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getMe,\n    updateMe,\n    sendVerificationEmail,\n    setDefaultProfileImage,\n    uploadProfileImage,\n} from 'mattermost-redux/actions/users';\nimport {clearErrors, logError} from 'mattermost-redux/actions/errors';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsGeneralTab from './user_settings_general.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const requireEmailVerification = config.RequireEmailVerification === 'true';\n    const maxFileSize = parseInt(config.MaxFileSize, 10);\n    const ldapFirstNameAttributeSet = config.LdapFirstNameAttributeSet === 'true';\n    const ldapLastNameAttributeSet = config.LdapLastNameAttributeSet === 'true';\n    const samlFirstNameAttributeSet = config.SamlFirstNameAttributeSet === 'true';\n    const samlLastNameAttributeSet = config.SamlLastNameAttributeSet === 'true';\n    const ldapNicknameAttributeSet = config.LdapNicknameAttributeSet === 'true';\n    const samlNicknameAttributeSet = config.SamlNicknameAttributeSet === 'true';\n    const samlPositionAttributeSet = config.SamlPositionAttributeSet === 'true';\n    const ldapPositionAttributeSet = config.LdapPositionAttributeSet === 'true';\n\n    return {\n        requireEmailVerification,\n        maxFileSize,\n        ldapFirstNameAttributeSet,\n        ldapLastNameAttributeSet,\n        samlFirstNameAttributeSet,\n        samlLastNameAttributeSet,\n        ldapNicknameAttributeSet,\n        samlNicknameAttributeSet,\n        samlPositionAttributeSet,\n        ldapPositionAttributeSet,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            logError,\n            clearErrors,\n            getMe,\n            updateMe,\n            sendVerificationEmail,\n            setDefaultProfileImage,\n            uploadProfileImage,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsGeneralTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class DesktopNotificationSettings extends React.Component {\n    handleMinUpdateSection = (section) => {\n        this.props.updateSection(section);\n\n        this.props.cancel();\n    }\n\n    handleMaxUpdateSection = (section) => {\n        this.props.updateSection(section);\n    }\n\n    handleOnChange = (e) => {\n        const key = e.currentTarget.getAttribute('data-key');\n        const value = e.currentTarget.getAttribute('data-value');\n        this.props.setParentState(key, value);\n    }\n\n    buildMaximizedSetting = () => {\n        const inputs = [];\n\n        const activityRadio = [false, false, false];\n        if (this.props.activity === NotificationLevels.MENTION) {\n            activityRadio[1] = true;\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            activityRadio[2] = true;\n        } else {\n            activityRadio[0] = true;\n        }\n\n        let soundSection;\n        if (this.props.activity !== NotificationLevels.NONE) {\n            const soundRadio = [false, false];\n            if (this.props.sound === 'false') {\n                soundRadio[1] = true;\n            } else {\n                soundRadio[0] = true;\n            }\n\n            if (Utils.hasSoundOptions()) {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOn'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[0]}\n                                    data-key={'desktopSound'}\n                                    data-value={'true'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.on'\n                                    defaultMessage='On'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='soundOff'\n                                    type='radio'\n                                    name='notificationSounds'\n                                    checked={soundRadio[1]}\n                                    data-key={'desktopSound'}\n                                    data-value={'false'}\n                                    onChange={this.handleOnChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.off'\n                                    defaultMessage='Off'\n                                />\n                            </label>\n                            <br/>\n                        </div>\n                        <div className='margin-top x3'>\n                            <FormattedMessage\n                                id='user.settings.notifications.sounds_info'\n                                defaultMessage='Notification sounds are available on IE11, Safari, Chrome and Mattermost Desktop Apps.'\n                            />\n                        </div>\n                    </fieldset>\n                );\n            } else {\n                soundSection = (\n                    <fieldset>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.desktop.sound'\n                                defaultMessage='Notification sound'\n                            />\n                        </legend>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.notifications.soundConfig'\n                            defaultMessage='Please configure notification sounds in your browser settings'\n                        />\n                    </fieldset>\n                );\n            }\n        }\n\n        inputs.push(\n            <div key='userNotificationLevelOption'>\n                <fieldset>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.notifications.desktop'\n                            defaultMessage='Send desktop notifications'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationAllActivity'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[0]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.ALL}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.allActivity'\n                                defaultMessage='For all activity'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationMentions'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[1]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.MENTION}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.onlyMentions'\n                                defaultMessage='Only for mentions and direct messages'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='desktopNotificationNever'\n                                type='radio'\n                                name='desktopNotificationLevel'\n                                checked={activityRadio[2]}\n                                data-key={'desktopActivity'}\n                                data-value={NotificationLevels.NONE}\n                                onChange={this.handleOnChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.never'\n                                defaultMessage='Never'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.notifications.info'\n                            defaultMessage='Desktop notifications are available on Edge, Firefox, Safari, Chrome and Mattermost Desktop Apps.'\n                        />\n                    </div>\n                </fieldset>\n                <hr/>\n                {soundSection}\n            </div>\n        );\n\n        return (\n            <SettingItemMax\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                inputs={inputs}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                server_error={this.props.error}\n                updateSection={this.handleMaxUpdateSection}\n            />\n        );\n    }\n\n    buildMinimizedSetting = () => {\n        let formattedMessageProps;\n        const hasSoundOption = Utils.hasSoundOptions();\n        if (this.props.activity === NotificationLevels.MENTION) {\n            if (hasSoundOption && this.props.sound !== 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSound'),\n                    defaultMessage: 'For mentions and direct messages, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsNoSound'),\n                    defaultMessage: 'For mentions and direct messages, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.mentionsSoundHidden'),\n                    defaultMessage: 'For mentions and direct messages',\n                };\n            }\n        } else if (this.props.activity === NotificationLevels.NONE) {\n            formattedMessageProps = {\n                id: t('user.settings.notifications.off'),\n                defaultMessage: 'Off',\n            };\n        } else {\n            if (hasSoundOption && this.props.sound !== 'false') { //eslint-disable-line no-lonely-if\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSound'),\n                    defaultMessage: 'For all activity, with sound',\n                };\n            } else if (hasSoundOption && this.props.sound === 'false') {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allNoSound'),\n                    defaultMessage: 'For all activity, without sound',\n                };\n            } else {\n                formattedMessageProps = {\n                    id: t('user.settings.notifications.desktop.allSoundHidden'),\n                    defaultMessage: 'For all activity',\n                };\n            }\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.desktop.title', 'Desktop notifications')}\n                describe={<FormattedMessage {...formattedMessageProps}/>}\n                focused={this.props.focused}\n                section={'desktop'}\n                updateSection={this.handleMinUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.active) {\n            return this.buildMaximizedSetting();\n        }\n\n        return this.buildMinimizedSetting();\n    }\n}\n\nDesktopNotificationSettings.propTypes = {\n    activity: PropTypes.string.isRequired,\n    sound: PropTypes.string.isRequired,\n    updateSection: PropTypes.func,\n    setParentState: PropTypes.func,\n    submit: PropTypes.func,\n    cancel: PropTypes.func,\n    error: PropTypes.string,\n    active: PropTypes.bool,\n    saving: PropTypes.bool,\n    focused: PropTypes.bool,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {getEmailInterval} from 'mattermost-redux/utils/notify_props';\n\nimport {Preferences} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nconst SECONDS_PER_MINUTE = 60;\n\nexport default class EmailNotificationSetting extends React.PureComponent {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        activeSection: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        enableEmail: PropTypes.bool.isRequired,\n        emailInterval: PropTypes.number.isRequired,\n        onSubmit: PropTypes.func.isRequired,\n        onCancel: PropTypes.func.isRequired,\n        onChange: PropTypes.func.isRequired,\n        serverError: PropTypes.string,\n        saving: PropTypes.bool,\n        focused: PropTypes.bool,\n        sendEmailNotifications: PropTypes.bool,\n        enableEmailBatching: PropTypes.bool,\n        actions: PropTypes.shape({\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = props;\n\n        this.state = {\n            activeSection,\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const {\n            emailInterval,\n            enableEmail,\n            enableEmailBatching,\n            sendEmailNotifications,\n            activeSection,\n        } = nextProps;\n\n        // If we're re-opening this section, reset to defaults from props\n        if (activeSection === 'email' && prevState.activeSection !== 'email') {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        if (sendEmailNotifications !== prevState.sendEmailNotifications ||\n            enableEmailBatching !== prevState.enableEmailBatching ||\n            emailInterval !== prevState.emailInterval ||\n            activeSection !== prevState.activeSection\n        ) {\n            return {\n                activeSection,\n                emailInterval,\n                enableEmail,\n                enableEmailBatching,\n                sendEmailNotifications,\n                newInterval: getEmailInterval(enableEmail && sendEmailNotifications, enableEmailBatching, emailInterval),\n            };\n        }\n\n        return null;\n    }\n\n    handleChange = (e) => {\n        const enableEmail = e.currentTarget.getAttribute('data-enable-email');\n\n        this.setState({\n            enableEmail,\n            newInterval: parseInt(e.currentTarget.getAttribute('data-email-interval'), 10),\n        });\n\n        this.props.onChange(enableEmail);\n    }\n\n    handleSubmit = async () => {\n        const {newInterval} = this.state;\n        if (this.props.emailInterval === newInterval && this.props.enableEmail === this.state.enableEmail) {\n            this.props.updateSection('');\n        } else {\n            // until the rest of the notification settings are moved to preferences, we have to do this separately\n            const {currentUserId, actions} = this.props;\n            const emailIntervalPreference = {\n                user_id: currentUserId,\n                category: Preferences.CATEGORY_NOTIFICATIONS,\n                name: Preferences.EMAIL_INTERVAL,\n                value: newInterval.toString(),\n            };\n\n            await actions.savePreferences(currentUserId, [emailIntervalPreference]);\n\n            this.props.onSubmit();\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n\n            this.setState({\n                enableEmail: this.props.enableEmail,\n                newInterval: this.props.emailInterval,\n            });\n            this.props.onCancel();\n        }\n    }\n\n    renderMinSettingView = () => {\n        const {\n            enableEmail,\n            focused,\n            sendEmailNotifications,\n        } = this.props;\n\n        const {newInterval} = this.state;\n\n        let description;\n        if (!sendEmailNotifications) {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.disabled'\n                    defaultMessage='Email notifications are not enabled'\n                />\n            );\n        } else if (enableEmail) {\n            switch (newInterval) {\n            case Preferences.INTERVAL_IMMEDIATE:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.immediately'\n                        defaultMessage='Immediately'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_HOUR:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyHour'\n                        defaultMessage='Every hour'\n                    />\n                );\n                break;\n            case Preferences.INTERVAL_FIFTEEN_MINUTES:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.everyXMinutes'\n                        defaultMessage='Every {count, plural, one {minute} other {{count, number} minutes}}'\n                        values={{count: newInterval / SECONDS_PER_MINUTE}}\n                    />\n                );\n                break;\n            default:\n                description = (\n                    <FormattedMessage\n                        id='user.settings.notifications.email.never'\n                        defaultMessage='Never'\n                    />\n                );\n            }\n        } else {\n            description = (\n                <FormattedMessage\n                    id='user.settings.notifications.email.never'\n                    defaultMessage='Never'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                describe={description}\n                focused={focused}\n                section={'email'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    renderMaxSettingView = () => {\n        if (!this.props.sendEmailNotifications) {\n            return (\n                <SettingItemMax\n                    title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                    inputs={[\n                        <div\n                            key='oauthEmailInfo'\n                            className='padding-top'\n                        >\n                            <FormattedMessage\n                                id='user.settings.notifications.email.disabled_long'\n                                defaultMessage='Email notifications have not been enabled by your System Administrator.'\n                            />\n                        </div>,\n                    ]}\n                    server_error={this.props.serverError}\n                    section={'email'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        const {newInterval} = this.state;\n        let batchingOptions = null;\n        let batchingInfo = null;\n        if (this.props.enableEmailBatching) {\n            batchingOptions = (\n                <fieldset>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationMinutes'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_FIFTEEN_MINUTES}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyXMinutes'\n                                defaultMessage='Every {count} minutes'\n                                values={{count: Preferences.INTERVAL_FIFTEEN_MINUTES / SECONDS_PER_MINUTE}}\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='emailNotificationHour'\n                                type='radio'\n                                name='emailNotifications'\n                                checked={newInterval === Preferences.INTERVAL_HOUR}\n                                data-enable-email={'true'}\n                                data-email-interval={Preferences.INTERVAL_HOUR}\n                                onChange={this.handleChange}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.email.everyHour'\n                                defaultMessage='Every hour'\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            batchingInfo = (\n                <FormattedMessage\n                    id='user.settings.notifications.emailBatchingInfo'\n                    defaultMessage='Notifications received over the time period selected are combined and sent in a single email.'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={localizeMessage('user.settings.notifications.emailNotifications', 'Email notifications')}\n                inputs={[\n                    <fieldset key='userNotificationEmailOptions'>\n                        <legend className='form-legend'>\n                            <FormattedMessage\n                                id='user.settings.notifications.email.send'\n                                defaultMessage='Send email notifications'\n                            />\n                        </legend>\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationImmediately'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_IMMEDIATE}\n                                    data-enable-email={'true'}\n                                    data-email-interval={Preferences.INTERVAL_IMMEDIATE}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.immediately'\n                                    defaultMessage='Immediately'\n                                />\n                            </label>\n                        </div>\n                        {batchingOptions}\n                        <div className='radio'>\n                            <label>\n                                <input\n                                    id='emailNotificationNever'\n                                    type='radio'\n                                    name='emailNotifications'\n                                    checked={newInterval === Preferences.INTERVAL_NEVER}\n                                    data-enable-email={'false'}\n                                    data-email-interval={Preferences.INTERVAL_NEVER}\n                                    onChange={this.handleChange}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.email.never'\n                                    defaultMessage='Never'\n                                />\n                            </label>\n                        </div>\n                        <div className='margin-top x2'>\n                            <FormattedMessage\n                                id='user.settings.notifications.emailInfo'\n                                defaultMessage='Email notifications are sent for mentions and direct messages when you are offline or away for more than 5 minutes.'\n                            />\n                            {' '}\n                            {batchingInfo}\n                        </div>\n                    </fieldset>,\n                ]}\n                submit={this.handleSubmit}\n                saving={this.props.saving}\n                server_error={this.props.serverError}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        if (this.props.activeSection !== 'email') {\n            return this.renderMinSettingView();\n        }\n\n        return this.renderMaxSettingView();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {Preferences} from 'mattermost-redux/constants';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\n\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/common';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference} from 'mattermost-redux/selectors/entities/preferences';\n\nimport EmailNotificationSetting from './email_notification_setting';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const emailInterval = parseInt(getPreference(\n        state,\n        Preferences.CATEGORY_NOTIFICATIONS,\n        Preferences.EMAIL_INTERVAL,\n        Preferences.INTERVAL_NOT_SET.toString(),\n    ), 10);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        emailInterval,\n        enableEmailBatching: config.EnableEmailBatching === 'true',\n        sendEmailNotifications: config.SendEmailNotifications === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EmailNotificationSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport AutosizeTextarea from 'components/autosize_textarea';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nconst MESSAGE_MAX_LENGTH = 200;\n\nexport default class ManageAutoResponder extends React.PureComponent {\n    static propTypes = {\n        autoResponderActive: PropTypes.bool.isRequired,\n        autoResponderMessage: PropTypes.string.isRequired,\n        updateSection: PropTypes.func.isRequired,\n        setParentState: PropTypes.func.isRequired,\n        submit: PropTypes.func.isRequired,\n        saving: PropTypes.bool.isRequired,\n        error: PropTypes.string,\n    };\n\n    handleAutoResponderChecked = (e) => {\n        this.props.setParentState('autoResponderActive', e.target.checked);\n    };\n\n    onMessageChanged = (e) => {\n        this.props.setParentState('autoResponderMessage', e.target.value);\n    };\n\n    render() {\n        const {\n            autoResponderActive,\n            autoResponderMessage,\n        } = this.props;\n\n        let serverError;\n        if (this.props.error) {\n            serverError = <label className='has-error'>{this.props.error}</label>;\n        }\n\n        const inputs = [];\n\n        const activeToggle = (\n            <div\n                id='autoResponderCheckbox'\n                key='autoResponderCheckbox'\n                className='checkbox'\n            >\n                <label>\n                    <input\n                        id='autoResponderActive'\n                        type='checkbox'\n                        checked={autoResponderActive}\n                        onChange={this.handleAutoResponderChecked}\n                    />\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                </label>\n            </div>\n        );\n\n        const message = (\n            <div\n                id='autoResponderMessage'\n                key='autoResponderMessage'\n            >\n                <div className='padding-top'>\n                    <AutosizeTextarea\n                        style={{resize: 'none'}}\n                        id='autoResponderMessageInput'\n                        className='form-control'\n                        rows='5'\n                        placeholder={localizeMessage('user.settings.notifications.autoResponderPlaceholder', 'Message')}\n                        value={autoResponderMessage}\n                        maxLength={MESSAGE_MAX_LENGTH}\n                        onChange={this.onMessageChanged}\n                    />\n                    {serverError}\n                </div>\n            </div>\n        );\n\n        inputs.push(activeToggle);\n        if (autoResponderActive) {\n            inputs.push(message);\n        }\n        inputs.push((\n            <div\n                key='autoResponderHint'\n                className='margin-top x3'\n            >\n                <FormattedHTMLMessage\n                    id='user.settings.notifications.autoResponderHint'\n                    defaultMessage='Set a custom message that will be automatically sent in response to Direct Messages. Mentions in Public and Private Channels will not trigger the automated reply. Enabling Automatic Replies sets your status to Out of Office and disables email and push notifications.'\n                />\n            </div>\n        ));\n\n        return (\n            <SettingItemMax\n                title={\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponder'\n                        defaultMessage='Automatic Direct Message Replies'\n                    />\n                }\n                width='medium'\n                shiftEnter={true}\n                submit={this.props.submit}\n                saving={this.props.saving}\n                inputs={inputs}\n                updateSection={this.props.updateSection}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {NotificationLevels} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nimport DesktopNotificationSettings from './desktop_notification_settings.jsx';\nimport EmailNotificationSetting from './email_notification_setting';\nimport ManageAutoResponder from './manage_auto_responder.jsx';\n\nfunction getNotificationsStateFromProps(props) {\n    const user = props.user;\n\n    let desktop = NotificationLevels.MENTION;\n    let sound = 'true';\n    let comments = 'never';\n    let enableEmail = 'true';\n    let pushActivity = NotificationLevels.MENTION;\n    let pushStatus = Constants.UserStatuses.AWAY;\n    let autoResponderActive = false;\n    let autoResponderMessage = Utils.localizeMessage(\n        'user.settings.notifications.autoResponderDefault',\n        'Hello, I am out of office and unable to respond to messages.'\n    );\n\n    if (user.notify_props) {\n        if (user.notify_props.desktop) {\n            desktop = user.notify_props.desktop;\n        }\n        if (user.notify_props.desktop_sound) {\n            sound = user.notify_props.desktop_sound;\n        }\n        if (user.notify_props.comments) {\n            comments = user.notify_props.comments;\n        }\n        if (user.notify_props.email) {\n            enableEmail = user.notify_props.email;\n        }\n        if (user.notify_props.push) {\n            pushActivity = user.notify_props.push;\n        }\n        if (user.notify_props.push_status) {\n            pushStatus = user.notify_props.push_status;\n        }\n\n        if (user.notify_props.auto_responder_active) {\n            autoResponderActive = user.notify_props.auto_responder_active === 'true';\n        }\n\n        if (user.notify_props.auto_responder_message) {\n            autoResponderMessage = user.notify_props.auto_responder_message;\n        }\n    }\n\n    let usernameKey = false;\n    let customKeys = '';\n    let firstNameKey = false;\n    let channelKey = false;\n\n    if (user.notify_props) {\n        if (user.notify_props.mention_keys) {\n            const keys = user.notify_props.mention_keys.split(',');\n\n            if (keys.indexOf(user.username) === -1) {\n                usernameKey = false;\n            } else {\n                usernameKey = true;\n                keys.splice(keys.indexOf(user.username), 1);\n                if (keys.indexOf(`@${user.username}`) !== -1) {\n                    keys.splice(keys.indexOf(`@${user.username}`), 1);\n                }\n            }\n\n            customKeys = keys.join(',');\n        }\n\n        if (user.notify_props.first_name) {\n            firstNameKey = user.notify_props.first_name === 'true';\n        }\n\n        if (user.notify_props.channel) {\n            channelKey = user.notify_props.channel === 'true';\n        }\n    }\n\n    return {\n        desktopActivity: desktop,\n        enableEmail,\n        pushActivity,\n        pushStatus,\n        desktopSound: sound,\n        usernameKey,\n        customKeys,\n        customKeysChecked: customKeys.length > 0,\n        firstNameKey,\n        channelKey,\n        autoResponderActive,\n        autoResponderMessage,\n        notifyCommentsLevel: comments,\n        isSaving: false,\n    };\n}\n\nexport default class NotificationsTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        sendPushNotifications: PropTypes.bool,\n        enableAutoResponder: PropTypes.bool,\n        actions: PropTypes.shape({\n            updateMe: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: null,\n        activeSection: '',\n        activeTab: '',\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = getNotificationsStateFromProps(props);\n    }\n\n    handleSubmit = () => {\n        const data = {};\n        data.email = this.state.enableEmail;\n        data.desktop_sound = this.state.desktopSound;\n        data.desktop = this.state.desktopActivity;\n        data.push = this.state.pushActivity;\n        data.push_status = this.state.pushStatus;\n        data.comments = this.state.notifyCommentsLevel;\n        data.auto_responder_active = this.state.autoResponderActive.toString();\n        data.auto_responder_message = this.state.autoResponderMessage;\n\n        if (!data.auto_responder_message || data.auto_responder_message === '') {\n            data.auto_responder_message = Utils.localizeMessage(\n                'user.settings.notifications.autoResponderDefault',\n                'Hello, I am out of office and unable to respond to messages.'\n            );\n        }\n\n        const mentionKeys = [];\n        if (this.state.usernameKey) {\n            mentionKeys.push(this.props.user.username);\n        }\n\n        let stringKeys = mentionKeys.join(',');\n        if (this.state.customKeys.length > 0 && this.state.customKeysChecked) {\n            stringKeys += ',' + this.state.customKeys;\n        }\n\n        data.mention_keys = stringKeys;\n        data.first_name = this.state.firstNameKey.toString();\n        data.channel = this.state.channelKey.toString();\n\n        this.setState({isSaving: true});\n\n        this.props.actions.updateMe({notify_props: data}).\n            then(({data: result, error: err}) => {\n                if (result) {\n                    this.handleUpdateSection('');\n                    this.setState(getNotificationsStateFromProps(this.props));\n                } else if (err) {\n                    this.setState({serverError: err.message, isSaving: false});\n                }\n            });\n    }\n\n    handleCancel = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n        this.setState(getNotificationsStateFromProps(this.props));\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            this.props.updateSection('');\n        }\n        this.setState({isSaving: false});\n        this.handleCancel();\n    };\n\n    setStateValue = (key, value) => {\n        const data = {};\n        data[key] = value;\n        this.setState(data);\n    }\n\n    handleNotifyCommentsRadio(notifyCommentsLevel) {\n        this.setState({notifyCommentsLevel});\n    }\n\n    handlePushRadio(pushActivity) {\n        this.setState({pushActivity});\n    }\n\n    handlePushStatusRadio(pushStatus) {\n        this.setState({pushStatus});\n    }\n\n    handleEmailRadio = (enableEmail) => {\n        this.setState({enableEmail});\n    }\n\n    updateUsernameKey = (val) => {\n        this.setState({usernameKey: val});\n    }\n\n    updateFirstNameKey = (val) => {\n        this.setState({firstNameKey: val});\n    }\n\n    updateChannelKey = (val) => {\n        this.setState({channelKey: val});\n    }\n\n    updateCustomMentionKeys = () => {\n        const checked = this.refs.customcheck.checked;\n\n        if (checked) {\n            const text = this.refs.custommentions.value;\n\n            // remove all spaces and split string into individual keys\n            this.setState({customKeys: text.replace(/ /g, ''), customKeysChecked: true});\n        } else {\n            this.setState({customKeys: '', customKeysChecked: false});\n        }\n    }\n\n    onCustomChange = () => {\n        this.refs.customcheck.checked = true;\n        this.updateCustomMentionKeys();\n    }\n\n    createPushNotificationSection = () => {\n        if (this.props.activeSection === 'push') {\n            const inputs = [];\n            let extraInfo = null;\n            let submit = null;\n\n            if (this.props.sendPushNotifications) {\n                const pushActivityRadio = [false, false, false];\n                if (this.state.pushActivity === NotificationLevels.ALL) {\n                    pushActivityRadio[0] = true;\n                } else if (this.state.pushActivity === NotificationLevels.NONE) {\n                    pushActivityRadio[2] = true;\n                } else {\n                    pushActivityRadio[1] = true;\n                }\n\n                const pushStatusRadio = [false, false, false];\n                if (this.state.pushStatus === Constants.UserStatuses.ONLINE) {\n                    pushStatusRadio[0] = true;\n                } else if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                    pushStatusRadio[1] = true;\n                } else {\n                    pushStatusRadio[2] = true;\n                }\n\n                let pushStatusSettings;\n                if (this.state.pushActivity !== NotificationLevels.NONE) {\n                    pushStatusSettings = (\n                        <fieldset>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.notifications.push_notification.status'\n                                    defaultMessage='Trigger push notifications when'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOnline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[0]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.ONLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.online'\n                                        defaultMessage='Online, away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAway'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[1]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.AWAY)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.away'\n                                        defaultMessage='Away or offline'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationOffline'\n                                        type='radio'\n                                        name='pushNotificationStatus'\n                                        checked={pushStatusRadio[2]}\n                                        onChange={this.handlePushStatusRadio.bind(this, Constants.UserStatuses.OFFLINE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.offline'\n                                        defaultMessage='Offline'\n                                    />\n                                </label>\n                            </div>\n                        </fieldset>\n                    );\n\n                    extraInfo = (\n                        <span>\n                            <FormattedMessage\n                                id='user.settings.push_notification.status_info'\n                                defaultMessage='Notification alerts are only pushed to your mobile device when your online status matches the selection above.'\n                            />\n                        </span>\n                    );\n                }\n\n                inputs.push(\n                    <div>\n                        <fieldset key='userNotificationLevelOption'>\n                            <legend className='form-legend'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.send'\n                                    defaultMessage='Send mobile push notifications'\n                                />\n                            </legend>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationAllActivity'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[0]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.ALL)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.allActivity'\n                                        defaultMessage='For all activity'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationMentions'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[1]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.MENTION)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.push_notification.onlyMentions'\n                                        defaultMessage='For mentions and direct messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='pushNotificationNever'\n                                        type='radio'\n                                        name='pushNotificationLevel'\n                                        checked={pushActivityRadio[2]}\n                                        onChange={this.handlePushRadio.bind(this, NotificationLevels.NONE)}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.notifications.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.push_notification.info'\n                                    defaultMessage='Notification alerts are pushed to your mobile device when there is activity in Mattermost.'\n                                />\n                            </div>\n                        </fieldset>\n                        <hr/>\n                        {pushStatusSettings}\n                    </div>\n                );\n\n                submit = this.handleSubmit;\n            } else {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='padding-top'\n                    >\n                        <FormattedMessage\n                            id='user.settings.push_notification.disabled_long'\n                            defaultMessage='Push notifications have not been enabled by your System Administrator.'\n                        />\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={submit}\n                    server_error={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = '';\n        if (this.state.pushActivity === NotificationLevels.ALL) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityAway'\n                        defaultMessage='For all activity when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOffline'\n                        defaultMessage='For all activity when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.allActivityOnline'\n                        defaultMessage='For all activity when online, away or offline'\n                    />\n                );\n            }\n        } else if (this.state.pushActivity === NotificationLevels.NONE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.notifications.never'\n                    defaultMessage='Never'\n                />\n            );\n        } else if (this.props.sendPushNotifications) {\n            if (this.state.pushStatus === Constants.UserStatuses.AWAY) { //eslint-disable-line no-lonely-if\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsAway'\n                        defaultMessage='For mentions and direct messages when away or offline'\n                    />\n                );\n            } else if (this.state.pushStatus === Constants.UserStatuses.OFFLINE) {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOffline'\n                        defaultMessage='For mentions and direct messages when offline'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.push_notification.onlyMentionsOnline'\n                        defaultMessage='For mentions and direct messages when online, away or offline'\n                    />\n                );\n            }\n        } else {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.push_notification.disabled'\n                    defaultMessage='Push notifications are not enabled'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.notifications.push', 'Mobile push notifications')}\n                describe={describe}\n                section={'push'}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const serverError = this.state.serverError;\n        const user = this.props.user;\n\n        let keysSection;\n        if (this.props.activeSection === 'keys') {\n            const inputs = [];\n\n            if (user.first_name) {\n                const handleUpdateFirstNameKey = (e) => {\n                    this.updateFirstNameKey(e.target.checked);\n                };\n                inputs.push(\n                    <div key='userNotificationFirstNameOption'>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    id='notificationTriggerFirst'\n                                    type='checkbox'\n                                    checked={this.state.firstNameKey}\n                                    onChange={handleUpdateFirstNameKey}\n                                />\n                                <FormattedMessage\n                                    id='user.settings.notifications.sensitiveName'\n                                    defaultMessage='Your case sensitive first name \"{first_name}\"'\n                                    values={{\n                                        first_name: user.first_name,\n                                    }}\n                                />\n                            </label>\n                        </div>\n                    </div>\n                );\n            }\n\n            const handleUpdateUsernameKey = (e) => {\n                this.updateUsernameKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationUsernameOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerUsername'\n                                type='checkbox'\n                                checked={this.state.usernameKey}\n                                onChange={handleUpdateUsernameKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveUsername'\n                                defaultMessage='Your non-case sensitive username \"{username}\"'\n                                values={{\n                                    username: user.username,\n                                }}\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            const handleUpdateChannelKey = (e) => {\n                this.updateChannelKey(e.target.checked);\n            };\n            inputs.push(\n                <div key='userNotificationChannelOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerShouts'\n                                type='checkbox'\n                                checked={this.state.channelKey}\n                                onChange={handleUpdateChannelKey}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.channelWide'\n                                defaultMessage='Channel-wide mentions \"@channel\", \"@all\", \"@here\"'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n\n            inputs.push(\n                <div key='userNotificationCustomOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='notificationTriggerCustom'\n                                ref='customcheck'\n                                type='checkbox'\n                                checked={this.state.customKeysChecked}\n                                onChange={this.updateCustomMentionKeys}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.sensitiveWords'\n                                defaultMessage='Other non-case sensitive words, separated by commas:'\n                            />\n                        </label>\n                    </div>\n                    <input\n                        id='notificationTriggerCustomText'\n                        autoFocus={this.state.customKeysChecked}\n                        ref='custommentions'\n                        className='form-control mentions-input'\n                        type='text'\n                        defaultValue={this.state.customKeys}\n                        onChange={this.onCustomChange}\n                        onFocus={Utils.moveCursorToEnd}\n                        aria-labelledby='notificationTriggerCustom'\n                    />\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.mentionsInfo'\n                        defaultMessage='Mentions trigger when someone sends a message that includes your username (@{username}) or any of the options selected above.'\n                        values={{\n                            username: user.username,\n                        }}\n                    />\n                </span>\n            );\n\n            keysSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                    extraInfo={extraInfo}\n                />\n            );\n        } else {\n            let keys = ['@' + user.username];\n            if (this.state.firstNameKey) {\n                keys.push(user.first_name);\n            }\n            if (this.state.usernameKey) {\n                keys.push(user.username);\n            }\n\n            if (this.state.channelKey) {\n                keys.push('@channel');\n                keys.push('@all');\n                keys.push('@here');\n            }\n            if (this.state.customKeys.length > 0) {\n                keys = keys.concat(this.state.customKeys.split(','));\n            }\n\n            let describe = '';\n            for (let i = 0; i < keys.length; i++) {\n                if (keys[i] !== '') {\n                    describe += '\"' + keys[i] + '\", ';\n                }\n            }\n\n            if (describe.length > 0) {\n                describe = describe.substring(0, describe.length - 2);\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.noWords'\n                        defaultMessage='No words configured'\n                    />\n                );\n            }\n\n            keysSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.wordsTrigger', 'Words that trigger mentions')}\n                    describe={describe}\n                    section={'keys'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let commentsSection;\n        if (this.props.activeSection === 'comments') {\n            const commentsActive = [false, false, false];\n            if (this.state.notifyCommentsLevel === 'never') {\n                commentsActive[2] = true;\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                commentsActive[1] = true;\n            } else {\n                commentsActive[0] = true;\n            }\n\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='userNotificationLevelOption'>\n                    <legend className='form-legend hidden-label'>\n                        {Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsAny'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[0]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'any')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsAny'\n                                defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsRoot'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[1]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'root')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsRoot'\n                                defaultMessage='Trigger notifications on messages in threads that I start'\n                            />\n                        </label>\n                        <br/>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='notificationCommentsNever'\n                                type='radio'\n                                name='commentsNotificationLevel'\n                                checked={commentsActive[2]}\n                                onChange={this.handleNotifyCommentsRadio.bind(this, 'never')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.notifications.commentsNever'\n                                defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                            />\n                        </label>\n                    </div>\n                </fieldset>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsInfo'\n                        defaultMessage=\"In addition to notifications for when you're mentioned, select if you would like to receive notifications on reply threads.\"\n                    />\n                </span>\n            );\n\n            commentsSection = (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        } else {\n            let describe = '';\n            if (this.state.notifyCommentsLevel === 'never') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsNever'\n                        defaultMessage=\"Do not trigger notifications on messages in reply threads unless I'm mentioned\"\n                    />\n                );\n            } else if (this.state.notifyCommentsLevel === 'root') {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsRoot'\n                        defaultMessage='Trigger notifications on messages in threads that I start'\n                    />\n                );\n            } else {\n                describe = (\n                    <FormattedMessage\n                        id='user.settings.notifications.commentsAny'\n                        defaultMessage='Trigger notifications on messages in reply threads that I start or participate in'\n                    />\n                );\n            }\n\n            commentsSection = (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.notifications.comments', 'Reply notifications')}\n                    describe={describe}\n                    section={'comments'}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let autoResponderSection;\n        if (this.props.enableAutoResponder) {\n            if (this.props.activeSection === 'auto-responder') {\n                autoResponderSection = (\n                    <div>\n                        <ManageAutoResponder\n                            autoResponderActive={this.state.autoResponderActive}\n                            autoResponderMessage={this.state.autoResponderMessage}\n                            updateSection={this.handleUpdateSection}\n                            setParentState={this.setStateValue}\n                            submit={this.handleSubmit}\n                            error={this.state.serverError}\n                            saving={this.state.isSaving}\n                        />\n                        <div className='divider-dark'/>\n                    </div>\n                );\n            } else {\n                const describe = this.state.autoResponderActive ? (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderEnabled'\n                        defaultMessage='Enabled'\n                    />\n                ) : (\n                    <FormattedMessage\n                        id='user.settings.notifications.autoResponderDisabled'\n                        defaultMessage='Disabled'\n                    />\n                );\n\n                autoResponderSection = (\n                    <SettingItemMin\n                        title={\n                            <FormattedMessage\n                                id='user.settings.notifications.autoResponder'\n                                defaultMessage='Automatic Direct Message Replies'\n                            />\n                        }\n                        width='medium'\n                        describe={describe}\n                        section={'auto-responder'}\n                        updateSection={this.handleUpdateSection}\n                    />\n                );\n            }\n        }\n\n        const pushNotificationSection = this.createPushNotificationSection();\n\n        return (\n            <div id='notificationSettings'>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.notifications.title'\n                            defaultMessage='Notification Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    ref='wrapper'\n                    className='user-settings'\n                >\n                    <h3\n                        id='notificationSettingsTitle'\n                        className='tab-header'\n                    >\n                        <FormattedMessage\n                            id='user.settings.notifications.header'\n                            defaultMessage='Notifications'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    <DesktopNotificationSettings\n                        activity={this.state.desktopActivity}\n                        sound={this.state.desktopSound}\n                        updateSection={this.handleUpdateSection}\n                        setParentState={this.setStateValue}\n                        submit={this.handleSubmit}\n                        saving={this.state.isSaving}\n                        cancel={this.handleCancel}\n                        error={this.state.serverError}\n                        active={this.props.activeSection === 'desktop'}\n                    />\n                    <div className='divider-light'/>\n                    <EmailNotificationSetting\n                        activeSection={this.props.activeSection}\n                        updateSection={this.handleUpdateSection}\n                        enableEmail={this.state.enableEmail === 'true'}\n                        onSubmit={this.handleSubmit}\n                        onCancel={this.handleCancel}\n                        onChange={this.handleEmailRadio}\n                        saving={this.state.isSaving}\n                        serverError={this.state.serverError}\n                    />\n                    <div className='divider-light'/>\n                    {pushNotificationSection}\n                    <div className='divider-light'/>\n                    {keysSection}\n                    <div className='divider-light'/>\n                    {commentsSection}\n                    <div className='divider-light'/>\n                    {autoResponderSection}\n                    <div className='divider-dark'/>\n                </div>\n            </div>\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateMe} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport UserSettingsNotifications from './user_settings_notifications.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const sendPushNotifications = config.SendPushNotifications === 'true';\n    const enableAutoResponder = config.ExperimentalEnableAutomaticReplies === 'true';\n\n    return {\n        sendPushNotifications,\n        enableAutoResponder,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({updateMe}, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsNotifications);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\ntype Props = {\n    onHide: () => void;\n    actions: {\n        getUserAudits: (userId: string, page?: number, perPage?: number) => void;\n    };\n    userAudits: any[];\n    currentUserId: string;\n}\n\ntype State = {\n    show: boolean;\n}\n\nexport default class AccessHistoryModal extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    public onShow = () => { // public for testing\n        this.props.actions.getUserAudits(this.props.currentUserId, 0, 200);\n    }\n\n    public onHide = () => { // public for testing\n        this.setState({show: false});\n    }\n\n    public componentDidMount() {\n        this.onShow();\n    }\n\n    public render() {\n        let content;\n        if (this.props.userAudits.length === 0) {\n            content = (<LoadingScreen/>);\n        } else {\n            content = (\n                <AuditTable\n                    audits={this.props.userAudits}\n                    showIp={true}\n                    showSession={true}\n                />\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='accessHistoryModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='accessHistoryModalLabel'\n                    >\n                        <FormattedMessage\n                            id='access_history.title'\n                            defaultMessage='Access History'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {getUserAudits} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserAudits as getCurrentUserAudits} from 'mattermost-redux/selectors/entities/users';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport AccessHistoryModal from './access_history_modal';\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        userAudits: getCurrentUserAudits(state) || [],\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getUserAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AccessHistoryModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\n\nimport {getMonthLong} from 'utils/i18n';\n\nexport default function MoreInfo({\n    locale,\n    currentSession,\n    moreInfo,\n    handleMoreInfo,\n}) {\n    if (moreInfo) {\n        const firstAccessTime = new Date(currentSession.create_at);\n\n        return (\n            <div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.firstTime'\n                        defaultMessage='First time active: {date}, {time}'\n                        values={{\n                            date: (\n                                <FormattedDate\n                                    value={firstAccessTime}\n                                    day='2-digit'\n                                    month={getMonthLong(locale)}\n                                    year='numeric'\n                                />\n                            ),\n                            time: (\n                                <FormattedTime\n                                    value={firstAccessTime}\n                                    hour='2-digit'\n                                    minute='2-digit'\n                                />\n                            ),\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.os'\n                        defaultMessage='OS: {os}'\n                        values={{\n                            os: currentSession.props.os,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.browser'\n                        defaultMessage='Browser: {browser}'\n                        values={{\n                            browser: currentSession.props.browser,\n                        }}\n                    />\n                </div>\n                <div>\n                    <FormattedMessage\n                        id='activity_log.sessionId'\n                        defaultMessage='Session ID: {id}'\n                        values={{\n                            id: currentSession.id,\n                        }}\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    return (\n        <a\n            className='theme'\n            href='#'\n            onClick={handleMoreInfo}\n        >\n            <FormattedMessage\n                id='activity_log.moreInfo'\n                defaultMessage='More info'\n            />\n        </a>\n    );\n}\n\nMoreInfo.propTypes = {\n    locale: PropTypes.string.isRequired,\n    currentSession: PropTypes.object.isRequired,\n    handleMoreInfo: PropTypes.func.isRequired,\n    moreInfo: PropTypes.bool.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {getMonthLong, t} from 'utils/i18n';\n\nimport MoreInfo from './more_info.jsx';\n\nexport default class ActivityLog extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The index of this instance within the list\n         */\n        index: PropTypes.number.isRequired,\n\n        /**\n         * The current locale of the user\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * The session that's to be displayed\n         */\n        currentSession: PropTypes.object.isRequired,\n\n        /**\n         * Function to revoke session\n         */\n        submitRevoke: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            moreInfo: false,\n        };\n    }\n\n    handleMoreInfo = () => {\n        this.setState({moreInfo: true});\n    }\n\n    submitRevoke = (e) => {\n        this.props.submitRevoke(this.props.currentSession.id, e);\n    }\n\n    isMobileSession = (session) => {\n        return session.device_id && (session.device_id.includes('apple') || session.device_id.includes('android'));\n    };\n\n    mobileSessionInfo = (session) => {\n        let deviceTypeId;\n        let deviceTypeMessage;\n        let devicePicture;\n        let deviceTitle;\n\n        if (session.device_id.includes('apple')) {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n            deviceTypeId = t('activity_log_modal.iphoneNativeClassicApp');\n            deviceTypeMessage = 'iPhone Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_APPLE_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.iphoneNativeApp');\n                deviceTypeMessage = 'iPhone Native App';\n            }\n        } else if (session.device_id.includes('android')) {\n            devicePicture = 'fa fa-android';\n            deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            deviceTypeId = t('activity_log_modal.androidNativeClassicApp');\n            deviceTypeMessage = 'Android Native Classic App';\n\n            if (session.device_id.includes(General.PUSH_NOTIFY_ANDROID_REACT_NATIVE)) {\n                deviceTypeId = t('activity_log_modal.androidNativeApp');\n                deviceTypeMessage = 'Android Native App';\n            }\n        }\n\n        return {\n            devicePicture,\n            deviceTitle,\n            devicePlatform: (\n                <FormattedMessage\n                    id={deviceTypeId}\n                    defaultMessage={deviceTypeMessage}\n                />\n            ),\n        };\n    };\n\n    render() {\n        const {\n            index,\n            locale,\n            currentSession,\n        } = this.props;\n\n        const lastAccessTime = new Date(currentSession.last_activity_at);\n        let devicePlatform = currentSession.props.platform;\n        let devicePicture = '';\n        let deviceTitle = '';\n\n        if (currentSession.props.platform === 'Windows') {\n            devicePicture = 'fa fa-windows';\n            deviceTitle = localizeMessage('device_icons.windows', 'Windows Icon');\n        } else if (this.isMobileSession(currentSession)) {\n            const sessionInfo = this.mobileSessionInfo(currentSession);\n            devicePicture = sessionInfo.devicePicture;\n            devicePlatform = sessionInfo.devicePlatform;\n        } else if (currentSession.props.platform === 'Macintosh' ||\n            currentSession.props.platform === 'iPhone') {\n            devicePicture = 'fa fa-apple';\n            deviceTitle = localizeMessage('device_icons.apple', 'Apple Icon');\n        } else if (currentSession.props.platform === 'Linux') {\n            if (currentSession.props.os.indexOf('Android') >= 0) {\n                devicePlatform = (\n                    <FormattedMessage\n                        id='activity_log_modal.android'\n                        defaultMessage='Android'\n                    />\n                );\n                devicePicture = 'fa fa-android';\n                deviceTitle = localizeMessage('device_icons.android', 'Android Icon');\n            } else {\n                devicePicture = 'fa fa-linux';\n                deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n            }\n        } else if (currentSession.props.os.indexOf('Linux') !== -1) {\n            devicePicture = 'fa fa-linux';\n            deviceTitle = localizeMessage('device_icons.linux', 'Linux Icon');\n        }\n\n        if (currentSession.props.browser.indexOf('Desktop App') !== -1) {\n            devicePlatform = (\n                <FormattedMessage\n                    id='activity_log_modal.desktop'\n                    defaultMessage='Native Desktop App'\n                />\n            );\n        }\n\n        return (\n            <div\n                key={'activityLogEntryKey' + index}\n                className='activity-log__table'\n            >\n                <div className='activity-log__report'>\n                    <div className='report__platform'>\n                        <i\n                            className={devicePicture}\n                            title={deviceTitle}\n                        />{devicePlatform}\n                    </div>\n                    <div className='report__info'>\n                        <div>\n                            <FormattedMessage\n                                id='activity_log.lastActivity'\n                                defaultMessage='Last activity: {date}, {time}'\n                                values={{\n                                    date: (\n                                        <FormattedDate\n                                            value={lastAccessTime}\n                                            day='2-digit'\n                                            month={getMonthLong(locale)}\n                                            year='numeric'\n                                        />\n                                    ),\n                                    time: (\n                                        <FormattedTime\n                                            value={lastAccessTime}\n                                            hour='2-digit'\n                                            minute='2-digit'\n                                        />\n                                    ),\n                                }}\n                            />\n                        </div>\n                        <MoreInfo\n                            locale={locale}\n                            currentSession={currentSession}\n                            moreInfo={this.state.moreInfo}\n                            handleMoreInfo={this.handleMoreInfo}\n                        />\n                    </div>\n                </div>\n                <div className='activity-log__action'>\n                    <button\n                        onClick={this.submitRevoke}\n                        className='btn btn-primary'\n                    >\n                        <FormattedMessage\n                            id='activity_log.logout'\n                            defaultMessage='Log Out'\n                        />\n                    </button>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ActivityLog from 'components/activity_log_modal/components/activity_log.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nexport default class ActivityLogModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * The current user id\n         */\n        currentUserId: PropTypes.string.isRequired,\n\n        /**\n         * Current user's sessions\n         */\n        sessions: PropTypes.oneOfType([\n            PropTypes.array,\n            PropTypes.object,\n        ]).isRequired,\n\n        /**\n         * Current user's locale\n         */\n        locale: PropTypes.string.isRequired,\n\n        /**\n         * Function that's called when user closes the modal\n         */\n        onHide: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n\n            /**\n             * Function to refresh sessions from server\n             */\n            getSessions: PropTypes.func.isRequired,\n\n            /**\n             * Function to revoke a particular session\n             */\n            revokeSession: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            show: true,\n        };\n    }\n\n    submitRevoke = (altId, e) => {\n        e.preventDefault();\n        var modalContent = $(e.target).closest('.modal-content');\n        modalContent.addClass('animation--highlight');\n        setTimeout(() => {\n            modalContent.removeClass('animation--highlight');\n        }, 1500);\n        this.props.actions.revokeSession(this.props.currentUserId, altId).then(() => {\n            this.props.actions.getSessions(this.props.currentUserId);\n        });\n    }\n\n    onShow = () => {\n        this.props.actions.getSessions(this.props.currentUserId);\n    }\n\n    onHide = () => {\n        this.setState({show: false});\n    }\n\n    componentDidMount() {\n        this.onShow();\n    }\n\n    render() {\n        let content;\n        if (this.props.sessions.loading) {\n            content = <LoadingScreen/>;\n        } else {\n            const activityList = this.props.sessions.reduce((array, currentSession, index) => {\n                if (currentSession.props.type === 'UserAccessToken') {\n                    return array;\n                }\n\n                array.push(\n                    <ActivityLog\n                        key={currentSession.id}\n                        index={index}\n                        locale={this.props.locale}\n                        currentSession={currentSession}\n                        submitRevoke={this.submitRevoke}\n                    />\n                );\n                return array;\n            }, []);\n\n            content = <form role='form'>{activityList}</form>;\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal modal--scroll'\n                show={this.state.show}\n                onHide={this.onHide}\n                onExited={this.props.onHide}\n                bsSize='large'\n                role='dialog'\n                aria-labelledby='activityLogModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='activityLogModalLabel'\n                    >\n                        <FormattedMessage\n                            id='activity_log.activeSessions'\n                            defaultMessage='Active Sessions'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <p className='session-help-text'>\n                        <FormattedMessage\n                            id='activity_log.sessionsDescription'\n                            defaultMessage=\"Sessions are created when you log in to a new browser on a device. Sessions let you use Mattermost without having to log in again for a time period specified by the System Admin. If you want to log out sooner, use the 'Logout' button below to end a session.\"\n                        />\n                    </p>\n                    {content}\n                </Modal.Body>\n                <Modal.Footer className='modal-footer--invisible'>\n                    <button\n                        id='closeModalButton'\n                        type='button'\n                        className='btn btn-link'\n                    >\n                        <FormattedMessage\n                            id='general_button.close'\n                            defaultMessage='Close'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getSessions, revokeSession} from 'mattermost-redux/actions/users';\nimport {getCurrentUserId, getUserSessions} from 'mattermost-redux/selectors/entities/users';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ActivityLogModal from './activity_log_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUserId: getCurrentUserId(state),\n        sessions: getUserSessions(state),\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getSessions,\n            revokeSession,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ActivityLogModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport {browserHistory} from 'utils/browser_history';\n\nconst SECTION_MFA = 'mfa';\n\nexport default class MfaSection extends React.PureComponent {\n    static propTypes = {\n        active: PropTypes.bool.isRequired,\n\n        // Whether or not the current user has MFA enabled\n        mfaActive: PropTypes.bool.isRequired,\n\n        // Whether or not the current user can enable MFA based on their authentication type and the server's settings\n        mfaAvailable: PropTypes.bool.isRequired,\n\n        // Whether or not this server enforces that all users have MFA\n        mfaEnforced: PropTypes.bool.isRequired,\n\n        updateSection: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            deactivateMfa: PropTypes.func.isRequired,\n        }),\n    };\n\n    state = {\n        serverError: null,\n    };\n\n    setupMfa = (e) => {\n        e.preventDefault();\n\n        browserHistory.push('/mfa/setup');\n    };\n\n    removeMfa = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.deactivateMfa();\n\n        if (error) {\n            this.setState({\n                serverError: error.message,\n            });\n            return;\n        }\n\n        if (this.props.mfaEnforced) {\n            browserHistory.push('/mfa/setup');\n            return;\n        }\n\n        this.props.updateSection('');\n        this.setState({\n            serverError: null,\n        });\n    };\n\n    renderTitle = () => {\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.title'\n                defaultMessage='Multi-factor Authentication'\n            />\n        );\n    };\n\n    renderDescription = () => {\n        if (this.props.mfaActive) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.active'\n                    defaultMessage='Active'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.security.inactive'\n                defaultMessage='Inactive'\n            />\n        );\n    };\n\n    renderContent = () => {\n        let content;\n\n        if (this.props.mfaActive) {\n            let buttonText;\n\n            if (this.props.mfaEnforced) {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.reset'\n                        defaultMessage='Reset MFA on Account'\n                    />\n                );\n            } else {\n                buttonText = (\n                    <FormattedMessage\n                        id='user.settings.mfa.remove'\n                        defaultMessage='Remove MFA from Account'\n                    />\n                );\n            }\n\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.removeMfa}\n                >\n                    {buttonText}\n                </a>\n            );\n        } else {\n            content = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.setupMfa}\n                >\n                    <FormattedMessage\n                        id='user.settings.mfa.add'\n                        defaultMessage='Add MFA to Account'\n                    />\n                </a>\n            );\n        }\n\n        return (\n            <div className='padding-top'>\n                {content}\n                <br/>\n            </div>\n        );\n    };\n\n    renderHelpText = () => {\n        if (this.props.mfaActive) {\n            if (this.props.mfaEnforced) {\n                return (\n                    <FormattedMessage\n                        id='user.settings.mfa.requiredHelp'\n                        defaultMessage='Multi-factor authentication is required on this server. Resetting is only recommended when you need to switch code generation to a new mobile device. You will be required to set it up again immediately.'\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='user.settings.mfa.removeHelp'\n                    defaultMessage='Removing multi-factor authentication means you will no longer require a phone-based passcode to sign-in to your account.'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.mfa.addHelp'\n                defaultMessage='Adding multi-factor authentication will make your account more secure by requiring a code from your mobile phone each time you sign in.'\n            />\n        );\n    };\n\n    render() {\n        const title = this.renderTitle();\n\n        if (!this.props.mfaAvailable) {\n            return null;\n        }\n\n        if (!this.props.active) {\n            return (\n                <SettingItemMin\n                    title={title}\n                    describe={this.renderDescription()}\n                    section={SECTION_MFA}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMax\n                title={title}\n                inputs={this.renderContent()}\n                extraInfo={this.renderHelpText()}\n                serverError={this.state.serverError}\n                updateSection={this.props.updateSection}\n                width='medium'\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {deactivateMfa} from 'actions/views/mfa';\nimport Constants from 'utils/constants';\n\nimport MfaSection from './mfa_section';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n\n    const mfaLicensed = license && license.IsLicensed === 'true' && license.MFA === 'true';\n\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const mfaEnforced = mfaLicensed && config.EnforceMultifactorAuthentication === 'true';\n\n    const user = getCurrentUser(state);\n\n    let mfaActive = false;\n    let mfaAvailable = false;\n    if (user) {\n        mfaActive = user.mfa_active;\n        mfaAvailable = mfaEnabled && (user.auth_service === '' || user.auth_service === Constants.LDAP_SERVICE);\n    }\n\n    return {\n        mfaActive,\n        mfaAvailable,\n        mfaEnforced,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deactivateMfa,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MfaSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\nimport Constants from 'utils/constants';\nimport {isMobile} from 'utils/user_agent';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport SaveButton from 'components/save_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nconst SECTION_TOKENS = 'tokens';\nconst TOKEN_CREATING = 'creating';\nconst TOKEN_CREATED = 'created';\nconst TOKEN_NOT_CREATING = 'not_creating';\n\nexport default class UserAccessTokenSection extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        active: PropTypes.bool,\n        updateSection: PropTypes.func,\n        userAccessTokens: PropTypes.object,\n        setRequireConfirm: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n            createUserAccessToken: PropTypes.func.isRequired,\n            revokeUserAccessToken: PropTypes.func.isRequired,\n            enableUserAccessToken: PropTypes.func.isRequired,\n            disableUserAccessToken: PropTypes.func.isRequired,\n            clearUserAccessTokens: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        active: false,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showConfirmModal: false,\n            newToken: null,\n            tokenCreationState: TOKEN_NOT_CREATING,\n            tokenError: '',\n            serverError: null,\n            saving: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.clearUserAccessTokens();\n        const userId = this.props.user ? this.props.user.id : '';\n        this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (!nextProps.active && this.props.active) {\n            this.setState({\n                showConfirmModal: false,\n                newToken: null,\n                tokenCreationState: TOKEN_NOT_CREATING,\n                tokenError: '',\n                serverError: null,\n                saving: false,\n            });\n        }\n    }\n\n    startCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_CREATING});\n    }\n\n    stopCreatingToken = () => {\n        this.setState({tokenCreationState: TOKEN_NOT_CREATING, saving: false});\n    }\n\n    handleCreateToken = async () => {\n        this.handleCancelConfirm();\n\n        const description = this.refs.newtokendescription ? this.refs.newtokendescription.value : '';\n\n        if (description === '') {\n            this.setState({tokenError: Utils.localizeMessage('user.settings.tokens.nameRequired', 'Please enter a description.')});\n            return;\n        }\n\n        this.setState({tokenError: '', saving: true});\n        this.props.setRequireConfirm(true, this.confirmCopyToken);\n\n        const userId = this.props.user ? this.props.user.id : '';\n        const {data, error} = await this.props.actions.createUserAccessToken(userId, description);\n\n        if (data && this.state.tokenCreationState === TOKEN_CREATING) {\n            this.setState({tokenCreationState: TOKEN_CREATED, newToken: data, saving: false});\n        } else if (error) {\n            this.setState({serverError: error.message, saving: false});\n        }\n    }\n\n    confirmCopyToken = (confirmAction) => {\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyTitle'\n                    defaultMessage='Have you copied your token?'\n                />\n            ),\n            confirmMessage: (state) => (\n                <div>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCopyMessage'\n                        defaultMessage=\"Make sure you have copied and saved the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    {state.tokenCreationState === TOKEN_CREATING ? (\n                        <div>\n                            <strong className='word-break--all'>\n                                <FormattedMessage\n                                    id='user.settings.tokens.token'\n                                    defaultMessage='Access Token: '\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='user.settings.tokens.tokenLoading'\n                                defaultMessage='Loading...'\n                            />\n                        </div>\n                    ) : (\n                        <strong className='word-break--all'>\n                            <FormattedMessage\n                                id='user.settings.tokens.token'\n                                defaultMessage='Access Token: '\n                            />\n                            {state.newToken.token}\n                        </strong>\n                    )}\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCopyButton'\n                    defaultMessage='Yes, I have copied the token'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCancelConfirm();\n                confirmAction();\n            },\n            confirmHideCancel: true,\n        });\n    }\n\n    handleCancelConfirm = () => {\n        this.setState({\n            showConfirmModal: false,\n            confirmTitle: null,\n            confirmMessage: null,\n            confirmButton: null,\n            confirmComplete: null,\n            confirmHideCancel: false,\n        });\n    }\n\n    confirmCreateToken = () => {\n        if (!UserUtils.isSystemAdmin(this.props.user.roles)) {\n            this.handleCreateToken();\n            return;\n        }\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateTitle'\n                    defaultMessage='Create System Admin Personal Access Token'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedHTMLMessage\n                        id='user.settings.tokens.confirmCreateMessage'\n                        defaultMessage='You are generating a personal access token with System Admin permissions. Are you sure want to create this token?'\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmCreateButton'\n                    defaultMessage='Yes, Create'\n                />\n            ),\n            confirmComplete: () => {\n                this.handleCreateToken();\n                trackEvent('settings', 'system_admin_create_user_access_token');\n            },\n        });\n    }\n\n    saveTokenKeyPress = (e) => {\n        if (Utils.isKeyPressed(e, Constants.KeyCodes.ENTER)) {\n            this.confirmCreateToken();\n        }\n    }\n\n    confirmRevokeToken = (tokenId) => {\n        const token = this.props.userAccessTokens[tokenId];\n\n        this.setState({\n            showConfirmModal: true,\n            confirmTitle: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteTitle'\n                    defaultMessage='Delete Token?'\n                />\n            ),\n            confirmMessage: () => (\n                <div className='alert alert-danger'>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.confirmDeleteMessage'\n                        defaultMessage='Any integrations using this token will no longer be able to access the Mattermost API. You cannot undo this action. \\n \\nAre you sure want to delete the **{description}** token?'\n                        values={{\n                            description: token.description,\n                        }}\n                    />\n                </div>\n            ),\n            confirmButton: (\n                <FormattedMessage\n                    id='user.settings.tokens.confirmDeleteButton'\n                    defaultMessage='Yes, Delete'\n                />\n            ),\n            confirmComplete: () => {\n                this.revokeToken(tokenId);\n                trackEvent('settings', 'revoke_user_access_token');\n            },\n        });\n    }\n\n    revokeToken = async (tokenId) => {\n        const {error} = await this.props.actions.revokeUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n        this.handleCancelConfirm();\n    }\n\n    activateToken = async (tokenId) => {\n        const {error} = await this.props.actions.enableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'activate_user_access_token');\n        }\n    }\n\n    deactivateToken = async (tokenId) => {\n        const {error} = await this.props.actions.disableUserAccessToken(tokenId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            trackEvent('settings', 'deactivate_user_access_token');\n        }\n    }\n\n    render() {\n        let tokenListClass = '';\n\n        if (!this.props.active) {\n            const describe = Utils.localizeMessage('user.settings.tokens.clickToEdit', \"Click 'Edit' to manage your personal access tokens\");\n\n            return (\n                <SettingItemMin\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    describe={describe}\n                    section={SECTION_TOKENS}\n                    updateSection={this.props.updateSection}\n                />\n            );\n        }\n\n        const tokenList = [];\n        Object.values(this.props.userAccessTokens).forEach((token) => {\n            if (this.state.newToken && this.state.newToken.id === token.id) {\n                return;\n            }\n\n            let activeLink;\n            let activeStatus;\n\n            if (token.is_active) {\n                activeLink = (\n                    <a\n                        name={token.id + '_deactivate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.deactivateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivate'\n                            defaultMessage='Disable'\n                        />\n                    </a>);\n            } else {\n                activeStatus = (\n                    <span className='has-error setting-box__inline-error'>\n                        <FormattedMessage\n                            id='user.settings.tokens.deactivatedWarning'\n                            defaultMessage='(Disabled)'\n                        />\n                    </span>\n                );\n                activeLink = (\n                    <a\n                        name={token.id + '_activate'}\n                        href='#'\n                        onClick={(e) => {\n                            e.preventDefault();\n                            this.activateToken(token.id);\n                        }}\n                    >\n                        <FormattedMessage\n                            id='user.settings.tokens.activate'\n                            defaultMessage='Enable'\n                        />\n                    </a>\n                );\n            }\n\n            tokenList.push(\n                <div\n                    key={token.id}\n                    className='setting-box__item'\n                >\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenDesc'\n                            defaultMessage='Token Description: '\n                        />\n                        {token.description}\n                        {activeStatus}\n                    </div>\n                    <div className='setting-box__token-id whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.tokenId'\n                            defaultMessage='Token ID: '\n                        />\n                        {token.id}\n                    </div>\n                    <div>\n                        {activeLink}\n                        {' - '}\n                        <a\n                            name={token.id + '_delete'}\n                            href='#'\n                            onClick={(e) => {\n                                e.preventDefault();\n                                this.confirmRevokeToken(token.id);\n                            }}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                    <hr className='margin-bottom margin-top x2'/>\n                </div>\n            );\n        });\n\n        let noTokenText;\n        if (tokenList.length === 0) {\n            noTokenText = (\n                <FormattedMessage\n                    key='notokens'\n                    id='user.settings.tokens.userAccessTokensNone'\n                    defaultMessage='No personal access tokens.'\n                />\n            );\n        }\n\n        let extraInfo;\n        if (isMobile()) {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description_mobile'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication). Create new tokens on your desktop.'\n                    />\n                </span>\n            );\n        } else {\n            extraInfo = (\n                <span>\n                    <FormattedMarkdownMessage\n                        id='user.settings.tokens.description'\n                        defaultMessage='[Personal access tokens](!https://about.mattermost.com/default-user-access-tokens) function similarly to session tokens and can be used by integrations to [authenticate against the REST API](!https://about.mattermost.com/default-api-authentication).'\n                    />\n                </span>\n            );\n        }\n\n        let newTokenSection;\n        if (this.state.tokenCreationState === TOKEN_CREATING) {\n            newTokenSection = (\n                <div className='padding-left x2'>\n                    <div className='row'>\n                        <label className='col-sm-auto control-label padding-right x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.name'\n                                defaultMessage='Token Description: '\n                            />\n                        </label>\n                        <div className='col-sm-5'>\n                            <input\n                                autoFocus={true}\n                                ref='newtokendescription'\n                                className='form-control'\n                                type='text'\n                                maxLength={64}\n                                onKeyPress={this.saveTokenKeyPress}\n                            />\n                        </div>\n                    </div>\n                    <div>\n                        <div className='padding-top x2'>\n                            <FormattedMessage\n                                id='user.settings.tokens.nameHelp'\n                                defaultMessage='Enter a description for your token to remember what it does.'\n                            />\n                        </div>\n                        <div>\n                            <label\n                                id='clientError'\n                                className='has-error margin-top margin-bottom'\n                            >\n                                {this.state.tokenError}\n                            </label>\n                        </div>\n                        <SaveButton\n                            btnClass='btn-primary'\n                            savingMessage={\n                                <FormattedMessage\n                                    id='user.settings.tokens.save'\n                                    defaultMessage='Save'\n                                />\n                            }\n                            saving={this.state.saving}\n                            onClick={this.confirmCreateToken}\n                        />\n                        <button\n                            className='btn btn-link'\n                            onClick={this.stopCreatingToken}\n                        >\n                            <FormattedMessage\n                                id='user.settings.tokens.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                    </div>\n                </div>\n            );\n        } else if (this.state.tokenCreationState === TOKEN_CREATED) {\n            if (tokenList.length === 0) {\n                tokenListClass = ' hidden';\n            }\n\n            newTokenSection = (\n                <div\n                    className='alert alert-warning'\n                >\n                    <WarningIcon additionalClassName='margin-right'/>\n                    <FormattedMessage\n                        id='user.settings.tokens.copy'\n                        defaultMessage=\"Please copy the access token below. You won't be able to see it again!\"\n                    />\n                    <br/>\n                    <br/>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.name'\n                            defaultMessage='Token Description: '\n                        />\n                        {this.state.newToken.description}\n                    </div>\n                    <div className='whitespace--nowrap overflow--ellipsis'>\n                        <FormattedMessage\n                            id='user.settings.tokens.id'\n                            defaultMessage='Token ID: '\n                        />\n                        {this.state.newToken.id}\n                    </div>\n                    <strong className='word-break--all'>\n                        <FormattedMessage\n                            id='user.settings.tokens.token'\n                            defaultMessage='Access Token: '\n                        />\n                        {this.state.newToken.token}\n                    </strong>\n                </div>\n            );\n        } else {\n            newTokenSection = (\n                <a\n                    className='btn btn-primary'\n                    href='#'\n                    onClick={this.startCreatingToken}\n                >\n                    <FormattedMessage\n                        id='user.settings.tokens.create'\n                        defaultMessage='Create Token'\n                    />\n                </a>\n            );\n        }\n\n        const inputs = [];\n        inputs.push(\n            <div\n                key='tokensSetting'\n                className='padding-top'\n            >\n                <div key='tokenList'>\n                    <div className={'alert alert-transparent' + tokenListClass}>\n                        {tokenList}\n                        {noTokenText}\n                    </div>\n                    {newTokenSection}\n                </div>\n            </div>\n        );\n\n        return (\n            <div>\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.tokens.title', 'Personal Access Tokens')}\n                    inputs={inputs}\n                    extraInfo={extraInfo}\n                    infoPosition='top'\n                    serverError={this.state.serverError}\n                    updateSection={this.props.updateSection}\n                    width='full'\n                    saving={this.state.saving}\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n                <ConfirmModal\n                    title={this.state.confirmTitle}\n                    message={this.state.confirmMessage ? this.state.confirmMessage(this.state) : null}\n                    confirmButtonText={this.state.confirmButton}\n                    show={this.state.showConfirmModal}\n                    onConfirm={this.state.confirmComplete || (() => null)}\n                    onCancel={this.handleCancelConfirm}\n                    hideCancel={this.state.confirmHideCancel}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {clearUserAccessTokens, createUserAccessToken, getUserAccessTokensForUser, revokeUserAccessToken, enableUserAccessToken, disableUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport UserAccessTokenSection from './user_access_token_section.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokens: state.entities.users.myUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n            createUserAccessToken,\n            revokeUserAccessToken,\n            enableUserAccessToken,\n            disableUserAccessToken,\n            clearUserAccessTokens,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserAccessTokenSection);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport icon50 from 'images/icon50x50.png';\nimport AccessHistoryModal from 'components/access_history_modal';\nimport ActivityLogModal from 'components/activity_log_modal';\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport MfaSection from './mfa_section';\nimport UserAccessTokenSection from './user_access_token_section';\n\nconst SECTION_MFA = 'mfa';\nconst SECTION_PASSWORD = 'password';\nconst SECTION_SIGNIN = 'signin';\nconst SECTION_APPS = 'apps';\nconst SECTION_TOKENS = 'tokens';\n\nexport default class SecurityTab extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Set if access tokens are enabled and this user can use them\n         */\n        canUseAccessTokens: PropTypes.bool,\n\n        // Whether or not OAuth applications are enabled.\n        enableOAuthServiceProvider: PropTypes.bool,\n\n        // Whether or not sign-up with email is enabled.\n        enableSignUpWithEmail: PropTypes.bool,\n\n        // Whether or not sign-up with GitLab is enabled.\n        enableSignUpWithGitLab: PropTypes.bool,\n\n        // Whether or not sign-up with Google is enabled.\n        enableSignUpWithGoogle: PropTypes.bool,\n\n        // Whether or not sign-up with LDAP is enabled.\n        enableLdap: PropTypes.bool,\n\n        // Whether or not sign-up with SAML is enabled.\n        enableSaml: PropTypes.bool,\n\n        // Whether or not sign-up with Office 365 is enabled.\n        enableSignUpWithOffice365: PropTypes.bool,\n\n        // Whether or not the experimental authentication transfer is enabled.\n        experimentalEnableAuthenticationTransfer: PropTypes.bool,\n\n        passwordConfig: PropTypes.object,\n        militaryTime: PropTypes.bool,\n\n        actions: PropTypes.shape({\n            getMe: PropTypes.func.isRequired,\n            updateUserPassword: PropTypes.func.isRequired,\n            getAuthorizedOAuthApps: PropTypes.func.isRequired,\n            deauthorizeOAuthApp: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {},\n        activeSection: '',\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getDefaultState();\n    }\n\n    getDefaultState() {\n        return {\n            currentPassword: '',\n            newPassword: '',\n            confirmPassword: '',\n            passwordError: '',\n            serverError: '',\n            tokenError: '',\n            authService: this.props.user.auth_service,\n            savingPassword: false,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.enableOAuthServiceProvider) {\n            this.loadAuthorizedOAuthApps();\n        }\n    }\n\n    loadAuthorizedOAuthApps = async () => {\n        const {data, error} = await this.props.actions.getAuthorizedOAuthApps();\n        if (data) {\n            this.setState({authorizedApps: data, serverError: null}); //eslint-disable-line react/no-did-mount-set-state\n        } else if (error) {\n            this.setState({serverError: error.message}); //eslint-disable-line react/no-did-mount-set-state\n        }\n    }\n\n    submitPassword = async () => {\n        const user = this.props.user;\n        const currentPassword = this.state.currentPassword;\n        const newPassword = this.state.newPassword;\n        const confirmPassword = this.state.confirmPassword;\n\n        if (currentPassword === '') {\n            this.setState({passwordError: Utils.localizeMessage('user.settings.security.currentPasswordError', 'Please enter your current password.'), serverError: ''});\n            return;\n        }\n\n        const {valid, error} = Utils.isValidPassword(newPassword, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({\n                passwordError: error,\n                serverError: '',\n            });\n            return;\n        }\n\n        if (newPassword !== confirmPassword) {\n            const defaultState = Object.assign(this.getDefaultState(), {passwordError: Utils.localizeMessage('user.settings.security.passwordMatchError', 'The new passwords you entered do not match.'), serverError: ''});\n            this.setState(defaultState);\n            return;\n        }\n\n        this.setState({savingPassword: true});\n\n        const {data, error: err} = await this.props.actions.updateUserPassword(\n            user.id,\n            currentPassword,\n            newPassword\n        );\n        if (data) {\n            this.props.updateSection('');\n            this.props.actions.getMe();\n            this.setState(this.getDefaultState());\n        } else if (err) {\n            const state = this.getDefaultState();\n            if (err.message) {\n                state.serverError = err.message;\n            } else {\n                state.serverError = err;\n            }\n            state.passwordError = '';\n            this.setState(state);\n        }\n    }\n\n    updateCurrentPassword = (e) => {\n        this.setState({currentPassword: e.target.value});\n    }\n\n    updateNewPassword = (e) => {\n        this.setState({newPassword: e.target.value});\n    }\n\n    updateConfirmPassword = (e) => {\n        this.setState({confirmPassword: e.target.value});\n    }\n\n    deauthorizeApp = async (e) => {\n        e.preventDefault();\n\n        const appId = e.currentTarget.getAttribute('data-app');\n\n        const {data, error} = await this.props.actions.deauthorizeOAuthApp(appId);\n        if (data) {\n            const authorizedApps = this.state.authorizedApps.filter((app) => {\n                return app.id !== appId;\n            });\n            this.setState({authorizedApps, serverError: null});\n        } else if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleUpdateSection = (section) => {\n        if (section) {\n            this.props.updateSection(section);\n        } else {\n            switch (this.props.activeSection) {\n            case SECTION_MFA:\n            case SECTION_SIGNIN:\n            case SECTION_TOKENS:\n            case SECTION_APPS:\n                this.setState({\n                    serverError: null,\n                });\n                break;\n            case SECTION_PASSWORD:\n                this.setState({\n                    currentPassword: '',\n                    newPassword: '',\n                    confirmPassword: '',\n                    serverError: null,\n                    passwordError: null,\n                });\n                break;\n            default:\n            }\n\n            this.props.updateSection('');\n        }\n    }\n\n    createPasswordSection = () => {\n        if (this.props.activeSection === SECTION_PASSWORD) {\n            const inputs = [];\n            let submit;\n\n            if (this.props.user.auth_service === '') {\n                submit = this.submitPassword;\n\n                inputs.push(\n                    <div\n                        key='currentPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.currentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='currentPassword'\n                                autoFocus={true}\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateCurrentPassword}\n                                value={this.state.currentPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.currentPassword', 'Current Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='newPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.newPassword'\n                                defaultMessage='New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='newPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateNewPassword}\n                                value={this.state.newPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.newPassword', 'New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n                inputs.push(\n                    <div\n                        key='retypeNewPasswordUpdateForm'\n                        className='form-group'\n                    >\n                        <label className='col-sm-5 control-label'>\n                            <FormattedMessage\n                                id='user.settings.security.retypePassword'\n                                defaultMessage='Retype New Password'\n                            />\n                        </label>\n                        <div className='col-sm-7'>\n                            <input\n                                id='confirmPassword'\n                                className='form-control'\n                                type='password'\n                                onChange={this.updateConfirmPassword}\n                                value={this.state.confirmPassword}\n                                aria-label={Utils.localizeMessage('user.settings.security.retypePassword', 'Retype New Password')}\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGitlabCantUpdate'\n                                defaultMessage='Login occurs through GitLab. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordLdapCantUpdate'\n                                defaultMessage='Login occurs through AD/LDAP. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordSamlCantUpdate'\n                                defaultMessage='This field is handled through your login provider. If you want to change it, you need to do so through your login provider.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordGoogleCantUpdate'\n                                defaultMessage='Login occurs through Google Apps. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n                inputs.push(\n                    <div\n                        key='oauthEmailInfo'\n                        className='form-group'\n                    >\n                        <div className='padding-bottom x2'>\n                            <FormattedMessage\n                                id='user.settings.security.passwordOffice365CantUpdate'\n                                defaultMessage='Login occurs through Office 365. Password cannot be updated.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.security.password'\n                            defaultMessage='Password'\n                        />\n                    }\n                    inputs={inputs}\n                    submit={submit}\n                    saving={this.state.savingPassword}\n                    serverError={this.state.serverError}\n                    clientError={this.state.passwordError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe;\n\n        if (this.props.user.auth_service === '') {\n            const d = new Date(this.props.user.last_password_update);\n\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.lastUpdated'\n                    defaultMessage='Last updated {date} at {time}'\n                    values={{\n                        date: (\n                            <FormattedDate\n                                value={d}\n                                day='2-digit'\n                                month='short'\n                                year='numeric'\n                            />\n                        ),\n                        time: (\n                            <FormattedTime\n                                value={d}\n                                hour12={!this.props.militaryTime}\n                                hour='2-digit'\n                                minute='2-digit'\n                            />\n                        ),\n                    }}\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGitlab'\n                    defaultMessage='Login done through GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginLdap'\n                    defaultMessage='Login done through AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginSaml'\n                    defaultMessage='Login done through SAML'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginGoogle'\n                    defaultMessage='Login done through Google Apps'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.loginOffice365'\n                    defaultMessage='Login done through Office 365'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.security.password'\n                        defaultMessage='Password'\n                    />\n                }\n                describe={describe}\n                section={SECTION_PASSWORD}\n                updateSection={this.handleUpdateSection}\n                focused={true}\n            />\n        );\n    }\n\n    createSignInSection = () => {\n        const user = this.props.user;\n\n        if (this.props.activeSection === SECTION_SIGNIN) {\n            let emailOption;\n            let gitlabOption;\n            let googleOption;\n            let office365Option;\n            let ldapOption;\n            let samlOption;\n\n            if (user.auth_service === '') {\n                if (this.props.enableSignUpWithGitLab) {\n                    gitlabOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GITLAB_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGitlab'\n                                    defaultMessage='Switch to Using GitLab SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithGoogle) {\n                    googleOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.GOOGLE_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchGoogle'\n                                    defaultMessage='Switch to Using Google SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSignUpWithOffice365) {\n                    office365Option = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.OFFICE365_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchOffice365'\n                                    defaultMessage='Switch to Using Office 365 SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableLdap) {\n                    ldapOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_ldap?email=' + encodeURIComponent(user.email)}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchLdap'\n                                    defaultMessage='Switch to Using AD/LDAP'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n\n                if (this.props.enableSaml) {\n                    samlOption = (\n                        <div className='padding-bottom x2'>\n                            <Link\n                                className='btn btn-primary'\n                                to={'/claim/email_to_oauth?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service + '&new_type=' + Constants.SAML_SERVICE}\n                            >\n                                <FormattedMessage\n                                    id='user.settings.security.switchSaml'\n                                    defaultMessage='Switch to Using SAML SSO'\n                                />\n                            </Link>\n                            <br/>\n                        </div>\n                    );\n                }\n            } else if (this.props.enableSignUpWithEmail) {\n                let link;\n                if (user.auth_service === Constants.LDAP_SERVICE) {\n                    link = '/claim/ldap_to_email?email=' + encodeURIComponent(user.email);\n                } else {\n                    link = '/claim/oauth_to_email?email=' + encodeURIComponent(user.email) + '&old_type=' + user.auth_service;\n                }\n\n                emailOption = (\n                    <div className='padding-bottom x2'>\n                        <Link\n                            className='btn btn-primary'\n                            to={link}\n                        >\n                            <FormattedMessage\n                                id='user.settings.security.switchEmail'\n                                defaultMessage='Switch to Using Email and Password'\n                            />\n                        </Link>\n                        <br/>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            inputs.push(\n                <div key='userSignInOption'>\n                    {emailOption}\n                    {gitlabOption}\n                    {googleOption}\n                    {office365Option}\n                    {ldapOption}\n                    {samlOption}\n                </div>\n            );\n\n            const extraInfo = (\n                <span>\n                    <FormattedMessage\n                        id='user.settings.security.oneSignin'\n                        defaultMessage='You may only have one sign-in method at a time. Switching sign-in method will send an email notifying you if the change was successful.'\n                    />\n                </span>\n            );\n\n            return (\n                <SettingItemMax\n                    title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                    extraInfo={extraInfo}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                />\n            );\n        }\n\n        let describe = (\n            <FormattedMessage\n                id='user.settings.security.emailPwd'\n                defaultMessage='Email and Password'\n            />\n        );\n        if (this.props.user.auth_service === Constants.GITLAB_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.gitlab'\n                    defaultMessage='GitLab'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.GOOGLE_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.google'\n                    defaultMessage='Google'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.OFFICE365_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.office365'\n                    defaultMessage='Office 365'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.LDAP_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.ldap'\n                    defaultMessage='AD/LDAP'\n                />\n            );\n        } else if (this.props.user.auth_service === Constants.SAML_SERVICE) {\n            describe = (\n                <FormattedMessage\n                    id='user.settings.security.saml'\n                    defaultMessage='SAML'\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.method', 'Sign-in Method')}\n                describe={describe}\n                section={SECTION_SIGNIN}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    createOAuthAppsSection = () => {\n        if (this.props.activeSection === SECTION_APPS) {\n            let apps;\n            if (this.state.authorizedApps && this.state.authorizedApps.length > 0) {\n                apps = this.state.authorizedApps.map((app) => {\n                    const homepage = (\n                        <a\n                            href={app.homepage}\n                            target='_blank'\n                            rel='noopener noreferrer'\n                        >\n                            {app.homepage}\n                        </a>\n                    );\n\n                    return (\n                        <div\n                            key={app.id}\n                            className='padding-bottom x2 authorized-app'\n                        >\n                            <div className='col-sm-10'>\n                                <div className='authorized-app__name'>\n                                    {app.name}\n                                    <span className='authorized-app__url'>\n                                        {' -'} {homepage}\n                                    </span>\n                                </div>\n                                <div className='authorized-app__description'>{app.description}</div>\n                                <div className='authorized-app__deauthorize'>\n                                    <a\n                                        href='#'\n                                        data-app={app.id}\n                                        onClick={this.deauthorizeApp}\n                                    >\n                                        <FormattedMessage\n                                            id='user.settings.security.deauthorize'\n                                            defaultMessage='Deauthorize'\n                                        />\n                                    </a>\n                                </div>\n                            </div>\n                            <div className='col-sm-2 pull-right'>\n                                <img\n                                    alt={app.name}\n                                    src={app.icon_url || icon50}\n                                />\n                            </div>\n                            <br/>\n                        </div>\n                    );\n                });\n            } else {\n                apps = (\n                    <div className='padding-bottom x2 authorized-app'>\n                        <div className='setting-list__hint'>\n                            <FormattedMessage\n                                id='user.settings.security.noApps'\n                                defaultMessage='No OAuth 2.0 Applications are authorized.'\n                            />\n                        </div>\n                    </div>\n                );\n            }\n\n            const inputs = [];\n            let wrapperClass;\n            let helpText;\n            if (Array.isArray(apps)) {\n                wrapperClass = 'authorized-apps__wrapper';\n\n                helpText = (\n                    <div className='authorized-apps__help'>\n                        <FormattedMessage\n                            id='user.settings.security.oauthAppsHelp'\n                            defaultMessage='Applications act on your behalf to access your data based on the permissions you grant them.'\n                        />\n                    </div>\n                );\n            }\n\n            inputs.push(\n                <div\n                    className={wrapperClass}\n                    key='authorizedApps'\n                >\n                    {apps}\n                </div>\n            );\n\n            const title = (\n                <div>\n                    <FormattedMessage\n                        id='user.settings.security.oauthApps'\n                        defaultMessage='OAuth 2.0 Applications'\n                    />\n                    {helpText}\n                </div>\n            );\n\n            return (\n                <SettingItemMax\n                    title={title}\n                    inputs={inputs}\n                    serverError={this.state.serverError}\n                    updateSection={this.handleUpdateSection}\n                    width='full'\n                    cancelButtonText={\n                        <FormattedMessage\n                            id='user.settings.security.close'\n                            defaultMessage='Close'\n                        />\n                    }\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={Utils.localizeMessage('user.settings.security.oauthApps', 'OAuth 2.0 Applications')}\n                describe={\n                    <FormattedMessage\n                        id='user.settings.security.oauthAppsDescription'\n                        defaultMessage=\"Click 'Edit' to manage your OAuth 2.0 Applications\"\n                    />\n                }\n                section={SECTION_APPS}\n                updateSection={this.handleUpdateSection}\n            />\n        );\n    }\n\n    render() {\n        const user = this.props.user;\n\n        const passwordSection = this.createPasswordSection();\n\n        let numMethods = 0;\n        numMethods = this.props.enableSignUpWithGitLab ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithGoogle ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSignUpWithOffice365 ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableLdap ? numMethods + 1 : numMethods;\n        numMethods = this.props.enableSaml ? numMethods + 1 : numMethods;\n\n        // If there are other sign-in methods and either email is enabled or the user's account is email, then allow switching\n        let signInSection;\n        if ((this.props.enableSignUpWithEmail || user.auth_service === '') &&\n            numMethods > 0 && this.props.experimentalEnableAuthenticationTransfer) {\n            signInSection = this.createSignInSection();\n        }\n\n        let oauthSection;\n        if (this.props.enableOAuthServiceProvider) {\n            oauthSection = this.createOAuthAppsSection();\n        }\n\n        let tokensSection;\n        if (this.props.canUseAccessTokens) {\n            tokensSection = (\n                <UserAccessTokenSection\n                    user={this.props.user}\n                    active={this.props.activeSection === SECTION_TOKENS}\n                    updateSection={this.handleUpdateSection}\n                    setRequireConfirm={this.props.setRequireConfirm}\n                />\n            );\n        }\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <FormattedMessage\n                        id='user.settings.security.close'\n                        defaultMessage='Close'\n                    >\n                        {(ariaLabel) => (\n                            <button\n                                type='button'\n                                className='close'\n                                data-dismiss='modal'\n                                aria-label={ariaLabel}\n                                onClick={this.props.closeModal}\n                            >\n                                <span aria-hidden='true'>{'×'}</span>\n                            </button>\n                        )}\n                    </FormattedMessage>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div className='modal-back'>\n                            <FormattedMessage\n                                id='generic_icons.collapse'\n                                defaultMessage='Collapse Icon'\n                            >\n                                {(title) => (\n                                    <i\n                                        className='fa fa-angle-left'\n                                        title={title}\n                                        onClick={this.props.collapseModal}\n                                    />\n                                )}\n                            </FormattedMessage>\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h4>\n                </div>\n                <div className='user-settings'>\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.security.title'\n                            defaultMessage='Security Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {passwordSection}\n                    <div className='divider-light'/>\n                    <MfaSection\n                        active={this.props.activeSection === SECTION_MFA}\n                        updateSection={this.handleUpdateSection}\n                    />\n                    <div className='divider-light'/>\n                    {oauthSection}\n                    <div className='divider-light'/>\n                    {tokensSection}\n                    <div className='divider-light'/>\n                    {signInSection}\n                    <div className='divider-dark'/>\n                    <br/>\n                    <ToggleModalButton\n                        className='security-links color--link'\n                        dialogType={AccessHistoryModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory.icon'\n                            defaultMessage='Access History Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.viewHistory'\n                            defaultMessage='View Access History'\n                        />\n                    </ToggleModalButton>\n                    <ToggleModalButton\n                        className='security-links color--link margin-top'\n                        dialogType={ActivityLogModal}\n                    >\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions.icon'\n                            defaultMessage='Active Sessions Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-clock-o'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                        <FormattedMessage\n                            id='user.settings.security.logoutActiveSessions'\n                            defaultMessage='View and Log Out of Active Sessions'\n                        />\n                    </ToggleModalButton>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getMe, updateUserPassword} from 'mattermost-redux/actions/users';\nimport {getAuthorizedOAuthApps, deauthorizeOAuthApp} from 'mattermost-redux/actions/integrations';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getBool} from 'mattermost-redux/selectors/entities/preferences';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\nimport {Preferences} from 'utils/constants';\n\nimport SecurityTab from './user_settings_security.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n\n    const tokensEnabled = config.EnableUserAccessTokens === 'true';\n    const userHasTokenRole = UserUtils.hasUserAccessTokenRole(ownProps.user.roles) || UserUtils.isSystemAdmin(ownProps.user.roles);\n\n    const enableOAuthServiceProvider = config.EnableOAuthServiceProvider === 'true';\n    const enableSignUpWithEmail = config.EnableSignUpWithEmail === 'true';\n    const enableSignUpWithGitLab = config.EnableSignUpWithGitLab === 'true';\n    const enableSignUpWithGoogle = config.EnableSignUpWithGoogle === 'true';\n    const enableLdap = config.EnableLdap === 'true';\n    const enableSaml = config.EnableSaml === 'true';\n    const enableSignUpWithOffice365 = config.EnableSignUpWithOffice365 === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    return {\n        canUseAccessTokens: tokensEnabled && userHasTokenRole,\n        enableOAuthServiceProvider,\n        enableSignUpWithEmail,\n        enableSignUpWithGitLab,\n        enableSignUpWithGoogle,\n        enableLdap,\n        enableSaml,\n        enableSignUpWithOffice365,\n        experimentalEnableAuthenticationTransfer,\n        passwordConfig: getPasswordConfig(config),\n        militaryTime: getBool(state, Preferences.CATEGORY_DISPLAY_SETTINGS, Preferences.USE_MILITARY_TIME, false),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMe,\n            updateUserPassword,\n            getAuthorizedOAuthApps,\n            deauthorizeOAuthApp,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SecurityTab);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport Constants from 'utils/constants';\nimport {isMac} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SettingItemMax from 'components/setting_item_max.jsx';\nimport SettingItemMin from 'components/setting_item_min';\n\nexport default class UserSettingsSidebar extends React.Component {\n    static propTypes = {\n        actions: PropTypes.shape({\n\n            /*\n             * Function to save the user's preferences\n             */\n            savePreferences: PropTypes.func.isRequired,\n        }).isRequired,\n\n        /**\n         * Current user object\n         */\n        user: PropTypes.object,\n\n        /**\n         * The preferences for closing the unused direct messages channels\n         */\n        closeUnusedDirectMessages: PropTypes.string.isRequired,\n\n        /**\n         * Display the close unused direct messages channels options\n         */\n        showUnusedOption: PropTypes.bool.isRequired,\n\n        /**\n         * Display the channel grouping and sorting sections options\n         */\n        showChannelOrganization: PropTypes.bool.isRequired,\n\n        /**\n         * The preferences to show the channel switcher in the sidebar\n         */\n        channelSwitcherOption: PropTypes.string.isRequired,\n\n        /**\n         * Display the unread channels sections options\n         * The preferences to display channels in sidebar\n         */\n        sidebarPreference: PropTypes.shape({\n\n            /**\n             * Group channels by type or none\n             */\n            grouping: PropTypes.string.isRequired,\n\n            /**\n             * Sort channels by recency or alphabetical order\n             */\n            sorting: PropTypes.string.isRequired,\n        }).isRequired,\n\n        /**\n         * Option for including unread channels at top\n         */\n        unreadsAtTop: PropTypes.string.isRequired,\n\n        /**\n         * Option for including favorite channels at top\n         */\n        favoriteAtTop: PropTypes.string.isRequired,\n\n        updateSection: PropTypes.func,\n        activeSection: PropTypes.string,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = this.getStateFromProps();\n    }\n\n    getStateFromProps = () => {\n        const {\n            closeUnusedDirectMessages,\n            channelSwitcherOption,\n            sidebarPreference: {\n                grouping,\n                sorting,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        return {\n            settings: {\n                close_unused_direct_messages: closeUnusedDirectMessages,\n                channel_switcher_section: channelSwitcherOption,\n                grouping,\n                unreadsAtTop,\n                favoriteAtTop,\n                sorting,\n            },\n            isSaving: false,\n        };\n    };\n\n    trackSettingChangeIfNecessary = (setting) => {\n        if (this.state.settings[setting] !== this.props.sidebarPreference[setting]) {\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n    }\n\n    updateSetting = (setting, value) => {\n        const settings = this.state.settings;\n        settings[setting] = value;\n\n        this.setState(settings);\n    };\n\n    handleSubmit = (setting) => {\n        const {actions, user} = this.props;\n        const preferences = [];\n\n        if (setting === 'channel_grouping' || setting === 'channel_sorting') {\n            const updatedSidebarSettings = {\n                grouping: this.state.settings.grouping,\n                unreads_at_top: this.state.settings.unreadsAtTop,\n                favorite_at_top: this.state.settings.favoriteAtTop,\n                sorting: this.state.settings.sorting,\n            };\n\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: '',\n                value: JSON.stringify(updatedSidebarSettings),\n            });\n\n            this.trackSettingChangeIfNecessary('grouping');\n            this.trackSettingChangeIfNecessary('sorting');\n            this.trackSettingChangeIfNecessary('unreadsAtTop');\n            this.trackSettingChangeIfNecessary('favoriteAtTop');\n        } else {\n            preferences.push({\n                user_id: user.id,\n                category: Constants.Preferences.CATEGORY_SIDEBAR_SETTINGS,\n                name: setting,\n                value: this.state.settings[setting],\n            });\n\n            trackEvent('settings', 'user_settings_update', {field: 'sidebar.' + setting, value: this.state.settings[setting]});\n        }\n\n        this.setState({isSaving: true});\n\n        actions.savePreferences(user.id, preferences).then(() => {\n            this.updateSection('');\n        });\n    };\n\n    getPreviousSection = (sectionName) => {\n        const {showChannelOrganization} = this.props;\n        switch (sectionName) {\n        case 'autoCloseDM':\n            return 'channelSwitcher';\n        case 'groupChannels':\n            return 'dummySectionName';\n        case 'channelSwitcher':\n            return showChannelOrganization ? 'groupChannels' : 'dummySectionName';\n        default:\n            return null;\n        }\n    }\n\n    updateSection = (section) => {\n        this.setState(this.getStateFromProps());\n        this.setState({isSaving: false});\n        this.props.updateSection(section);\n    };\n\n    renderAutoCloseDMLabel = (value) => {\n        if (value === 'after_seven_days') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.after_seven_days'\n                    defaultMessage='After 7 days with no new messages'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.never'\n                defaultMessage='Never'\n            />\n        );\n    };\n\n    renderAutoCloseDMSection = () => {\n        let contents;\n\n        if (this.props.activeSection === 'autoCloseDM') {\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='autoCloseDMSetting'>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMAfterSevenDays'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'after_seven_days'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'after_seven_days')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.after_seven_days'\n                                        defaultMessage='After 7 days with no new messages'\n                                    />\n                                </label>\n                            </div>\n                            <div className='radio'>\n                                <label>\n                                    <input\n                                        id='autoCloseDMNever'\n                                        type='radio'\n                                        name='autoCloseDM'\n                                        checked={this.state.settings.close_unused_direct_messages === 'never'}\n                                        onChange={this.updateSetting.bind(this, 'close_unused_direct_messages', 'never')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.never'\n                                        defaultMessage='Never'\n                                    />\n                                </label>\n                            </div>\n                            <div className='margin-top x3'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.autoCloseDMDesc'\n                                    defaultMessage='Direct Message conversations can be reopened with the “+” button in the sidebar or using the Channel Switcher (CTRL+K).'\n                                />\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'close_unused_direct_messages'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.autoCloseDMTitle'\n                            defaultMessage='Automatically Close Direct Messages'\n                        />\n                    }\n                    describe={this.renderAutoCloseDMLabel(this.state.settings.close_unused_direct_messages)}\n                    section={'autoCloseDM'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-dark'/>\n            </React.Fragment>\n        );\n    };\n\n    renderOrganizationLabel = () => {\n        const {\n            sidebarPreference: {\n                sorting,\n                grouping,\n            },\n            unreadsAtTop,\n            favoriteAtTop,\n        } = this.props;\n\n        const messages = [];\n\n        if (grouping === 'by_type') {\n            messages.push(\n                <FormattedMessage\n                    key='by_type'\n                    id='user.settings.sidebar.groupByTypeShort'\n                    defaultMessage='Group by channel type'\n                />\n            );\n        } else {\n            messages.push(\n                <FormattedMessage\n                    key='none'\n                    id='user.settings.sidebar.groupByNoneShort'\n                    defaultMessage='No grouping'\n                />\n            );\n        }\n\n        let sortingId;\n        let sortingDefaultMessage;\n        if (sorting === 'alpha') {\n            sortingId = t('user.settings.sidebar.sortAlphaShort');\n            sortingDefaultMessage = 'sorted alphabetically';\n        } else {\n            sortingId = t('user.settings.sidebar.sortRecentShort');\n            sortingDefaultMessage = 'sorted by recency';\n        }\n\n        messages.push(\n            <span key='comma'>{', '}</span>\n        );\n\n        messages.push(\n            <FormattedMessage\n                key='sorting'\n                id={sortingId}\n                defaultMessage={sortingDefaultMessage}\n            />\n        );\n\n        let atTopId = null;\n        let atTopDefaultMessage = null;\n        if (unreadsAtTop === 'true' && favoriteAtTop === 'false') {\n            atTopId = t('user.settings.sidebar.unreadsShort');\n            atTopDefaultMessage = 'Unreads grouped separately';\n        } else if (unreadsAtTop === 'false' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.favoritesShort');\n            atTopDefaultMessage = 'Favorites grouped separately';\n        } else if (unreadsAtTop === 'true' && favoriteAtTop === 'true') {\n            atTopId = t('user.settings.sidebar.unreadsFavoritesShort');\n            atTopDefaultMessage = 'Unreads and favorites grouped separately';\n        }\n\n        if (atTopId) {\n            messages.push(\n                <br key='break'/>\n            );\n\n            messages.push(\n                <FormattedMessage\n                    key='atTop'\n                    id={atTopId}\n                    defaultMessage={atTopDefaultMessage}\n                />\n            );\n        }\n\n        return messages;\n    };\n\n    renderChannelSwitcherLabel = (value) => {\n        if (value === 'true') {\n            return (\n                <FormattedMessage\n                    id='user.settings.sidebar.on'\n                    defaultMessage='On'\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id='user.settings.sidebar.off'\n                defaultMessage='Off'\n            />\n        );\n    };\n\n    renderChannelOrganizationSection = () => {\n        const {\n            grouping,\n            sorting,\n        } = this.state.settings;\n\n        let contents;\n\n        if (this.props.activeSection === 'groupChannels') {\n            const inputs = [];\n\n            inputs.push(\n                <fieldset key='groupingSectionSetting'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupChannelsTitle'\n                            defaultMessage='Channel grouping'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='byTypeOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'by_type'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'by_type')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByType'\n                                defaultMessage='Channels grouped by type'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='noneOption'\n                                type='radio'\n                                name='groupChannels'\n                                checked={grouping === 'none'}\n                                onChange={this.updateSetting.bind(this, 'grouping', 'none')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.groupByNone'\n                                defaultMessage='Combine all channel types'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupDesc'\n                            defaultMessage='Group channels by type, or combine all types into a list.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='sortingDivider'/>);\n\n            inputs.push(\n                <fieldset key='sortingOptions'>\n                    <legend className='form-legend'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortChannelsTitle'\n                            defaultMessage='Channel sorting'\n                        />\n                    </legend>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='recentSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'recent'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'recent')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortRecent'\n                                defaultMessage='Recency'\n                            />\n                        </label>\n                    </div>\n                    <div className='radio'>\n                        <label>\n                            <input\n                                id='alphaSectionEnabled'\n                                type='radio'\n                                name='sortChannels'\n                                checked={sorting === 'alpha'}\n                                onChange={this.updateSetting.bind(this, 'sorting', 'alpha')}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.sortAlpha'\n                                defaultMessage='Alphabetically'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.sortDesc'\n                            defaultMessage='Sort channels alphabetically, or by most recent post.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='divider'/>);\n\n            inputs.push(\n                <fieldset key='unreadOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='unreadAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.unreadsAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('unreadsAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.unreads'\n                                defaultMessage='Unreads grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div className='margin-top x3'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.unreadsDesc'\n                            defaultMessage='Group unread channels separately until read.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            inputs.push(<hr key='groupingDivider'/>);\n\n            inputs.push(\n                <fieldset key='favoriteOption'>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                id='favoriteAtTopOption'\n                                type='checkbox'\n                                checked={this.state.settings.favoriteAtTop === 'true'}\n                                onChange={(e) => this.updateSetting('favoriteAtTop', (e.target.checked).toString())}\n                            />\n                            <FormattedMessage\n                                id='user.settings.sidebar.favorites'\n                                defaultMessage='Favorites grouped separately'\n                            />\n                        </label>\n                    </div>\n                    <div>\n                        <br/>\n                        <FormattedMessage\n                            id='user.settings.sidebar.favoritesDesc'\n                            defaultMessage='Channels marked as favorites will be grouped separately.'\n                        />\n                    </div>\n                </fieldset>\n            );\n\n            contents = (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    inputs={inputs}\n                    setting={'channel_grouping'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        } else {\n            contents = (\n                <SettingItemMin\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.groupAndSortChannelsTitle'\n                            defaultMessage='Channel grouping and sorting'\n                        />\n                    }\n                    describe={this.renderOrganizationLabel()}\n                    section={'groupChannels'}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                {contents}\n                <div className='divider-light'/>\n            </React.Fragment>\n        );\n    };\n\n    renderChannelSwitcherSection = () => {\n        let channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.windows');\n        let channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CTRL + K.';\n        if (isMac()) {\n            channelSwitcherSectionDescId = t('user.settings.sidebar.channelSwitcherSectionDesc.mac');\n            channelSwitcherSectionDescDefault = 'The channel switcher is shown at the bottom of the sidebar and is used to jump between channels quickly. It can also be accessed using CMD + K.';\n        }\n\n        const helpChannelSwitcherText = (\n            <FormattedMessage\n                id={channelSwitcherSectionDescId}\n                defaultMessage={channelSwitcherSectionDescDefault}\n            />\n        );\n\n        if (this.props.activeSection === 'channelSwitcher') {\n            return (\n                <SettingItemMax\n                    title={\n                        <FormattedMessage\n                            id='user.settings.sidebar.channelSwitcherSectionTitle'\n                            defaultMessage='Channel Switcher'\n                        />\n                    }\n                    inputs={[\n                        <fieldset key='channelSwitcherSectionSetting'>\n                            <legend className='form-legend hidden-label'>\n                                <FormattedMessage\n                                    id='user.settings.sidebar.channelSwitcherSectionTitle'\n                                    defaultMessage='Channel Switcher'\n                                />\n                            </legend>\n                            <div\n                                id='channelSwitcherRadioOn'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionEnabled'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'true'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'true')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.on'\n                                        defaultMessage='On'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div\n                                id='channelSwitcherRadioOff'\n                                className='radio'\n                            >\n                                <label>\n                                    <input\n                                        id='channelSwitcherSectionOff'\n                                        type='radio'\n                                        name='channelSwitcher'\n                                        checked={this.state.settings.channel_switcher_section === 'false'}\n                                        onChange={this.updateSetting.bind(this, 'channel_switcher_section', 'false')}\n                                    />\n                                    <FormattedMessage\n                                        id='user.settings.sidebar.off'\n                                        defaultMessage='Off'\n                                    />\n                                </label>\n                                <br/>\n                            </div>\n                            <div id='channelSwitcherHelpText'>\n                                <br/>\n                                {helpChannelSwitcherText}\n                            </div>\n                        </fieldset>,\n                    ]}\n                    setting={'channel_switcher_section'}\n                    submit={this.handleSubmit}\n                    saving={this.state.isSaving}\n                    server_error={this.state.serverError}\n                    updateSection={this.updateSection}\n                />\n            );\n        }\n\n        return (\n            <SettingItemMin\n                title={\n                    <FormattedMessage\n                        id='user.settings.sidebar.channelSwitcherSectionTitle'\n                        defaultMessage='Channel Switcher'\n                    />\n                }\n                describe={this.renderChannelSwitcherLabel(this.props.channelSwitcherOption)}\n                section={'channelSwitcher'}\n                updateSection={this.updateSection}\n            />\n        );\n    };\n\n    render() {\n        const {showUnusedOption, showChannelOrganization} = this.props;\n\n        const channelOrganizationSection = showChannelOrganization ? this.renderChannelOrganizationSection() : null;\n        const autoCloseDMSection = showUnusedOption ? this.renderAutoCloseDMSection() : null;\n        const channelSwitcherSection = this.renderChannelSwitcherSection();\n\n        return (\n            <div>\n                <div className='modal-header'>\n                    <button\n                        id='closeButton'\n                        type='button'\n                        className='close'\n                        data-dismiss='modal'\n                        aria-label='Close'\n                        onClick={this.props.closeModal}\n                    >\n                        <span aria-hidden='true'>{'×'}</span>\n                    </button>\n                    <h4\n                        className='modal-title'\n                        ref='title'\n                    >\n                        <div\n                            className='modal-back'\n                            onClick={this.props.collapseModal}\n                        >\n                            <LocalizedIcon\n                                className='fa fa-angle-left'\n                                title={{id: t('generic_icons.collapse'), defaultMessage: 'Collapse Icon'}}\n                            />\n                        </div>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h4>\n                </div>\n                <div\n                    id='sidebarTitle'\n                    className='user-settings'\n                >\n                    <h3 className='tab-header'>\n                        <FormattedMessage\n                            id='user.settings.sidebar.title'\n                            defaultMessage='Sidebar Settings'\n                        />\n                    </h3>\n                    <div className='divider-dark first'/>\n                    {channelOrganizationSection}\n                    {channelSwitcherSection}\n                    {showUnusedOption ? <div className='divider-light'/> : <div className='divider-dark'/>}\n                    {autoCloseDMSection}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\nimport {connect} from 'react-redux';\n\nimport {savePreferences} from 'mattermost-redux/actions/preferences';\nimport {Preferences} from 'mattermost-redux/constants';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {get as getPreference, getSidebarPreferences} from 'mattermost-redux/selectors/entities/preferences';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettingsSidebar from './user_settings_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const closeUnusedDirectMessages = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'close_unused_direct_messages',\n        'after_seven_days'\n    );\n\n    const channelSwitcherOption = getPreference(\n        state,\n        Preferences.CATEGORY_SIDEBAR_SETTINGS,\n        'channel_switcher_section',\n        'true'\n    );\n\n    const sidebarPreference = getSidebarPreferences(state);\n\n    return {\n        closeUnusedDirectMessages,\n        sidebarPreference,\n        unreadsAtTop: sidebarPreference.unreads_at_top,\n        favoriteAtTop: sidebarPreference.favorite_at_top,\n        channelSwitcherOption,\n        showChannelOrganization: config.ExperimentalChannelOrganization === 'true',\n        showUnusedOption: config.CloseUnusedDirectMessages === 'true',\n        user: getCurrentUser(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            savePreferences,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserSettingsSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport AdvancedTab from './advanced';\nimport DisplayTab from './display';\nimport GeneralTab from './general';\nimport NotificationsTab from './notifications';\nimport SecurityTab from './security';\nimport SidebarTab from './sidebar';\n\nexport default class UserSettings extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        activeTab: PropTypes.string,\n        activeSection: PropTypes.string,\n        updateSection: PropTypes.func,\n        updateTab: PropTypes.func,\n        closeModal: PropTypes.func.isRequired,\n        collapseModal: PropTypes.func.isRequired,\n        setEnforceFocus: PropTypes.func.isRequired,\n        setRequireConfirm: PropTypes.func.isRequired,\n    }\n\n    render() {\n        if (this.props.activeTab === 'general') {\n            return (\n                <div>\n                    <GeneralTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        updateTab={this.props.updateTab}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'security') {\n            return (\n                <div>\n                    <SecurityTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'notifications') {\n            return (\n                <div>\n                    <NotificationsTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'display') {\n            return (\n                <div>\n                    <DisplayTab\n                        user={this.props.user}\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                        setEnforceFocus={this.props.setEnforceFocus}\n                        setRequireConfirm={this.props.setRequireConfirm}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'sidebar') {\n            return (\n                <div>\n                    <SidebarTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        } else if (this.props.activeTab === 'advanced') {\n            return (\n                <div>\n                    <AdvancedTab\n                        activeSection={this.props.activeSection}\n                        updateSection={this.props.updateSection}\n                        closeModal={this.props.closeModal}\n                        collapseModal={this.props.collapseModal}\n                    />\n                </div>\n            );\n        }\n\n        return <div/>;\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport UserSettings from './user_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        user: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(UserSettings);\n"],"sourceRoot":""}