{"version":3,"sources":["webpack:///./components/common/back_button.tsx","webpack:///./images/logo.png","webpack:///./components/common/site_name_and_description.tsx","webpack:///./components/widgets/icons/fa_logout_icon.jsx","webpack:///./components/widgets/icons/team_info_icon.jsx","webpack:///./components/select_team/components/select_team_item.jsx","webpack:///./components/select_team/select_team.jsx","webpack:///./components/select_team/index.js"],"names":["BackButton","React","PureComponent","render","id","className","onClick","this","props","to","url","defaultMessage","title","toString","module","exports","SiteNameAndDescription","customDescriptionText","siteName","description","Fragment","LogoutIcon","TeamInfoIcon","ariaLabel","width","height","viewBox","style","role","aria-label","transform","d","fillRule","clipRule","strokeLinejoin","strokeMiterlimit","SelectTeamItem","e","preventDefault","onTeamClick","team","descriptionTooltip","Tooltip","delayShow","placement","overlay","rootClose","container","canJoinPublicTeams","canJoinPrivateTeams","loading","icon","component","t","canJoin","allow_open_invite","renderDescriptionTooltip","href","Utils","display_name","handleTeamClick","PropTypes","object","isRequired","func","bool","TEAMS_PER_PAGE","TEAM_MEMBERSHIP_DENIAL_ERROR_ID","SelectTeam","Component","constructor","super","async","siteURL","currentUserRoles","setState","loadingTeamId","data","error","actions","addUserToTeam","currentUserId","history","push","name","Constants","DEFAULT_CHANNEL","errorMsg","message","server_error_id","includes","PERMISSIONS_SYSTEM_ADMIN","values","emitUserLoggedOutEvent","state","componentDidMount","getTeams","loadRolesIfNeeded","split","currentUserIsGuest","canManageSystem","isMemberOfTeam","listableTeams","canCreateTeams","openContent","joinableTeamContents","forEach","listableTeam","key","length","permissions","Permissions","CREATE_TEAM","invert","teamSignUp","adminConsoleLink","headerButton","UserAgent","MANAGE_SYSTEM","clearError","handleLogoutClick","alt","src","logoImage","string","array","shape","withRouter","connect","config","getConfig","currentUser","getCurrentUser","myTeamMemberships","Object","getTeamMemberships","roles","isGuest","CustomDescriptionText","getSortedListableTeams","locale","SiteName","haveISystemPermission","permission","JOIN_PUBLIC_TEAMS","JOIN_PRIVATE_TEAMS","SiteURL","dispatch","bindActionCreators"],"mappings":"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","file":"14.7641c68e9b6907bf6258.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\ntype Props = {\n\n    /**\n     * URL to return to\n     */\n    url: string;\n\n    /**\n     * onClick handler when user clicks back button\n     */\n    onClick?: React.EventHandler<React.MouseEvent>;\n}\n\nexport default class BackButton extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        url: '/'\n    }\n\n    public render(): JSX.Element {\n        return (\n            <div\n                id='back_button'\n                className='signup-header'\n            >\n                <Link\n                    onClick={this.props.onClick}\n                    to={this.props.url}\n                >\n                    <FormattedMessage\n                        id='generic_icons.back'\n                        defaultMessage='Back Icon'\n                    >\n                        {(title: string | JSX.Element) => (\n                            <span\n                                id='back_button_icon'\n                                className='fa fa-1x fa-angle-left'\n                                title={title.toString()}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='web.header.back'\n                        defaultMessage='Back'\n                    />\n                </Link>\n            </div>\n        );\n    }\n}\n","module.exports = __webpack_public_path__ + \"files/77de51bb9d8c3e0ae1c9fba08495fcc7.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    customDescriptionText?: string;\n    siteName: string;\n}\n\nexport default class SiteNameAndDescription extends React.PureComponent<Props> {\n    public static defaultProps: Partial<Props> = {\n        siteName: 'Mattermost'\n    }\n\n    public render(): JSX.Element {\n        const {\n            customDescriptionText,\n            siteName,\n        } = this.props;\n        let description = null;\n        if (customDescriptionText) {\n            description = customDescriptionText;\n        } else {\n            description = (\n                <FormattedMessage\n                    id='web.root.signup_info'\n                    defaultMessage='All team communication in one place, searchable and accessible anywhere'\n                />\n            );\n        }\n\n        return (\n            <React.Fragment>\n                <h1 id='site_name'>{siteName}</h1>\n                <h4\n                    id='site_description'\n                    className='color--light'\n                >\n                    {description}\n                </h4>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class LogoutIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.logout'\n                defaultMessage='Logout Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-1x fa-angle-left'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class TeamInfoIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.info'\n                    defaultMessage='Info Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='100%'\n                            height='100%'\n                            viewBox='0 0 20 20'\n                            style={style}\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <g transform='matrix(1.17647,0,0,1.17647,-1.55431e-15,-1.00573e-14)'>\n                                <path d='M8.5,0C3.797,0 0,3.797 0,8.5C0,13.203 3.797,17 8.5,17C13.203,17 17,13.203 17,8.5C17,3.797 13.203,0 8.5,0ZM10,8.5C10,7.672 9.328,7 8.5,7C7.672,7 7,7.672 7,8.5L7,12.45C7,13.278 7.672,13.95 8.5,13.95C9.328,13.95 10,13.278 10,12.45L10,8.5ZM8.5,3C9.328,3 10,3.672 10,4.5C10,5.328 9.328,6 8.5,6C7.672,6 7,5.328 7,4.5C7,3.672 7.672,3 8.5,3Z'/>\n                            </g>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}\n\nconst style = {\n    fillRule: 'evenodd',\n    clipRule: 'evenodd',\n    strokeLinejoin: 'round',\n    strokeMiterlimit: 1.41421,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\n\nimport LocalizedIcon from 'components/localized_icon';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport TeamInfoIcon from 'components/widgets/icons/team_info_icon';\n\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class SelectTeamItem extends React.PureComponent {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onTeamClick: PropTypes.func.isRequired,\n        loading: PropTypes.bool.isRequired,\n        canJoinPublicTeams: PropTypes.bool.isRequired,\n        canJoinPrivateTeams: PropTypes.bool.isRequired,\n    };\n\n    handleTeamClick = (e) => {\n        e.preventDefault();\n        this.props.onTeamClick(this.props.team);\n    }\n\n    renderDescriptionTooltip = () => {\n        const team = this.props.team;\n        if (!team.description) {\n            return null;\n        }\n\n        const descriptionTooltip = (\n            <Tooltip id='team-description__tooltip'>\n                {team.description}\n            </Tooltip>\n        );\n\n        return (\n            <OverlayTrigger\n                delayShow={1000}\n                placement='top'\n                overlay={descriptionTooltip}\n                rootClose={true}\n                container={this}\n            >\n                <TeamInfoIcon className='icon icon--info'/>\n            </OverlayTrigger>\n        );\n    }\n\n    render() {\n        const {canJoinPublicTeams, canJoinPrivateTeams, loading, team} = this.props;\n        let icon;\n        if (loading) {\n            icon = (\n                <LocalizedIcon\n                    className='fa fa-refresh fa-spin right signup-team__icon'\n                    component='span'\n                    title={{id: t('generic_icons.loading'), defaultMessage: 'Loading Icon'}}\n                />\n            );\n        } else {\n            icon = (\n                <LocalizedIcon\n                    className='fa fa-angle-right right signup-team__icon'\n                    component='span'\n                    title={{id: t('select_team.join.icon'), defaultMessage: 'Join Team Icon'}}\n                />\n            );\n        }\n\n        const canJoin = (team.allow_open_invite && canJoinPublicTeams) || (!team.allow_open_invite && canJoinPrivateTeams);\n\n        return (\n            <div className='signup-team-dir'>\n                {this.renderDescriptionTooltip()}\n                <a\n                    href='#'\n                    id={Utils.createSafeId(team.display_name)}\n                    onClick={canJoin ? this.handleTeamClick : null}\n                    className={canJoin ? '' : 'disabled'}\n                >\n                    <span className='signup-team-dir__name'>{team.display_name}</span>\n                    {!team.allow_open_invite &&\n                        <LocalizedIcon\n                            className='fa fa-lock light'\n                            title={{id: t('select_team.private.icon'), defaultMessage: 'Private team'}}\n                        />}\n                    {canJoin && icon}\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nimport * as UserAgent from 'utils/user_agent';\nimport Constants from 'utils/constants';\n\nimport logoImage from 'images/logo.png';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport BackButton from 'components/common/back_button';\nimport LoadingScreen from 'components/loading_screen';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport SiteNameAndDescription from 'components/common/site_name_and_description';\nimport LogoutIcon from 'components/widgets/icons/fa_logout_icon';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport SelectTeamItem from './components/select_team_item.jsx';\n\nconst TEAMS_PER_PAGE = 200;\nconst TEAM_MEMBERSHIP_DENIAL_ERROR_ID = 'api.team.add_members.user_denied';\n\nexport default class SelectTeam extends React.Component {\n    static propTypes = {\n        currentUserId: PropTypes.string.isRequired,\n        currentUserRoles: PropTypes.string,\n        currentUserIsGuest: PropTypes.bool,\n        customDescriptionText: PropTypes.string,\n        isMemberOfTeam: PropTypes.bool.isRequired,\n        listableTeams: PropTypes.array,\n        siteName: PropTypes.string,\n        canCreateTeams: PropTypes.bool.isRequired,\n        canManageSystem: PropTypes.bool.isRequired,\n        canJoinPublicTeams: PropTypes.bool.isRequired,\n        canJoinPrivateTeams: PropTypes.bool.isRequired,\n        history: PropTypes.object,\n        siteURL: PropTypes.string,\n        actions: PropTypes.shape({\n            getTeams: PropTypes.func.isRequired,\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            addUserToTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingTeamId: '',\n            error: null,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getTeams(0, TEAMS_PER_PAGE);\n\n        this.props.actions.loadRolesIfNeeded(this.props.currentUserRoles.split(' '));\n    }\n\n    handleTeamClick = async (team) => {\n        const {siteURL, currentUserRoles} = this.props;\n        this.setState({loadingTeamId: team.id});\n\n        const {data, error} = await this.props.actions.addUserToTeam(team.id, this.props.currentUserId);\n        if (data) {\n            this.props.history.push(`/${team.name}/channels/${Constants.DEFAULT_CHANNEL}`);\n        } else if (error) {\n            let errorMsg = error.message;\n\n            if (error.server_error_id === TEAM_MEMBERSHIP_DENIAL_ERROR_ID) {\n                if (currentUserRoles.includes(Constants.PERMISSIONS_SYSTEM_ADMIN)) {\n                    errorMsg = (\n                        <FormattedMarkdownMessage\n                            id='join_team_group_constrained_denied_admin'\n                            defaultMessage={`You need to be a member of a linked group to join this team. You can add a group to this team [here](${siteURL}/admin_console/user_management/groups).`}\n                            values={{siteURL}}\n                        />\n                    );\n                } else {\n                    errorMsg = (\n                        <FormattedMarkdownMessage\n                            id='join_team_group_constrained_denied'\n                            defaultMessage='You need to be a member of a linked group to join this team.'\n                        />\n                    );\n                }\n            }\n\n            this.setState({\n                error: errorMsg,\n                loadingTeamId: '',\n            });\n        }\n    };\n\n    handleLogoutClick = (e) => {\n        e.preventDefault();\n        emitUserLoggedOutEvent('/login');\n    };\n\n    clearError = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            error: null,\n        });\n    };\n\n    render() {\n        const {\n            currentUserIsGuest,\n            canManageSystem,\n            customDescriptionText,\n            isMemberOfTeam,\n            listableTeams,\n            siteName,\n            canCreateTeams,\n            canJoinPublicTeams,\n            canJoinPrivateTeams,\n        } = this.props;\n\n        let openContent;\n        if (this.state.loadingTeamId) {\n            openContent = <LoadingScreen/>;\n        } else if (this.state.error) {\n            openContent = (\n                <div className='signup__content'>\n                    <div className={'form-group has-error'}>\n                        <label className='control-label'>{this.state.error}</label>\n                    </div>\n                </div>\n            );\n        } else if (currentUserIsGuest) {\n            openContent = (\n                <div className='signup__content'>\n                    <div className={'form-group has-error'}>\n                        <label className='control-label'>\n                            <FormattedMessage\n                                id='signup_team.guest_without_channels'\n                                defaultMessage='Your guest account has no channels assigned. Please contact an administrator.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        } else {\n            let joinableTeamContents = [];\n            listableTeams.forEach((listableTeam) => {\n                if ((listableTeam.allow_open_invite && canJoinPublicTeams) || (!listableTeam.allow_open_invite && canJoinPrivateTeams)) {\n                    joinableTeamContents.push(\n                        <SelectTeamItem\n                            key={'team_' + listableTeam.name}\n                            team={listableTeam}\n                            onTeamClick={this.handleTeamClick}\n                            loading={this.state.loadingTeamId === listableTeam.id}\n                            canJoinPublicTeams={canJoinPublicTeams}\n                            canJoinPrivateTeams={canJoinPrivateTeams}\n                        />\n                    );\n                }\n            });\n\n            if (joinableTeamContents.length === 0 && (canCreateTeams || canManageSystem)) {\n                joinableTeamContents = (\n                    <div className='signup-team-dir-err'>\n                        <div>\n                            <FormattedMessage\n                                id='signup_team.no_open_teams_canCreate'\n                                defaultMessage='No teams are available to join. Please create a new team or ask your administrator for an invite.'\n                            />\n                        </div>\n                    </div>\n                );\n            } else if (joinableTeamContents.length === 0) {\n                joinableTeamContents = (\n                    <div className='signup-team-dir-err'>\n                        <div>\n                            <SystemPermissionGate permissions={[Permissions.CREATE_TEAM]}>\n                                <FormattedMessage\n                                    id='signup_team.no_open_teams_canCreate'\n                                    defaultMessage='No teams are available to join. Please create a new team or ask your administrator for an invite.'\n                                />\n                            </SystemPermissionGate>\n                            <SystemPermissionGate\n                                permissions={[Permissions.CREATE_TEAM]}\n                                invert={true}\n                            >\n                                <FormattedMessage\n                                    id='signup_team.no_open_teams'\n                                    defaultMessage='No teams are available to join. Please ask your administrator for an invite.'\n                                />\n                            </SystemPermissionGate>\n                        </div>\n                    </div>\n                );\n            }\n\n            openContent = (\n                <div\n                    id='teamsYouCanJoinContent'\n                    className='signup__content'\n                >\n                    <h4>\n                        <FormattedMessage\n                            id='signup_team.join_open'\n                            defaultMessage='Teams you can join: '\n                        />\n                    </h4>\n                    <div className='signup-team-all'>\n                        {joinableTeamContents}\n                    </div>\n                </div>\n            );\n        }\n\n        const teamSignUp = (\n            <SystemPermissionGate permissions={[Permissions.CREATE_TEAM]}>\n                <div className='margin--extra'>\n                    <Link\n                        id='createNewTeamLink'\n                        to='/create_team'\n                        className='signup-team-login'\n                    >\n                        <FormattedMessage\n                            id='login.createTeam'\n                            defaultMessage='Create a new team'\n                        />\n                    </Link>\n                </div>\n            </SystemPermissionGate>\n        );\n\n        let adminConsoleLink;\n        if (!UserAgent.isMobileApp()) {\n            adminConsoleLink = (\n                <SystemPermissionGate permissions={[Permissions.MANAGE_SYSTEM]}>\n                    <div className='margin--extra hidden-xs'>\n                        <Link\n                            to='/admin_console'\n                            className='signup-team-login'\n                        >\n                            <FormattedMessage\n                                id='signup_team_system_console'\n                                defaultMessage='Go to System Console'\n                            />\n                        </Link>\n                    </div>\n                </SystemPermissionGate>\n            );\n        }\n\n        let headerButton;\n        if (this.state.error) {\n            headerButton = <BackButton onClick={this.clearError}/>;\n        } else if (isMemberOfTeam) {\n            headerButton = <BackButton/>;\n        } else {\n            headerButton = (\n                <div className='signup-header'>\n                    <a\n                        href='#'\n                        id='logout'\n                        onClick={this.handleLogoutClick}\n                    >\n                        <LogoutIcon/>\n                        <FormattedMessage\n                            id='web.header.logout'\n                            defaultMessage='Logout'\n                        />\n                    </a>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <AnnouncementBar/>\n                {headerButton}\n                <div className='col-sm-12'>\n                    <div className={'signup-team__container'}>\n                        <img\n                            alt={'signup team logo'}\n                            className='signup-team-logo'\n                            src={logoImage}\n                        />\n                        <SiteNameAndDescription\n                            customDescriptionText={customDescriptionText}\n                            siteName={siteName}\n                        />\n                        {openContent}\n                        {teamSignUp}\n                        {adminConsoleLink}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {withRouter} from 'react-router-dom';\n\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {loadRolesIfNeeded} from 'mattermost-redux/actions/roles';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {Permissions} from 'mattermost-redux/constants';\nimport {haveISystemPermission} from 'mattermost-redux/selectors/entities/roles';\nimport {getSortedListableTeams, getTeamMemberships} from 'mattermost-redux/selectors/entities/teams';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport {addUserToTeam} from 'actions/team_actions';\nimport {isGuest} from 'utils/utils';\n\nimport SelectTeam from './select_team.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const currentUser = getCurrentUser(state);\n    const myTeamMemberships = Object.values(getTeamMemberships(state));\n\n    return {\n        currentUserId: currentUser.id,\n        currentUserRoles: currentUser.roles || '',\n        currentUserIsGuest: isGuest(currentUser),\n        customDescriptionText: config.CustomDescriptionText,\n        isMemberOfTeam: myTeamMemberships && myTeamMemberships.length > 0,\n        listableTeams: getSortedListableTeams(state, currentUser.locale),\n        siteName: config.SiteName,\n        canCreateTeams: haveISystemPermission(state, {permission: Permissions.CREATE_TEAM}),\n        canManageSystem: haveISystemPermission(state, {permission: Permissions.MANAGE_SYSTEM}),\n        canJoinPublicTeams: haveISystemPermission(state, {permission: Permissions.JOIN_PUBLIC_TEAMS}),\n        canJoinPrivateTeams: haveISystemPermission(state, {permission: Permissions.JOIN_PRIVATE_TEAMS}),\n        siteURL: config.SiteURL,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            loadRolesIfNeeded,\n            addUserToTeam,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SelectTeam));\n"],"sourceRoot":""}