{"version":3,"sources":["webpack:///./components/widgets/icons/fa_next_icon.tsx","webpack:///./components/widgets/icons/fa_previous_icon.tsx","webpack:///./components/widgets/icons/checkbox_checked_icon.jsx","webpack:///./components/audit_table/audit_table.jsx","webpack:///./components/audit_table/index.js","webpack:///./images/status_green.png","webpack:///./images/status_yellow.png","webpack:///./components/widgets/admin_console/admin_header.tsx","webpack:///./components/widgets/admin_console/formatted_admin_header.tsx","webpack:///./components/analytics/doughnut_chart.tsx","webpack:///./components/analytics/line_chart.tsx","webpack:///./components/analytics/statistic_count.tsx","webpack:///./components/analytics/format.tsx","webpack:///./components/analytics/system_analytics/system_analytics.jsx","webpack:///./components/analytics/system_analytics/index.js","webpack:///./components/admin_console/banner.tsx","webpack:///./components/analytics/table_chart.tsx","webpack:///./components/analytics/team_analytics/team_analytics.jsx","webpack:///./components/analytics/team_analytics/index.js","webpack:///./components/admin_console/admin_settings.tsx","webpack:///./components/admin_console/set_by_env.jsx","webpack:///./components/admin_console/setting.tsx","webpack:///./components/admin_console/boolean_setting.tsx","webpack:///./components/admin_console/settings_group.jsx","webpack:///./components/admin_console/text_setting.tsx","webpack:///./components/admin_console/plugin_management/plugin_management.jsx","webpack:///./components/admin_console/plugin_management/index.js","webpack:///./utils/policy_roles_adapter.js","webpack:///./components/admin_console/request_button/request_button.jsx","webpack:///./components/admin_console/dropdown_setting.jsx","webpack:///./components/admin_console/multiselect_settings.jsx","webpack:///./components/admin_console/radio_setting.tsx","webpack:///./components/admin_console/color_setting.tsx","webpack:///./components/admin_console/generated_setting.tsx","webpack:///./components/admin_console/user_autocomplete_setting/user_autocomplete_setting.jsx","webpack:///./components/admin_console/user_autocomplete_setting/index.jsx","webpack:///./components/admin_console/jobs/table.jsx","webpack:///./components/admin_console/jobs/index.jsx","webpack:///./components/admin_console/file_upload_setting.jsx","webpack:///./components/admin_console/remove_file_setting.jsx","webpack:///./components/admin_console/schema_text.jsx","webpack:///./components/admin_console/schema_admin_settings.jsx","webpack:///./components/admin_console/custom_plugin_settings/custom_plugin_settings.jsx","webpack:///./components/admin_console/custom_plugin_settings/enable_plugin_setting.js","webpack:///./components/admin_console/custom_plugin_settings/index.js","webpack:///./components/widgets/icons/fa_reload_icon.jsx","webpack:///./components/admin_console/compliance_reports/compliance_reports.jsx","webpack:///./components/admin_console/compliance_reports/index.js","webpack:///./components/admin_console/audits/audits.jsx","webpack:///./components/admin_console/audits/index.js","webpack:///./components/admin_console/custom_url_schemes_setting.jsx","webpack:///./components/admin_console/custom_enable_disable_guest_accounts_setting.tsx","webpack:///./components/admin_console/license_settings/license_settings.jsx","webpack:///./components/admin_console/license_settings/index.js","webpack:///./components/widgets/admin_console/admin_panel.tsx","webpack:///./components/widgets/admin_console/admin_panel_with_link.tsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/permissions_scheme_summary.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_scheme_summary/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_schemes_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/index.jsx","webpack:///./components/admin_console/blockable_link/blockable_link.tsx","webpack:///./components/admin_console/blockable_link/index.ts","webpack:///./components/widgets/icons/accordion_toggle_icon.jsx","webpack:///./components/widgets/admin_console/admin_panel_togglable.tsx","webpack:///./components/widgets/icons/checkbox_partial_icon.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_checkbox.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_description.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_row.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_group.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/edit_post_time_limit_button.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_button/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/edit_post_time_limit_modal.jsx","webpack:///./components/admin_console/permission_schemes_settings/edit_post_time_limit_modal/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_tree/permissions_tree.jsx","webpack:///./components/admin_console/permission_schemes_settings/permissions_tree/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/guest_permissions_tree/guest_permissions_tree.jsx","webpack:///./components/admin_console/permission_schemes_settings/guest_permissions_tree/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/permission_system_scheme_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_system_scheme_settings/index.jsx","webpack:///./components/team_selector_modal/team_selector_modal.jsx","webpack:///./components/team_selector_modal/index.js","webpack:///./components/widgets/admin_console/admin_panel_with_button.tsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/team_in_list.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/team_in_list/index.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/permission_team_scheme_settings.jsx","webpack:///./components/admin_console/permission_schemes_settings/permission_team_scheme_settings/index.jsx","webpack:///./utils/filter_users.js","webpack:///./components/admin_console/manage_roles_modal/manage_roles_modal.jsx","webpack:///./components/admin_console/manage_roles_modal/index.js","webpack:///./components/admin_console/manage_teams_modal/manage_teams_dropdown.jsx","webpack:///./components/admin_console/manage_teams_modal/remove_from_team_button.jsx","webpack:///./components/admin_console/manage_teams_modal/manage_teams_modal.jsx","webpack:///./components/admin_console/manage_teams_modal/index.jsx","webpack:///./components/admin_console/revoke_token_button/revoke_token_button.jsx","webpack:///./components/admin_console/revoke_token_button/index.js","webpack:///./components/admin_console/manage_tokens_modal/manage_tokens_modal.jsx","webpack:///./components/admin_console/manage_tokens_modal/index.js","webpack:///./components/admin_console/reset_password_modal/reset_password_modal.tsx","webpack:///./components/admin_console/reset_password_modal/index.ts","webpack:///./components/admin_console/reset_email_modal/reset_email_modal.jsx","webpack:///./components/user_list_row_with_error/user_list_row_with_error.jsx","webpack:///./components/user_list_row_with_error/index.js","webpack:///./components/admin_console/system_users/system_users_dropdown/system_users_dropdown.jsx","webpack:///./components/admin_console/system_users/system_users_dropdown/index.js","webpack:///./components/admin_console/system_users/list/system_users_list.jsx","webpack:///./components/admin_console/system_users/list/selectors.jsx","webpack:///./components/admin_console/system_users/list/index.js","webpack:///./components/admin_console/system_users/system_users.jsx","webpack:///./components/admin_console/system_users/index.js","webpack:///./components/admin_console/admin_button_outline/admin_button_outline.jsx","webpack:///./components/admin_console/admin_user_card/admin_user_card.jsx","webpack:///./components/admin_console/system_user_detail/team_list/abstract_list.jsx","webpack:///./components/widgets/icons/ellipsis_h_icon.jsx","webpack:///./components/admin_console/system_user_detail/team_list/team_list_dropdown.jsx","webpack:///./components/admin_console/system_user_detail/team_list/team_row.jsx","webpack:///./components/admin_console/system_user_detail/team_list/team_list.jsx","webpack:///./components/admin_console/system_user_detail/team_list/index.js","webpack:///./components/widgets/icons/email_icon.jsx","webpack:///./components/widgets/icons/at_icon.jsx","webpack:///./components/widgets/icons/shield_outline_icon.jsx","webpack:///./components/admin_console/system_user_detail/system_user_detail.jsx","webpack:///./components/admin_console/system_user_detail/index.js","webpack:///./components/admin_console/server_logs/log_list.jsx","webpack:///./components/admin_console/server_logs/logs.jsx","webpack:///./components/admin_console/server_logs/index.js","webpack:///./components/admin_console/brand_image_setting/brand_image_setting.jsx","webpack:///./components/admin_console/group_settings/group_row.jsx","webpack:///./components/admin_console/group_settings/groups_list/groups_list.jsx","webpack:///./components/admin_console/group_settings/groups_list/index.js","webpack:///./components/admin_console/group_settings/group_settings.jsx","webpack:///./components/admin_console/group_settings/group_details/group_profile.jsx","webpack:///./components/admin_console/group_settings/group_details/group_teams_and_channels_row.jsx","webpack:///./components/admin_console/group_settings/group_details/group_teams_and_channels.jsx","webpack:///./components/admin_console/group_settings/group_details/group_users_row.jsx","webpack:///./components/admin_console/group_settings/group_details/group_users.jsx","webpack:///./components/channel_selector_modal/channel_selector_modal.jsx","webpack:///./components/channel_selector_modal/index.js","webpack:///./components/admin_console/group_settings/group_details/group_details.jsx","webpack:///./components/admin_console/group_settings/group_details/index.jsx","webpack:///./components/admin_console/team_channel_settings/team/list/team_row.jsx","webpack:///./components/admin_console/team_channel_settings/abstract_list.jsx","webpack:///./components/admin_console/team_channel_settings/team/list/team_list.jsx","webpack:///./components/admin_console/team_channel_settings/team/list/index.js","webpack:///./components/admin_console/team_channel_settings/team/team_settings.jsx","webpack:///./components/admin_console/team_channel_settings/team/index.js","webpack:///./components/admin_console/team_channel_settings/remove_confirm_modal.jsx","webpack:///./components/admin_console/team_channel_settings/group/group_users_row.tsx","webpack:///./components/admin_console/team_channel_settings/group/group_users.tsx","webpack:///./components/admin_console/team_channel_settings/users_to_be_removed_modal.jsx","webpack:///./components/admin_console/team_channel_settings/errors.jsx","webpack:///./components/admin_console/team_channel_settings/save_changes_panel.jsx","webpack:///./components/admin_console/team_channel_settings/team/details/team_profile.jsx","webpack:///./components/toggle.tsx","webpack:///./components/admin_console/team_channel_settings/line_switch.jsx","webpack:///./components/admin_console/team_channel_settings/team/details/team_modes.jsx","webpack:///./components/admin_console/team_channel_settings/group/group_row.tsx","webpack:///./components/admin_console/team_channel_settings/group/group_list.tsx","webpack:///./components/admin_console/team_channel_settings/group/index.js","webpack:///./components/admin_console/team_channel_settings/team/details/team_groups.jsx","webpack:///./components/admin_console/team_channel_settings/team/details/team_details.jsx","webpack:///./components/admin_console/team_channel_settings/team/details/index.js","webpack:///./components/admin_console/team_channel_settings/channel/list/channel_row.tsx","webpack:///./components/admin_console/team_channel_settings/channel/list/channel_list.tsx","webpack:///./components/admin_console/team_channel_settings/channel/list/index.ts","webpack:///./components/admin_console/team_channel_settings/channel/channel_settings.jsx","webpack:///./components/admin_console/team_channel_settings/channel/index.js","webpack:///./components/admin_console/team_channel_settings/convert_confirm_modal.jsx","webpack:///./components/admin_console/team_channel_settings/convert_and_remove_confirm_modal.jsx","webpack:///./components/admin_console/team_channel_settings/channel/details/channel_modes.jsx","webpack:///./components/admin_console/team_channel_settings/channel/details/channel_groups.tsx","webpack:///./components/admin_console/team_channel_settings/channel/details/channel_profile.jsx","webpack:///./components/admin_console/team_channel_settings/channel/details/channel_details.jsx","webpack:///./components/admin_console/team_channel_settings/channel/details/index.js","webpack:///./components/admin_console/push_settings.jsx","webpack:///./components/admin_console/message_export_settings.jsx","webpack:///./components/admin_console/cluster_table.jsx","webpack:///./components/admin_console/cluster_table_container.jsx","webpack:///./components/admin_console/cluster_settings.jsx","webpack:///./components/admin_console/custom_terms_of_service_settings/custom_terms_of_service_settings.jsx","webpack:///./components/admin_console/custom_terms_of_service_settings/index.js","webpack:///./components/admin_console/admin_definition_constants.jsx","webpack:///./components/admin_console/admin_definition.jsx","webpack:///./components/admin_console/database_settings.jsx","webpack:///./components/admin_console/elasticsearch_settings.jsx","webpack:///./components/admin_console/password_settings.jsx","webpack:///./components/admin_console/data_retention_settings.jsx","webpack:///./selectors/admin_console.jsx","webpack:///./components/discard_changes_modal.tsx","webpack:///./utils/admin_console_plugin_index.js","webpack:///./utils/admin_console_index.jsx","webpack:///./components/admin_console/admin_sidebar_category.jsx","webpack:///./components/admin_console/admin_navbar_dropdown/menu_item_blockable_link.jsx","webpack:///./components/admin_console/admin_navbar_dropdown/admin_navbar_dropdown.jsx","webpack:///./components/admin_console/admin_navbar_dropdown/index.js","webpack:///./components/admin_console/admin_sidebar_header/admin_sidebar_header.jsx","webpack:///./components/admin_console/admin_sidebar_header/index.js","webpack:///./components/admin_console/admin_sidebar_section.jsx","webpack:///./components/admin_console/highlight.tsx","webpack:///./components/admin_console/admin_sidebar/admin_sidebar.jsx","webpack:///./components/admin_console/admin_sidebar/index.js","webpack:///./components/admin_console/admin_console.jsx","webpack:///./components/admin_console/index.js"],"names":["NextIcon","React","PureComponent","render","className","this","props","additionalClassName","title","id","t","defaultMessage","PreviousIcon","CheckboxCheckedIcon","width","height","viewBox","stroke","strokeWidth","fillRule","transform","d","holders","defineMessages","sessionRevoked","channelCreated","establishedDM","nameUpdated","headerUpdated","channelDeleted","userAdded","userRemoved","attemptedRegisterApp","attemptedAllowOAuthAccess","successfullOAuthAccess","failedOAuthAccess","attemptedOAuthToken","successfullOAuthToken","oauthTokenFailed","attemptedLogin","authenticated","defauleMessage","successfullLogin","failedLogin","updatePicture","updateGeneral","attemptedPassword","successfullPassword","failedPassword","updatedRol","member","accountActive","accountInactive","by","byAdmin","sentEmail","attemptedReset","successfullReset","updateGlobalNotifications","attemptedWebhookCreate","succcessfullWebhookCreate","failedWebhookCreate","attemptedWebhookDelete","successfullWebhookDelete","failedWebhookDelete","logout","verified","revokedAll","loginAttempt","loginFailure","attemptedLicenseAdd","successfullLicenseAdd","failedExpiredLicenseAdd","failedInvalidLicenseAdd","licenseRemoved","AuditTable","componentDidMount","ids","audits","map","audit","user_id","actions","getMissingProfilesByIds","showUserId","showIp","showSession","accessList","i","length","auditInfo","formatAuditInfo","uContent","iContent","sContent","userId","ip","sessionId","descStyle","desc","toLowerCase","indexOf","key","timestamp","userIdContent","ipContent","sessionContent","formatMessage","intl","actionURL","action","replace","auditDesc","channelInfo","extra_info","split","channelNameField","channelObj","channelURL","channelName","getByName","display_name","username","getDirectTeammate","userIdField","profile","getUser","test","url","oauthInfo","clientIdField","oauthTokenFailure","trim","token","userInfo","userRoles","updateType","updateField","actingUserInfo","actingUser","user","currentUser","isSystemAdmin","roles","email","webhookInfo","licenseInfo","toTitleCase","actionDesc","lastIndexOf","substring","extraInfoDesc","date","Date","create_at","value","day","month","year","hour","minute","auditProfile","ip_address","session_id","intlShape","isRequired","PropTypes","array","bool","object","func","shape","injectIntl","connect","state","getCurrentUser","getChannelByName","dispatch","bindActionCreators","module","exports","AdminHeader","Component","children","FormattedAdminHeader","values","defaultProps","DoughnutChart","update","refs","canvas","ctx","ReactDOM","findDOMNode","getContext","dataCopy","JSON","parse","stringify","data","chart","Chart","type","options","initChart","componentDidUpdate","prevProps","Utils","componentWillUnmount","destroy","content","ref","LineChart","legend","display","chartOptions","labels","hasData","hasChart","Boolean","node","number","StatisticCount","loading","icon","count","isNaN","formatPostsPerDayData","chartData","datasets","fillColor","borderColor","pointBackgroundColor","pointBorderColor","pointHoverBackgroundColor","pointHoverBorderColor","index","row","push","name","formatUsersWithPostsPerDayData","label","StatTypes","Constants","SystemAnalytics","AdminActions","isLicensed","stats","skippedIntensiveQueries","TOTAL_POSTS","postCountsDay","POST_PER_DAY","botPostCountsDay","BOT_POST_PER_DAY","userCountsWithPostsDay","USERS_WITH_POSTS_PER_DAY","banner","postCount","postTotalGraph","botPostTotalGraph","activeUserGraph","advancedStats","advancedGraphs","sessionCount","commandCount","incomingCount","outgoingCount","chartDatas","Set","forEach","add","synchronizeChartData","TOTAL_SESSIONS","TOTAL_COMMANDS","TOTAL_IHOOKS","TOTAL_OHOOKS","TOTAL_WEBSOCKET_CONNECTIONS","TOTAL_MASTER_DB_CONNECTIONS","TOTAL_READ_DB_CONNECTIONS","channelTypeData","totalPublic","TOTAL_PUBLIC_CHANNELS","totalPrivate","TOTAL_PRIVATE_GROUPS","backgroundColor","hoverBackgroundColor","postTypeData","filePosts","TOTAL_FILE_POSTS","hashtagPosts","TOTAL_HASHTAG_POSTS","totalPosts","postTypeGraph","userCount","TOTAL_USERS","teamCount","TOTAL_TEAMS","channelCount","dailyActiveUsers","DAILY_ACTIVE_USERS","monthlyActiveUsers","MONTHLY_ACTIVE_USERS","firstRow","secondRow","thirdRow","getLicense","IsLicensed","entities","admin","analytics","Banner","description","TableChart","item","tooltip","Tooltip","tip","delayShow","OVERLAY_TIME_DELAY","placement","overlay","LAST_ANALYTICS_TEAM","TeamAnalytics","constructor","super","async","recentlyActiveUsers","getProfilesInTeam","General","PROFILE_CHUNK_SIZE","newUsers","setState","e","teamId","target","team","teams","BrowserStore","setGlobalItem","initialTeam","getData","getTeams","prevState","totalPostsCount","userActiveGraph","recentActiveUsers","locale","last_activity_at","getMonthLong","hour12","formatRecentUsersData","newlyCreatedUsers","formatNewUsersData","sort","a","b","aName","toUpperCase","bName","onChange","handleTeamChange","arrayOf","string","getTeamsList","getGlobalItem","getCurrentLocale","teamAnalytics","AdminSettings","errorTooltip","elm","currentTarget","querySelector","isElipsis","offsetWidth","scrollWidth","saveNeeded","setNavigationBlocked","preventDefault","doSubmit","saving","serverError","config","getConfigFromState","updateConfig","error","getStateFromConfig","callback","handleSaved","message","serverErrorId","server_error_id","str","defaultValue","n","parseInt","minimumValue","path","environmentConfig","getConfigValue","stateInit","Object","assign","reduce","obj","pathPart","setConfigValue","setValue","pathParts","part","slice","role","onSubmit","handleSubmit","renderTitle","renderSettings","disabled","canSave","onClick","savingMessage","localizeMessage","onMouseOver","openTooltip","onMouseOut","closeTooltip","Overlay","show","errorMessage","Settings","setByEnv","helpText","inputId","data-testid","htmlFor","BooleanSetting","disabledText","checked","handleChange","trueText","falseText","SettingsGroup","header","container","wrapperClass","contentClass","AdminTextSetting","sharedProps","isTextDisabled","labelClassName","inputClassName","footer","PluginItemState","PluginState","PLUGIN_STATE_NOT_RUNNING","PLUGIN_STATE_STARTING","PLUGIN_STATE_RUNNING","PLUGIN_STATE_FAILED_TO_START","PLUGIN_STATE_FAILED_TO_STAY_RUNNING","PLUGIN_STATE_STOPPING","propTypes","PluginItemStateDescription","PluginItem","pluginStatus","removing","handleEnable","handleDisable","handleRemove","showInstances","hasSettings","activateButton","activating","deactivating","active","data-plugin-id","removeButtonText","settingsButton","to","removeButton","notices","instances","some","instance","version","clusterSummary","cluster_id","PluginManagement","PluginSettings","Enable","enable","EnableUploads","enableUploads","AllowInsecureDownloadUrl","allowInsecureDownloadUrl","EnableMarketplace","enableMarketplace","EnableRemoteMarketplace","enableRemoteMarketplace","AutomaticPrepackagedPlugins","automaticPrepackagedPlugins","MarketplaceUrl","marketplaceUrl","RequirePluginSignature","requirePluginSignature","lastMessage","element","fileInput","files","fileSelected","file","force","uploading","uploadPlugin","confirmOverwriteUploadModal","overwritingUpload","getPlugins","msg","helpSubmitUpload","pluginDownloadUrl","installing","installPluginFromUrl","confirmOverwriteInstallModal","overwritingInstall","installFromUrl","pluginId","getAttribute","showRemoveModal","removePlugin","enablePlugin","disablePlugin","onConfirm","onCancel","overwriteButton","confirmButtonClass","confirmButtonText","ExperimentalSettings","RestrictSystemAdmin","isSetByEnv","enableUploadButton","fileName","uploadButtonText","pluginsList","pluginsContainer","pluginsListContainer","btnClass","plugins","pluginStatuses","p","settings_schema","settings","showRemovePluginModal","uploadHelpText","overwriteUploadPluginModal","renderOverwritePluginModal","handleOverwriteUploadPlugin","handleOverwriteUploadPluginCancel","removePluginModal","renderRemovePluginModal","handleRemovePlugin","handleRemovePluginCancel","renderEnablePluginsSetting","classNames","accept","handleUpload","handleSubmitUpload","getMarketplaceUrlHelpText","resolveRemoveModal","getPluginStatuses","then","MAPPING","enableTeamCreation","true","roleName","permission","Permissions","CREATE_TEAM","shouldHave","false","editOthersPosts","EDIT_OTHERS_POSTS","enableOnlyAdminIntegrations","MANAGE_INCOMING_WEBHOOKS","MANAGE_OUTGOING_WEBHOOKS","MANAGE_SLASH_COMMANDS","MANAGE_OAUTH","rolesFromMapping","mappingValues","rolesClone","pertinentRoleNames","roleNames","v1","v2","names","concat","roleNamesInMapping","keys","includes","purgeNonPertinentRoles","mappingKey","roleRules","Error","permissions","addPermissionToRole","permissionIndex","splice","removePermissionFromRole","mutateRolesBasedOnMapping","entries","roleClone","originalPermissionSet","newPermissionSet","difference","filter","x","has","size","RequestButton","busy","fail","success","doRequest","requestAction","err","errMsg","includeDetailedError","detailed_error","saveConfigAction","showSuccessMessage","successMessage","widgetClassNames","handleRequest","text","loadingText","buttonText","alternativeActionElement","DropdownSetting","isDisabled","MultiSelectSetting","newValue","selected","mustBePresent","join","notPresent","found","find","UNSAFE_componentWillReceiveProps","newProps","isMulti","getOptionLabel","delimiter","clearable","noResultsText","noResultText","calculateValue","errorText","RadioSetting","ColorSetting","color","hex","showPicker","closest","getPickerClass","contains","document","addEventListener","closePicker","removeEventListener","picker","onTextInput","togglePicker","style","GeneratedSetting","crypto","randomBytes","toString","regenerateText","regenerateHelpText","placeholder","regenerate","UserAutocompleteSetting","autocompleteUsers","userSuggestionProviders","GenericUserProvider","onItemSelected","handleUserSelected","listComponent","SuggestionList","listStyle","providers","requiredCharacters","openOnFocus","JobTable","job","status","JobStatuses","PENDING","IN_PROGRESS","SUCCESS","ERROR","CANCEL_REQUESTED","CANCELED","getExtraInfoText","millis","start_at","runningMillis","now","lastActivity","formatDate","formatTime","second","seconds","Math","round","minutes","getJobsByType","jobType","jobId","cancelJob","reload","createJob","cancelButton","data-job-id","handleCancelJob","interval","setInterval","clearInterval","items","jobs","getCancelButton","getStatus","getFinishAt","getRunLength","handleCreateJob","createJobButtonText","createJobHelpText","colSpan","ownProps","Selectors","Table","FileUploadSetting","Setting","uploadingText","fileType","$","upload_button","button","data-loading-text","RemoveFileSetting","remove_button","removingText","SchemaText","isMarkdown","textDefault","textValues","html","marked","breaks","sanitize","renderer","CustomRenderer","dangerouslySetInnerHTML","__html","isTranslated","renderTranslated","renderUntranslated","oneOfType","SchemaAdminSettings","confirmNeededId","showConfirmId","updatedRoles","schema","acc","val","SettingsTypes","TYPE_PERMISSION","permissions_mapping_name","Promise","all","editRole","translate","name_default","setting","label_markdown","label_values","label_default","help_text","helpTextValues","helpTextDefault","disabled_help_text","disabled_help_text_markdown","disabled_help_text_values","disabled_help_text_default","help_text_markdown","help_text_values","help_text_default","license","isHidden","sourceUrlKey","metadata","Map","tsetting","setFromMetadataField","inputData","get","TYPE_TEXT","TYPE_FILE_UPLOAD","buildSettingFunctions","onSetData","renderHelpText","loading_default","renderLabel","success_message","error_message","error_message_default","success_message_default","inputType","TYPE_NUMBER","TYPE_LONG_TEXT","dynamic_value","placeholder_default","maxLength","max_length","handlePermissionChange","enterpriseReady","BuildEnterpriseReady","option","o","display_name_default","selectedValue","selectedOptionForHelpText","locales","I18n","l","order","multiple","no_result","no_result_default","not_present","not_present_default","changedId","banner_type","renderBanner","regenerate_help_text","handleGeneratedChange","s","confirm","warning","clientWarning","job_type","render_job","setData","set_action","filename","removeFile","remove_action","remove_help_text","remove_help_text_default","remove_button_text","remove_button_text_default","removing_text","removing_text_default","uploading_text","uploading_text_default","upload_action","idpCertificateFileError","CustomComponent","component","componentInstance","registerSaveAction","setSaveNeeded","unRegisterSaveAction","cancelSubmit","showConfirm","showTitle","saveAction","indexOfSaveAction","saveActions","settingsList","results","hasSaveActionError","customComponentWrapperClass","hybridSchemaAndComponent","iconClassName","textClassName","isPlugin","buildTextSetting","TYPE_COLOR","buildColorSetting","TYPE_BOOL","buildBoolSetting","buildPermissionSetting","TYPE_DROPDOWN","buildDropdownSetting","TYPE_RADIO","buildRadioSetting","TYPE_BANNER","buildBannerSetting","TYPE_GENERATED","buildGeneratedSetting","TYPE_USERNAME","buildUsernameSetting","TYPE_BUTTON","buildButtonSetting","TYPE_LANGUAGE","buildLanguageSetting","TYPE_JOBSTABLE","buildJobsTableSetting","buildFileUploadSetting","TYPE_CUSTOM","buildCustomSetting","prevSchemaId","getSettingValue","previousValue","onConfigSave","mappingPart","hasOwnProperty","hasUnmetCondition","allConditionsAreMet","mappingPartIterator","mappingValueFromRoles","onConfigLoad","default","getSetting","unescapePathPart","CustomPluginSettings","getEnablePluginSetting","plugin","pluginEnabledConfigKey","escapePathPart","getPluginSchema","createSelector","getAdminConsoleCustomComponents","customComponents","escapedPluginId","bannerType","displayName","it","stateIsFalse","stateIsTrue","unshift","match","params","plugin_id","getRoles","ReloadIcon","ComplianceReports","loadingReports","getComplianceReports","runningReport","descInput","current","emails","emailsInput","keywords","keywordsInput","fromInput","end_at","toInput","createComplianceReport","createRef","enabled","getDateTime","list","reports","report","download","href","Client4","getBaseRoute","users","dataCell","runReport","margin","greenStatus","redStatus","whiteSpace","marginTop","getUsersForReports","profiles","complianceReports","usersMap","r","u","getConfig","ComplianceSettings","requests","createCompliance","selectComplianceReports","Audits","loadingAudits","getAudits","clear","marginBottom","renderComplianceReports","activityLogHeader","Compliance","CustomUrlSchemesSetting","arr","valueAsArray","stringToArray","arrayToString","CustomEnableDisableGuestAccountsSetting","submit","confirmNeeded","LicenseSettings","uploadLicense","getLicenseConfig","removeLicense","edition","licenseType","licenseKey","issued","Fragment","IssuedAt","startsAt","StartsAt","expiresAt","ExpiresAt","rel","sku","SkuShortName","Name","Company","Users","AdminPanel","onHeaderClick","titleId","titleDefault","subtitleId","subtitleDefault","subtitleValues","AdminPanelWithLink","linkTextId","linkTextDefault","MAX_TEAMS_PER_SCHEME_SUMMARY","PermissionsSchemeSummary","scheme","schemeName","confirmButton","deleting","showConfirmModal","handleDeleteConfirmed","handleDeleteCanceled","stopPropagation","deleteScheme","history","extraTeams","confirmModal","renderConfirmModal","goToEdit","delete","getSchemeTeams","makeGetSchemeTeams","schemeId","PAGE_SIZE","PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE","PermissionSchemesSettings","loadingMore","loadSchemes","page","schemes","promises","loadSchemeTeams","phase2MigrationIsComplete","docLink","jobsAreEnabled","clusterIsEnabled","teamOverrideUnavalableView","defaultMsg","documentationLink","hasCustomSchemes","CustomPermissionsSchemes","teamOverrideView","teamOverrideSchemesMigrationView","loadMoreSchemes","renderTeamOverrideSchemes","status_code","getSchemes","RunJobs","EnableCluster","BlockableLink","blocked","deferNavigation","browserHistory","Reflect","deleteProperty","handleClick","getNavigationBlocked","AccordionToggleIcon","fill","cx","cy","AdminPanelTogglable","open","onToggle","CheckboxPartialIcon","PermissionCheckbox","extraClass","PermissionDescription","isInheritLink","parentElement","selectRow","generateId","inherited","rowType","additionalValues","parentPermissionClicked","PermissionRow","readOnly","uniqId","classes","toggleSelect","PermissionGroup","expanded","result","getRecursivePermissions","permissionsToToggle","fromParent","prevPermissions","scope","PermissionsScope","isInScope","comesFromParent","parentRole","toggleSelectRow","g","toggleSelectSubGroup","combined","root","anyChecked","anyUnchecked","allPermissionsFromParent","hasPermissionsOnScope","permissionsRows","group","addVals","renderPermission","renderGroup","toggleSelectGroup","toggleExpanded","UNSAFE_componentWillUpdate","nextProps","EditPostTimeLimitButton","messageID","timeLimit","UNSET_POST_EDIT_TIME_LIMIT","PostEditTimeLimit","INT32_MAX","EditPostTimeLimitModal","postEditTimeLimit","newConfig","ServiceSettings","onClose","ALLOW_EDIT_POST_ALWAYS","Modal","dialogClassName","aria-labelledby","Header","closeButton","Title","componentClass","Body","handleOptionChange","ALLOW_EDIT_POST_TIME_LIMIT","min","step","max","handleSecondsChange","Footer","save","PermissionsTree","integrationsGroup","groups","teamsGroup","EnableIncomingWebhooks","EnableOutgoingWebhooks","EnableOAuthServiceProvider","EnableCommands","EnableCustomEmoji","CREATE_EMOJIS","DELETE_EMOJIS","DELETE_OTHERS_EMOJIS","EnableGuestAccounts","INVITE_GUEST","editTimeLimitModalIsVisible","ADDITIONAL_VALUES","toggleGroup","closePostTimeLimitModal","edit_post","editTimeLimitButton","openPostTimeLimitModal","INVITE_USER","GET_PUBLIC_LINK","ADD_USER_TO_TEAM","CREATE_PUBLIC_CHANNEL","MANAGE_PUBLIC_CHANNEL_PROPERTIES","MANAGE_PUBLIC_CHANNEL_MEMBERS","DELETE_PUBLIC_CHANNEL","CREATE_PRIVATE_CHANNEL","MANAGE_PRIVATE_CHANNEL_PROPERTIES","MANAGE_PRIVATE_CHANNEL_MEMBERS","DELETE_PRIVATE_CHANNEL","EDIT_POST","DELETE_POST","DELETE_OTHERS_POSTS","ADD_REACTION","REMOVE_REACTION","updateGroups","GuestPermissionsTree","EXCLUDED_PERMISSIONS","VIEW_MEMBERS","JOIN_PUBLIC_TEAMS","LIST_PUBLIC_TEAMS","JOIN_PRIVATE_TEAMS","LIST_PRIVATE_TEAMS","GUEST_INCLUDED_PERMISSIONS","PermissionSystemSchemeSettings","openRoles","all_users","scrollIntoView","behavior","block","toggleRole","setTimeout","selectedPermission","goToSelectedRow","system_user","team_user","channel_user","system_guest","team_guest","channel_guest","teamAdminPromise","team_admin","channelAdminPromise","channel_admin","restoreExcludedPermissions","deriveRolesFromAllUsers","guestRoles","restoreGuestPermissions","deriveRolesFromGuests","guests","haveGuestAccountsPermissions","systemGuestPromise","teamGuestPromise","channelGuestPromise","roleId","newOpenRoles","newPermissions","newRolesState","DefaultRolePermissions","GuestAccountsPermissions","loaded","togglePermission","system_admin","showResetDefaultModal","resetDefaults","rolesNeeded","GeneralConstants","SYSTEM_ADMIN_ROLE","SYSTEM_USER_ROLE","TEAM_ADMIN_ROLE","TEAM_USER_ROLE","CHANNEL_ADMIN_ROLE","CHANNEL_USER_ROLE","SYSTEM_GUEST_ROLE","TEAM_GUEST_ROLE","CHANNEL_GUEST_ROLE","loadRolesIfNeeded","every","loadRolesIntoState","componentWillReceiveProps","rolesRequest","getRolesByNames","TEAMS_PER_PAGE","TeamSelectorModal","setModalSearchTerm","onModalDismissed","onTeamsSelected","handleHide","confirmed","modalID","ModalIdentifiers","ADD_TEAMS_TO_SCHEME","scheme_id","confirmAddModal","confirmAddTeam","teamIds","v","loadingState","loadingTeams","prevPage","setTeamsLoadingState","loadTeams","term","multiselectComponent","searchTimeoutId","search","searchTerm","clearTimeout","searchTeams","SEARCH_TIMEOUT_MILLISECONDS","renderOption","isSelected","onAdd","onMouseMove","rowSelected","imageURLForTeam","renderValue","addValue","numRemainingText","buttonSubmitText","delete_at","currentSchemeId","alreadySelected","onHide","onExited","handleExit","optionRenderer","valueRenderer","perPage","handlePageChange","handleInput","handleDelete","handleAdd","placeholderText","views","modalSearch","startsWith","AdminPanelWithButton","onButtonClick","buttonTextId","buttonTextDefault","TeamInList","onRemoveTeam","getTeamStats","loadTeamStats","PermissionTeamSchemeSettings","default_team_user_role","default_team_admin_role","default_channel_user_role","default_channel_admin_role","teamUser","teamAdmin","channelUser","channelAdmin","isLoaded","baseTeam","baseChannel","schemeDescription","getStateRoles","allUsers","derived","patchScheme","createScheme","newScheme","teamUserPromise","channelUserPromise","teamEditPromises","currentTeams","serverTeams","addedTeams","removedTeams","updateTeamScheme","addTeamOpen","closeAddTeam","addTeams","handleNameChange","rows","handleDescriptionChange","openAddTeam","removeTeam","loadScheme","getScheme","getUserOptionsFromFilter","UserFilters","SYSTEM_ADMIN","UserListOptions","ROLE","SYSTEM_GUEST","INACTIVE","getStateFromProps","hasPostAllRole","UserUtils","hasPostAllPublicRole","hasUserAccessTokenRole","ManageRolesModal","oldRoles","trackEvent","SYSTEM_USER_ACCESS_TOKEN_ROLE","SYSTEM_POST_ALL_ROLE","SYSTEM_POST_ALL_PUBLIC_ROLE","updateUserRoles","trackRoleChanges","handleError","additionalRoles","userAccessTokenContent","is_bot","handlePostAllChange","handlePostAllPublicChange","userAccessTokensEnabled","handleUserAccessTokenChange","getProfilePictureUrl","last_picture_update","handleSystemAdminChange","prevUser","renderContents","handleSave","EnableUserAccessTokens","ManageTeamsDropdown","updateTeamMemberSchemeRoles","teamMember","team_id","onError","onMemberChange","handleRemoveUserFromTeam","isTeamAdmin","scheme_admin","isSysAdmin","isGuest","openLeft","ariaLabel","ItemAction","makeTeamAdmin","makeMember","group_constrained","removeFromTeam","RemoveFromTeamButton","ManageTeamsModal","getTeamMembers","getTeamsForUser","filterAndSortTeamsByDisplayName","getTeamMembersForUser","teamMembers","removeUserFromTeam","handleMemberRemove","teamList","handleMemberChange","systemAdminIndicator","loadTeamsAndTeamMembers","RevokeTokenButton","revokeUserAccessToken","tokenId","ManageTokensModal","userAccessTokens","tokenList","userAccessTokensList","prevUserId","getUserAccessTokensForUser","userAccessTokensByUser","ResetPasswordModal","currentPassword","errorMsg","serverErrorCurrentPass","password","valid","passwordConfig","serverErrorNewPass","updateUserPassword","onModalSubmit","urlClass","auth_service","newPasswordFocus","currentUserId","urlClassCurrentPass","data-toggle","autoFocus","doCancel","minimumLength","requireLowercase","requireNumber","requireSymbol","requireUppercase","getCurrentUserId","getPasswordConfig","ResetEmailModal","isEmail","adminResetEmail","UserListRowWithError","errorObj","buttons","Action","totalUsers","actionProps","actionUserProps","emailStyle","extraInfo","userCountID","userCountEmail","src","getStatusForUserId","UserListRow","ROWS_FROM_BOTTOM_TO_OPEN_UP","SystemUsersDropdown","updateUserActive","onUpdateActiveResult","doManageTeams","doManageRoles","doManageTokens","doPasswordReset","doEmailReset","adminResetMfa","shouldDisableBotsWhenOwnerIsDeactivated","loadBots","Integrations","START_PAGE_NUM","showDeactivateMemberModal","EMAIL_SERVICE","confirmationMessage","messageForUsersWithBotAccounts","bot","bots","owner_id","siteURL","getSiteURL","deactivateMemberButton","handleDeactivateMember","handleDeactivateCancel","showRevokeSessionsModal","me","revokeAllSessionsForUser","emitUserLoggedOutEvent","showPromoteToUserModal","promoteGuestToUser","showDemoteToGuestModal","demoteUserToGuest","promoteUserButton","handlePromoteToUserConfirm","handlePromoteToUserCancel","demoteGuestButton","handleDemoteToGuestConfirm","handleDemoteToGuestCancel","revokeUserButtonButton","handleRevokeSessions","handleRevokeSessionsCancel","enableUserAccessTokens","messageId","DisableBotsWhenOwnerIsDeactivated","currentRoles","showMakeActive","showMakeNotActive","showManageTeams","showRevokeSessions","showMfaReset","mfaEnabled","mfa_active","disableActivationToggle","LDAP_SERVICE","deactivateMemberModal","renderDeactivateMemberModal","revokeSessionsModal","renderRevokeSessionsModal","promoteToUserModal","renderPromoteToUserModal","demoteToGuestModal","renderDemoteToGuestModal","openUp","renderAccessToken","handleMakeActive","handleShowDeactivateMemberModal","handleManageRoles","handleManageTeams","handleManageTokens","handleResetMfa","experimentalEnableAuthenticationTransfer","handleResetPassword","handleResetEmail","handlePromoteToUser","handleDemoteToGuest","REVOKE_USER_ACCESS_TOKEN","handleShowRevokeSessionsModal","getBotAccounts","SystemUsersList","nextPage","showManageTeamsModal","showManageRolesModal","showManageTokensModal","showPasswordModal","showEmailModal","getInfoForUser","info","service","SAML_SERVICE","userID","renderCount","total","startCount","endCount","isSearch","previousPage","onTermChange","rowComponentType","doManageTeamsDismiss","doManageRolesDismiss","doManageTokensDismiss","doPasswordResetSubmit","doPasswordResetDismiss","doEmailResetSubmit","doEmailResetDismiss","usersPerPage","focusOnMount","renderFilterRow","ALL_USERS","NO_TEAM","USER_ID_LENGTH","getUsers","filters","userSelectorOptionsFromFilter","searchProfilesInTeam","searchProfiles","getProfiles","getProfilesWithoutTeam","getNonBotUsers","USERS_PER_PAGE","SystemUsers","loadProfilesWithoutTeam","loadProfilesAndTeamMembers","doSearch","SearchUserTeamFilter","getStandardAnalytics","loadDataForTeam","setSystemUsersSearch","revokeSessionsForAllUsers","logError","showRevokeAllSessionsModal","debounce","UserSearchOptions","ALLOW_INACTIVE","searchUserOptionsFromFilter","WITHOUT_TEAM","allow_inactive","getUserByTokenOrId","getUserAccessToken","getUserById","revokeAllButton","handleRevokeAllSessions","handleRevokeAllSessionsCancel","onInput","handleFilterChange","searching","revokeAllUsersModal","renderRevokeAllUsersModal","siteName","handleTermChange","handleShowRevokeAllSessionsModal","SiteName","EnableMultifactorAuthentication","ExperimentalEnableAuthenticationTransfer","systemUsersSearch","total_member_count","Stats","TOTAL_INACTIVE_USERS","AdminButtonOutline","Bullet","first_name","last_name","nickname","AdminUserCard","body","AbstractList","performSearch","newState","getTeamsData","onPageChangedCallback","getPaging","headerLabels","headerLabel","emptyListTextId","emptyListTextDefaultMessage","pageStart","pageEnd","renderRow","lastPage","firstPage","renderHeaderLabels","renderRows","removeGroup","EllipsisHorizontalIcon","aria-label","TeamListDropdown","isAdmin","isMember","scheme_user","scheme_guest","showMakeTeamAdmin","showMakeTeamMember","aria-expanded","doMakeUserTeamAdmin","doMakeUserTeamMember","doRemoveUserFromTeam","buttonClass","TeamRow","allow_open_invite","teamIconUrl","renderTeamType","renderTeamRole","flexGrow","minWidth","marginLeft","TeamList","memberships","mergeTeamsWithMemberships","teamsWithMemberships","userDetailCallback","getTeamsAndMemberships","refreshTeams","EmailIcon","AtIcon","ShieldOutlineIcon","SystemUserDetail","addUserToTeam","finally","emailChanged","getAuthenticationText","authLine","position","handleEmailChange","renderActivateDeactivate","renderRemoveMFA","setTeamsData","pathname","navigationBlocked","showNavigationPrompt","cancelNavigation","confirmNavigation","NEXT_BUTTON_TIMEOUT","Logs","nextDisabled","nextTimeoutId","logPanel","scrollTop","scrollHeight","focus","nextButton","previousButton","logs","fontFamily","tabIndex","loadingLogs","getLogs","HTTP_STATUS_OK","BrandImageSetting","prop","brandImage","deleteBrandImage","brandImageExists","uploadBrandImage","brandImageTimestamp","fetch","getBrandImageUrl","resp","image","reader","FileReader","img","onload","attr","readAsDataURL","letbtnDefaultClass","alt","aria-hidden","handleDeleteButtonPressed","handleImageChange","GroupRow","onCheckToggle","primary_key","link","unlink","mattermost_group_id","has_syncables","failed","unlinkHandler","linkHandler","onRowClick","renderLinked","renderActions","LDAP_GROUPS_PAGE_SIZE","FILTER_STATE_SEARCH_KEY_MAPPING","filterIsConfigured","is_configured","filterIsUnconfigured","filterIsLinked","is_linked","filterIsUnlinked","GroupsList","showFilters","searchGroups","newChecked","hasSelectedLinked","selectionActionButtonType","linkSelectedGroups","unlinkSelectedGroups","RegExp","searchString","q","opts","re","regex","getLdapGroups","KeyCodes","ENTER","k","stateKey","newSearchString","stringFilterPresent","updates","nativeEvent","stopImmediatePropagation","handleFilterCheck","onKeyUp","handleGroupSearchKeyUp","resetFiltersAndSearch","closeFilters","once","renderSearchFilters","renderSelectionActionButton","getSortedListOfLdapGroups","ldapGroups","localeCompare","getLdapGroupsCount","fetchLdapGroups","linkLdapGroup","unlinkLdapGroup","GroupSettings","GroupProfile","GroupTeamsAndChannelsRow","onRemoveItem","showConfirmationModal","onChangeRoles","schemeAdmin","onToggleCollapse","dropDown","isNil","currentRole","roleToBe","testid","changeRoles","extraClasses","arrowIcon","hasChildren","collapsed","toggleCollapse","channelIcon","typeText","displayType","removeItem","displayAssignedRolesDropdown","GroupTeamsAndChannels","Groups","SYNCABLE_TYPE_TEAM","getGroupSyncables","SYNCABLE_TYPE_CHANNEL","channels","existingTeams","teamEntries","team_type","channel","team_display_name","channelEntriesByTeam","channel_type","channel_display_name","channel_id","teamChannels","teamsAndChannelsToEntries","entry","GroupUsersRow","lastPictureUpdate","GROUP_MEMBERS_PAGE_SIZE","GroupUsers","getMembers","groupID","members","renderPagination","CHANNELS_PER_PAGE","ChannelSelectorModal","onChannelsSelected","findIndex","loadingChannels","setChannelsLoadingState","loadChannels","response","stateChannelIDs","stateChannel","serverChannel","compareChannels","searchChannels","searchAllChannels","GroupDetails","addChannelOpen","auto_add","loadingTeamsAndChannels","patchGroupSyncable","groupTeams","groupChannels","memberCount","openAddChannel","closeAddChannel","addChannels","getGroup","group_id","getGroupTeams","getGroupChannels","getGroupMembers","getGroupMemberCount","fetchGroup","fetchMembers","fetchGroupSyncables","linkGroupSyncable","unlinkGroupSyncable","handleRowClick","renderManagementMethodText","offset","handleTeamSearchKeyUp","searchBarChangeHandler","resetSearch","searchMode","searchTotalCount","total_count","pageResetKey","Array","pagination","onTeamClick","searchBar","absProps","cloneDeep","getDataBySearch","getSortedListOfTeams","totalCount","pageSize","fetchTeams","TeamsSettings","RemoveConfirmModal","amount","inChannel","modalClass","AdminGroupUsersRow","padding","renderRolesColumn","renderGroupsColumn","AdminGroupUsers","UsersToBeRemovedModal","NeedGroupsError","NeedDomainsError","UsersWillBeRemovedError","dialogType","dialogProps","SaveChangesPanel","cancelLink","TeamProfile","Toggle","toggled","onText","offText","aria-pressed","LineSwitch","subTitle","singleLine","last","SyncGroupsToggle","syncChecked","allAllowedChecked","allowedDomainsChecked","allowedDomains","AllowAllToggle","AllowedDomainsToggle","TeamModes","setNewGroupRole","member_count","displayCurrentRole","displayRoleToBe","GroupList","totalGroups","isModeSync","onGroupRemoved","resolve","List","TeamGroups","onAddCallback","removedGroups","AddGroupsToTeamModal","skipCommit","excludeGroups","includeGroups","TeamDetails","gid","processGroupsChange","showRemoveConfirmation","origGroups","teamID","patchTeamPromise","patchTeam","allowed_domains","patchTeamSyncable","resultWithError","getGroups","groupIDs","allGroups","usersToRemove","og","hideRemoveUsersModal","setToggles","handleGroupChange","handleGroupRemoved","showRemoveUsersModal","getTeam","membersMinusGroupMembers","ex","getGroupsAssociatedToTeam","getAllGroups","fetchTeam","fetchAssociatedGroups","ChannelRow","PRIVATE_CHANNEL","ChannelList","handleChannelSearchKeyUp","notAssociatedToGroup","excludeDefaultChannels","onChannelClick","compareByDisplayName","getSortedListOfChannels","getAllChannels","c","OPEN_CHANNEL","ChannelsSettings","ConvertConfirmModal","toPublic","confirmMsgId","cancelButtonClass","cancelButtonText","ConvertAndRemoveConfirmModal","removeAmount","convertMessageId","isSynced","isPublic","isDefault","ChannelModes","ChannelGroups","synced","AddGroupsToChannelModal","ChannelProfile","ChannelDetails","isOriginallyPublic","isPrivacyChanging","showConvertConfirmModal","showRemoveConfirmModal","showConvertAndRemoveConfirmModal","channelID","convert","updateChannelPrivacy","res","patchChannel","patchChannelSyncable","hideConvertConfirmModal","hideRemoveConfirmModal","hideConvertAndRemoveConfirmModal","onSave","DEFAULT_CHANNEL","getChannel","getGroupsAssociatedToChannel","fetchChannel","PUSH_NOTIFICATIONS_OFF","PUSH_NOTIFICATIONS_MHPNS","PUSH_NOTIFICATIONS_MTPNS","PUSH_NOTIFICATIONS_CUSTOM","exportFormats","EXPORT_FORMAT_CSV","EXPORT_FORMAT_ACTIANCE","EXPORT_FORMAT_GLOBALRELAY","ClusterTable","versionMismatch","statusGreen","configMismatch","configHash","singleItem","clusterInfos","config_hash","clusterInfo","statusYellow","hostname","ipaddress","clusterCell","clusterTable","ClusterTableContainer","getClusterStatus","load","configLoadedFromCluster","CustomTermsOfServiceSettings","SupportSettings","CustomTermsOfServiceEnabled","termsEnabled","CustomTermsOfServiceReAcceptancePeriod","parseIntNonZero","reAcceptancePeriod","DEFAULT_TERMS_OF_SERVICE_RE_ACCEPTANCE_PERIOD","receivedTermsText","termsText","createTermsOfService","handleAPIError","loadingTermsText","getTermsOfService","CustomTermsOfService","handleTermsEnabledChange","handleTermsTextChange","MAX_TERMS_OF_SERVICE_TEXT_LENGTH","handleReAcceptancePeriodChange","SECTION_NONE","SECTION_TLS","SECTION_STARTTLS","CONNECTION_SECURITY_HELP_TEXT_EMAIL","cellPadding","CONNECTION_SECURITY_HELP_TEXT_LDAP","CONNECTION_SECURITY_HELP_TEXT_WEBSERVER","WEBSERVER_MODE_HELP_TEXT","LOG_LEVEL_OPTIONS","MEBIBYTE","pow","isnt","both","funcs","either","stateMatches","stateEquals","configIsTrue","configIsFalse","licensed","licensedForFeature","feature","AdminDefinition","about","sectionTitle","sectionTitleDefault","title_default","searchableStrings","reporting","system_analytics","team_statistics","server_logs","ServerLogs","user_management","system_user_detail","system_users","group_detail","team_detail","TeamSettings","channel_detail","ChannelSettings","systemScheme","teamSchemeDetail","teamScheme","environment","web_server","testSiteURL","DefinitionConstants","reloadConfig","featureName","recycleDatabaseConnections","invalidateAllCaches","database","reloadConfiguration","SqlSettings","MaxIdleConns","maxIdleConns","MaxOpenConns","maxOpenConns","Trace","trace","QueryTimeout","queryTimeout","ConnMaxLifetimeMilliseconds","parseIntNonNegative","connMaxLifetimeMilliseconds","MinimumHashtagLength","minimumHashtagLength","dataSource","recycleDbButton","recycleDatabaseConnection","driverName","DriverName","DataSource","elasticsearch","ElasticsearchSettings","ConnectionUrl","connectionUrl","SkipTLSVerification","skipTLSVerification","Username","Password","Sniff","sniff","EnableIndexing","enableIndexing","EnableSearching","enableSearching","EnableAutocomplete","enableAutocomplete","configTested","canPurgeAndIndex","elasticsearchTest","handleSettingChanged","doTestConfig","JobTypes","ELASTICSEARCH_POST_INDEXING","getExtraInfo","elasticsearchPurgeIndexes","percent","Number","progress","storage","configVal","displayVal","testS3Connection","image_proxy","smtp","testSmtp","push_notification_server","pushNotificationServerType","agree","pushNotificationServer","MHPNS","MTPNS","EmailSettings","SendPushNotifications","PushNotificationServer","MaxNotificationsPerChannel","maxNotificationsPerChannel","pushNotificationServerTypes","tosCheckbox","sendHelpText","pushServerHelpText","handleAgreeChange","handleDropdownChange","isPushNotificationServerSetByEnv","high_availability","ClusterSettings","ClusterName","OverrideHostname","UseIpAddress","UseExperimentalGossip","GossipPort","StreamingPort","showWarning","Cluster","clusterId","clusterTableContainer","overrideHandleChange","rate_limiting","logging","boldedLogLevel","previousVal","session_lengths","metrics","developer","site","customization","MAX_SITENAME_LENGTH","MAX_CUSTOM_BRAND_TEXT_LENGTH","localization","users_and_teams","TEAMMATE_NAME_DISPLAY","SHOW_USERNAME","SHOW_NICKNAME_FULLNAME","SHOW_FULLNAME","notifications","announcement_banner","emoji","posts","file_sharing_downloads","public_links","authentication","signup","invalidateAllEmailInvites","SendEmailNotifications","PasswordSettings","MinimumLength","passwordMinimumLength","MIN_PASSWORD_LENGTH","Lowercase","lowercase","Uppercase","uppercase","Symbol","symbol","MaximumLoginAttempts","maximumLoginAttempts","minLength","MAX_PASSWORD_LENGTH","sampleErrorMsgId","sampleErrorMsg","getSampleErrorMsg","handlePasswordLengthChange","defaultChecked","passwordLowercase","handleCheckboxChange","passwordUppercase","passwordNumber","passwordSymbol","mfa","ldap","ldapTest","LDAP_SYNC","linkedLdapGroupsCount","ldapUsers","deleteCount","updateCount","totalLdapGroupsCount","groupDeleteCount","groupMemberDeleteCount","groupMemberAddCount","ldap_users_count","delete_count","update_count","ldap_groups_count","total_ldap_groups_count","group_delete_count","group_member_delete_count","group_member_add_count","saml","getSamlMetadataFromIdp","uploadIdpSamlCertificate","setSamlIdpCertificateFromMetadata","removeIdpSamlCertificate","siteUrl","SiteURL","addSlashIfNeeded","uploadPrivateSamlCertificate","removePrivateSamlCertificate","uploadPublicSamlCertificate","removePublicSamlCertificate","gitlab","GitLabSettings","UserApiEndpoint","Url","oauth","oauthType","GITLAB_SERVICE","Office365Settings","OFFICE365_SERVICE","GoogleSettings","GOOGLE_SERVICE","guest_access","plugin_management","custom","integrations","integration_management","bot_accounts","gif","cors","compliance","data_retention","DataRetentionSettings","EnableMessageDeletion","enableMessageDeletion","EnableFileDeletion","enableFileDeletion","MessageRetentionDays","messageRetentionDays","FileRetentionDays","fileRetentionDays","DeletionJobStartTime","deletionJobStartTime","messageList","days","handleSaveConfirmed","handleSaveCanceled","enableMessageDeletionOptions","enableFileDeletionOptions","messageRetentionDaysSetting","fileRetentionDaysSetting","DATA_RETENTION","String","message_export","MessageExportSettings","EnableExport","enableComplianceExport","ExportFormat","exportFormat","DailyRunTime","exportJobStartTime","GlobalRelaySettings","CustomerType","globalRelayCustomerType","SmtpUsername","globalRelaySmtpUsername","SmtpPassword","globalRelaySmtpPassword","EmailAddress","globalRelayEmailAddress","messages_exported","exportFormatOptions","globalRelaySettings","globalRelayEmail","dropdownHelpText","MESSAGE_EXPORT","getJobDetails","custom_terms_of_service","experimental","experimental_features","getAdminDefinition","adminConsoleReducers","adminDefinition","reducers","reducer","adminConsoleCustomComponents","DiscardChangesModal","extractTextsFromPlugin","texts","extractTextFromSetting","stripMarkdown","settingsTexts","extractTextsFromSection","section","searchableString","generateIndex","idx","FlexSearch","addToIndex","adminDefinitionsToUrlsAndTexts","pluginsObj","getPluginEntries","AdminSidebarCategory","sectionClass","parentLink","activeClassName","clonedChildren","Children","child","cloneElement","MenuItemBlockableLinkImpl","MenuItemBlockableLink","menuItem","AdminNavbarDropdown","GlobalActions","teamToRender","switchTeams","teamsArray","Group","ItemExternalLink","ItemToggleModalRedux","modalId","ABOUT","AboutBuildModal","appTitle","handleLogout","getMyTeams","SidebarHeader","profilePicture","AdminSidebarHeader","AdminSidebarSection","subsection","getLink","sidebarItem","Highlight","markInstance","unmark","Mark","mark","accuracy","leading","trailing","redrawHighlight","renderScrollView","renderScrollThumbHorizontal","renderScrollThumbVertical","AdminSidebar","sections","onFilterChange","query","location","visibleSections","currentSiteName","isVisible","buildEnterpriseReady","definition","sidebarSections","sectionIndex","sidebarItems","itemIndex","moreSidebarItems","renderPluginsMenu","customPlugins","nameCompare","searchRef","updateTitle","isEqual","filterClearTooltip","autoHide","autoHideTimeout","autoHideDuration","renderThumbHorizontal","renderThumbVertical","renderView","handleClearFilter","OverlayTrigger","renderRootMenu","pure","AdminConsole","extraProps","schemas","schemaRoutes","defaultUrl","getEnvironmentConfig","mainRolesLoaded","isCurrentUserSystemAdmin","unauthorizedRoute","discardChangesModal","renderRoutes","withRouter","getGeneralConfig","LocalStorageStore","getPreviousTeamId"],"mappings":"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","file":"7.7d87806944e82f4010cb.js","sourcesContent":["// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class NextIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-1x fa-angle-right' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.next'), defaultMessage: 'Next Icon'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport LocalizedIcon from 'components/localized_icon';\n\nimport {t} from 'utils/i18n';\n\ntype Props = {\n    additionalClassName: string | null;\n}\n\nexport default class PreviousIcon extends React.PureComponent<Props> {\n    public static defaultProps: Props = {\n        additionalClassName: null,\n    };\n\n    public render(): JSX.Element {\n        const className = 'fa fa-1x fa-angle-left' + (this.props.additionalClassName ? ' ' + this.props.additionalClassName : '');\n        return (\n            <LocalizedIcon\n                className={className}\n                title={{id: t('generic_icons.previous'), defaultMessage: 'Previous Icon'}}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxCheckedIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-285.000000, -933.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---Public-Channels'\n                                        transform='translate(12.000000, 35.000000)'\n                                    >\n                                        <g\n                                            id='Stacked-Group'\n                                            transform='translate(0.000000, 5.000000)'\n                                        >\n                                            <g id='data-table/1st/row-checkbox-label-base'>\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 L5,3 C3.9,3 3,3.9 3,5 L3,19 C3,20.1 3.9,21 5,21 L19,21 C20.1,21 21,20.1 21,19 L21,5 C21,3.9 20.1,3 19,3 L19,3 Z M10,17 L5,12.1923077 L6.4,10.8461538 L10,14.3076923 L17.6,7 L19,8.34615385 L10,17 L10,17 Z'\n                                                        id='checkbox---checked'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {defineMessages, FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport {intlShape} from 'utils/react_intl';\nimport {getDirectTeammate, isSystemAdmin, toTitleCase} from 'utils/utils.jsx';\n\nconst holders = defineMessages({\n    sessionRevoked: {\n        id: t('audit_table.sessionRevoked'),\n        defaultMessage: 'The session with id {sessionId} was revoked',\n    },\n    channelCreated: {\n        id: t('audit_table.channelCreated'),\n        defaultMessage: 'Created the {channelName} channel',\n    },\n    establishedDM: {\n        id: t('audit_table.establishedDM'),\n        defaultMessage: 'Established a direct message channel with {username}',\n    },\n    nameUpdated: {\n        id: t('audit_table.nameUpdated'),\n        defaultMessage: 'Updated the {channelName} channel name',\n    },\n    headerUpdated: {\n        id: t('audit_table.headerUpdated'),\n        defaultMessage: 'Updated the {channelName} channel header',\n    },\n    channelDeleted: {\n        id: t('audit_table.channelDeleted'),\n        defaultMessage: 'Archived the channel with the URL {url}',\n    },\n    userAdded: {\n        id: t('audit_table.userAdded'),\n        defaultMessage: 'Added {username} to the {channelName} channel',\n    },\n    userRemoved: {\n        id: t('audit_table.userRemoved'),\n        defaultMessage: 'Removed {username} to the {channelName} channel',\n    },\n    attemptedRegisterApp: {\n        id: t('audit_table.attemptedRegisterApp'),\n        defaultMessage: 'Attempted to register a new OAuth Application with ID {id}',\n    },\n    attemptedAllowOAuthAccess: {\n        id: t('audit_table.attemptedAllowOAuthAccess'),\n        defaultMessage: 'Attempted to allow a new OAuth service access',\n    },\n    successfullOAuthAccess: {\n        id: t('audit_table.successfullOAuthAccess'),\n        defaultMessage: 'Successfully gave a new OAuth service access',\n    },\n    failedOAuthAccess: {\n        id: t('audit_table.failedOAuthAccess'),\n        defaultMessage: 'Failed to allow a new OAuth service access - the redirect URI did not match the previously registered callback',\n    },\n    attemptedOAuthToken: {\n        id: t('audit_table.attemptedOAuthToken'),\n        defaultMessage: 'Attempted to get an OAuth access token',\n    },\n    successfullOAuthToken: {\n        id: t('audit_table.successfullOAuthToken'),\n        defaultMessage: 'Successfully added a new OAuth service',\n    },\n    oauthTokenFailed: {\n        id: t('audit_table.oauthTokenFailed'),\n        defaultMessage: 'Failed to get an OAuth access token - {token}',\n    },\n    attemptedLogin: {\n        id: t('audit_table.attemptedLogin'),\n        defaultMessage: 'Attempted to login',\n    },\n    authenticated: {\n        id: t('audit_table.authenticated'),\n        defauleMessage: 'Successfully authenticated',\n    },\n    successfullLogin: {\n        id: t('audit_table.successfullLogin'),\n        defaultMessage: 'Successfully logged in',\n    },\n    failedLogin: {\n        id: t('audit_table.failedLogin'),\n        defaultMessage: 'FAILED login attempt',\n    },\n    updatePicture: {\n        id: t('audit_table.updatePicture'),\n        defaultMessage: 'Updated your profile picture',\n    },\n    updateGeneral: {\n        id: t('audit_table.updateGeneral'),\n        defaultMessage: 'Updated the general settings of your account',\n    },\n    attemptedPassword: {\n        id: t('audit_table.attemptedPassword'),\n        defaultMessage: 'Attempted to change password',\n    },\n    successfullPassword: {\n        id: t('audit_table.successfullPassword'),\n        defaultMessage: 'Successfully changed password',\n    },\n    failedPassword: {\n        id: t('audit_table.failedPassword'),\n        defaultMessage: 'Failed to change password - tried to update user password who was logged in through OAuth',\n    },\n    updatedRol: {\n        id: t('audit_table.updatedRol'),\n        defaultMessage: 'Updated user role(s) to ',\n    },\n    member: {\n        id: t('audit_table.member'),\n        defaultMessage: 'member',\n    },\n    accountActive: {\n        id: t('audit_table.accountActive'),\n        defaultMessage: 'Account activated',\n    },\n    accountInactive: {\n        id: t('audit_table.accountInactive'),\n        defaultMessage: 'Account deactivated',\n    },\n    by: {\n        id: t('audit_table.by'),\n        defaultMessage: ' by {username}',\n    },\n    byAdmin: {\n        id: t('audit_table.byAdmin'),\n        defaultMessage: ' by an admin',\n    },\n    sentEmail: {\n        id: t('audit_table.sentEmail'),\n        defaultMessage: 'Sent an email to {email} to reset your password',\n    },\n    attemptedReset: {\n        id: t('audit_table.attemptedReset'),\n        defaultMessage: 'Attempted to reset password',\n    },\n    successfullReset: {\n        id: t('audit_table.successfullReset'),\n        defaultMessage: 'Successfully reset password',\n    },\n    updateGlobalNotifications: {\n        id: t('audit_table.updateGlobalNotifications'),\n        defaultMessage: 'Updated your global notification settings',\n    },\n    attemptedWebhookCreate: {\n        id: t('audit_table.attemptedWebhookCreate'),\n        defaultMessage: 'Attempted to create a webhook',\n    },\n    succcessfullWebhookCreate: {\n        id: t('audit_table.successfullWebhookCreate'),\n        defaultMessage: 'Successfully created a webhook',\n    },\n    failedWebhookCreate: {\n        id: t('audit_table.failedWebhookCreate'),\n        defaultMessage: 'Failed to create a webhook - bad channel permissions',\n    },\n    attemptedWebhookDelete: {\n        id: t('audit_table.attemptedWebhookDelete'),\n        defaultMessage: 'Attempted to delete a webhook',\n    },\n    successfullWebhookDelete: {\n        id: t('audit_table.successfullWebhookDelete'),\n        defaultMessage: 'Successfully deleted a webhook',\n    },\n    failedWebhookDelete: {\n        id: t('audit_table.failedWebhookDelete'),\n        defaultMessage: 'Failed to delete a webhook - inappropriate conditions',\n    },\n    logout: {\n        id: t('audit_table.logout'),\n        defaultMessage: 'Logged out of your account',\n    },\n    verified: {\n        id: t('audit_table.verified'),\n        defaultMessage: 'Successfully verified your email address',\n    },\n    revokedAll: {\n        id: t('audit_table.revokedAll'),\n        defaultMessage: 'Revoked all current sessions for the team',\n    },\n    loginAttempt: {\n        id: t('audit_table.loginAttempt'),\n        defaultMessage: ' (Login attempt)',\n    },\n    loginFailure: {\n        id: t('audit_table.loginFailure'),\n        defaultMessage: ' (Login failure)',\n    },\n    attemptedLicenseAdd: {\n        id: t('audit_table.attemptedLicenseAdd'),\n        defaultMessage: 'Attempted to add new license',\n    },\n    successfullLicenseAdd: {\n        id: t('audit_table.successfullLicenseAdd'),\n        defaultMessage: 'Successfully added new license',\n    },\n    failedExpiredLicenseAdd: {\n        id: t('audit_table.failedExpiredLicenseAdd'),\n        defaultMessage: 'Failed to add a new license as it has either expired or not yet been started',\n    },\n    failedInvalidLicenseAdd: {\n        id: t('audit_table.failedInvalidLicenseAdd'),\n        defaultMessage: 'Failed to add an invalid license',\n    },\n    licenseRemoved: {\n        id: t('audit_table.licenseRemoved'),\n        defaultMessage: 'Successfully removed a license',\n    },\n});\n\nexport class AuditTable extends React.PureComponent {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        audits: PropTypes.array.isRequired,\n        showUserId: PropTypes.bool,\n        showIp: PropTypes.bool,\n        showSession: PropTypes.bool,\n        currentUser: PropTypes.object.isRequired,\n        getUser: PropTypes.func.isRequired,\n        getByName: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n            getMissingProfilesByIds: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    componentDidMount() {\n        const ids = this.props.audits.map((audit) => audit.user_id);\n        this.props.actions.getMissingProfilesByIds(ids);\n    }\n\n    render() {\n        const audits = this.props.audits;\n        const showUserId = this.props.showUserId;\n        const showIp = this.props.showIp;\n        const showSession = this.props.showSession;\n        var accessList = [];\n\n        for (var i = 0; i < audits.length; i++) {\n            const audit = audits[i];\n            const auditInfo = this.formatAuditInfo(audit);\n\n            let uContent;\n            if (showUserId) {\n                uContent = <td className='word-break--all'>{auditInfo.userId}</td>;\n            }\n\n            let iContent;\n            if (showIp) {\n                iContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.ip}</td>;\n            }\n\n            let sContent;\n            if (showSession) {\n                sContent = <td className='whitespace--nowrap word-break--all'>{auditInfo.sessionId}</td>;\n            }\n\n            let descStyle = '';\n            if (auditInfo.desc.toLowerCase().indexOf('fail') !== -1) {\n                descStyle = ' color--error';\n            }\n\n            accessList[i] = (\n                <tr key={audit.id}>\n                    <td className='whitespace--nowrap word-break--all'>{auditInfo.timestamp}</td>\n                    {uContent}\n                    <td\n                        className={'word-break--all' + descStyle}\n                    >\n                        {auditInfo.desc}\n                    </td>\n                    {iContent}\n                    {sContent}\n                </tr>\n            );\n        }\n\n        let userIdContent;\n        if (showUserId) {\n            userIdContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.userId'\n                        defaultMessage='User ID'\n                    />\n                </th>\n            );\n        }\n\n        let ipContent;\n        if (showIp) {\n            ipContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.ip'\n                        defaultMessage='IP Address'\n                    />\n                </th>\n            );\n        }\n\n        let sessionContent;\n        if (showSession) {\n            sessionContent = (\n                <th>\n                    <FormattedMessage\n                        id='audit_table.session'\n                        defaultMessage='Session ID'\n                    />\n                </th>\n            );\n        }\n\n        return (\n            <table className='table'>\n                <thead>\n                    <tr>\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.timestamp'\n                                defaultMessage='Timestamp'\n                            />\n                        </th>\n                        {userIdContent}\n                        <th>\n                            <FormattedMessage\n                                id='audit_table.action'\n                                defaultMessage='Action'\n                            />\n                        </th>\n                        {ipContent}\n                        {sessionContent}\n                    </tr>\n                </thead>\n                <tbody>\n                    {accessList}\n                </tbody>\n            </table>\n        );\n    }\n\n    formatAuditInfo(audit) {\n        const {formatMessage} = this.props.intl;\n        const actionURL = audit.action.replace(/\\/api\\/v[1-9]/, '');\n        let auditDesc = '';\n\n        if (actionURL.indexOf('/channels') === 0) {\n            const channelInfo = audit.extra_info.split(' ');\n            const channelNameField = channelInfo[0].split('=');\n\n            let channelURL = '';\n            let channelObj;\n            let channelName = '';\n            if (channelNameField.indexOf('name') >= 0) {\n                channelURL = channelNameField[channelNameField.indexOf('name') + 1];\n                channelObj = this.props.getByName(channelURL);\n                if (channelObj) {\n                    channelName = channelObj.display_name;\n                } else {\n                    channelName = channelURL;\n                }\n            }\n\n            switch (actionURL) {\n            case '/channels/create':\n                auditDesc = formatMessage(holders.channelCreated, {channelName});\n                break;\n            case '/channels/create_direct':\n                auditDesc = formatMessage(holders.establishedDM, {username: getDirectTeammate(channelObj.id).username});\n                break;\n            case '/channels/update':\n                auditDesc = formatMessage(holders.nameUpdated, {channelName});\n                break;\n            case '/channels/update_desc': // support the old path\n            case '/channels/update_header':\n                auditDesc = formatMessage(holders.headerUpdated, {channelName});\n                break;\n            default: {\n                let userIdField = [];\n                let userId = '';\n                let username = '';\n\n                if (channelInfo[1]) {\n                    userIdField = channelInfo[1].split('=');\n\n                    if (userIdField.indexOf('user_id') >= 0) {\n                        userId = userIdField[userIdField.indexOf('user_id') + 1];\n                        var profile = this.props.getUser(userId);\n                        if (profile) {\n                            username = profile.username;\n                        }\n                    }\n                }\n\n                if ((/\\/channels\\/[A-Za-z0-9]+\\/delete/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.channelDeleted, {url: channelURL});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/add/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userAdded, {username, channelName});\n                } else if ((/\\/channels\\/[A-Za-z0-9]+\\/remove/).test(actionURL)) {\n                    auditDesc = formatMessage(holders.userRemoved, {username, channelName});\n                }\n\n                break;\n            }\n            }\n        } else if (actionURL.indexOf('/oauth') === 0) {\n            const oauthInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/oauth/register': {\n                const clientIdField = oauthInfo[0].split('=');\n\n                if (clientIdField[0] === 'client_id') {\n                    auditDesc = formatMessage(holders.attemptedRegisterApp, {id: clientIdField[1]});\n                }\n\n                break;\n            }\n            case '/oauth/allow':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedAllowOAuthAccess);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthAccess);\n                } else if (oauthInfo[0] === 'fail - redirect_uri did not match registered callback') {\n                    auditDesc = formatMessage(holders.failedOAuthAccess);\n                }\n\n                break;\n            case '/oauth/access_token':\n                if (oauthInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedOAuthToken);\n                } else if (oauthInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullOAuthToken);\n                } else {\n                    const oauthTokenFailure = oauthInfo[0].split('-');\n\n                    if (oauthTokenFailure[0].trim() === 'fail' && oauthTokenFailure[1]) {\n                        auditDesc = formatMessage(oauthTokenFailure, {token: oauthTokenFailure[1].trim()});\n                    }\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/users') === 0) {\n            const userInfo = audit.extra_info.split(' ');\n\n            switch (actionURL) {\n            case '/users/login':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLogin);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullLogin);\n                } else if (userInfo[0] === 'authenticated') {\n                    auditDesc = formatMessage(holders.authenticated);\n                } else if (userInfo[0]) {\n                    auditDesc = formatMessage(holders.failedLogin);\n                }\n\n                break;\n            case '/users/revoke_session':\n                auditDesc = formatMessage(holders.sessionRevoked, {sessionId: userInfo[0].split('=')[1]});\n                break;\n            case '/users/newimage':\n                auditDesc = formatMessage(holders.updatePicture);\n                break;\n            case '/users/update':\n                auditDesc = formatMessage(holders.updateGeneral);\n                break;\n            case '/users/newpassword':\n                if (userInfo[0] === 'attempted') {\n                    auditDesc = formatMessage(holders.attemptedPassword);\n                } else if (userInfo[0] === 'completed') {\n                    auditDesc = formatMessage(holders.successfullPassword);\n                } else if (userInfo[0] === 'failed - tried to update user password who was logged in through oauth') {\n                    auditDesc = formatMessage(holders.failedPassword);\n                }\n\n                break;\n            case '/users/update_roles': {\n                const userRoles = userInfo[0].split('=')[1];\n\n                auditDesc = formatMessage(holders.updatedRol);\n                if (userRoles.trim()) {\n                    auditDesc += userRoles;\n                } else {\n                    auditDesc += formatMessage(holders.member);\n                }\n\n                break;\n            }\n            case '/users/update_active': {\n                const updateType = userInfo[0].split('=')[0];\n                const updateField = userInfo[0].split('=')[1];\n\n                /* Either describes account activation/deactivation or a revoked session as part of an account deactivation */\n                if (updateType === 'active') {\n                    if (updateField === 'true') {\n                        auditDesc = formatMessage(holders.accountActive);\n                    } else if (updateField === 'false') {\n                        auditDesc = formatMessage(holders.accountInactive);\n                    }\n\n                    const actingUserInfo = userInfo[1].split('=');\n                    if (actingUserInfo[0] === 'session_user') {\n                        const actingUser = this.props.getUser(actingUserInfo[1]);\n                        const user = this.props.currentUser;\n                        if (user && actingUser && isSystemAdmin(user.roles)) {\n                            auditDesc += formatMessage(holders.by, {username: actingUser.username});\n                        } else if (user && actingUser) {\n                            auditDesc += formatMessage(holders.byAdmin);\n                        }\n                    }\n                } else if (updateType === 'session_id') {\n                    auditDesc = formatMessage(holders.sessionRevoked, {sessionId: updateField});\n                }\n\n                break;\n            }\n            case '/users/send_password_reset':\n                auditDesc = formatMessage(holders.sentEmail, {email: userInfo[0].split('=')[1]});\n                break;\n            case '/users/reset_password':\n                if (userInfo[0] === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedReset);\n                } else if (userInfo[0] === 'success') {\n                    auditDesc = formatMessage(holders.successfullReset);\n                }\n\n                break;\n            case '/users/update_notify':\n                auditDesc = formatMessage(holders.updateGlobalNotifications);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/hooks') === 0) {\n            const webhookInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/hooks/incoming/create':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookCreate);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.succcessfullWebhookCreate);\n                } else if (webhookInfo === 'fail - bad channel permissions') {\n                    auditDesc = formatMessage(holders.failedWebhookCreate);\n                }\n\n                break;\n            case '/hooks/incoming/delete':\n                if (webhookInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedWebhookDelete);\n                } else if (webhookInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullWebhookDelete);\n                } else if (webhookInfo === 'fail - inappropriate conditions') {\n                    auditDesc = formatMessage(holders.failedWebhookDelete);\n                }\n\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/license') === 0) {\n            const licenseInfo = audit.extra_info;\n\n            switch (actionURL) {\n            case '/license/add':\n                if (licenseInfo === 'attempt') {\n                    auditDesc = formatMessage(holders.attemptedLicenseAdd);\n                } else if (licenseInfo === 'success') {\n                    auditDesc = formatMessage(holders.successfullLicenseAdd);\n                } else if (licenseInfo === 'failed - expired or non-started license') {\n                    auditDesc = formatMessage(holders.failedExpiredLicenseAdd);\n                } else if (licenseInfo === 'failed - invalid license') {\n                    auditDesc = formatMessage(holders.failedInvalidLicenseAdd);\n                }\n\n                break;\n            case '/license/remove':\n                auditDesc = formatMessage(holders.licenseRemoved);\n                break;\n            default:\n                break;\n            }\n        } else if (actionURL.indexOf('/admin/download_compliance_report') === 0) {\n            auditDesc = toTitleCase(audit.extra_info);\n        } else {\n            switch (actionURL) {\n            case '/logout':\n                auditDesc = formatMessage(holders.logout);\n                break;\n            case '/verify_email':\n                auditDesc = formatMessage(holders.verified);\n                break;\n            default:\n                break;\n            }\n        }\n\n        /* If all else fails... */\n        if (!auditDesc) {\n            /* Currently not called anywhere */\n            if (audit.extra_info.indexOf('revoked_all=') >= 0) {\n                auditDesc = formatMessage(holders.revokedAll);\n            } else {\n                let actionDesc = '';\n                if (actionURL && actionURL.lastIndexOf('/') !== -1) {\n                    actionDesc = actionURL.substring(actionURL.lastIndexOf('/') + 1).replace('_', ' ');\n                    actionDesc = toTitleCase(actionDesc);\n                }\n\n                let extraInfoDesc = '';\n                if (audit.extra_info) {\n                    extraInfoDesc = audit.extra_info;\n\n                    if (extraInfoDesc.indexOf('=') !== -1) {\n                        extraInfoDesc = extraInfoDesc.substring(extraInfoDesc.indexOf('=') + 1);\n                    }\n                }\n                auditDesc = actionDesc + ' ' + extraInfoDesc;\n            }\n        }\n\n        const date = new Date(audit.create_at);\n        const auditInfo = {};\n        auditInfo.timestamp = (\n            <div>\n                <div>\n                    <FormattedDate\n                        value={date}\n                        day='2-digit'\n                        month='short'\n                        year='numeric'\n                    />\n                </div>\n                <div>\n                    <FormattedTime\n                        value={date}\n                        hour='2-digit'\n                        minute='2-digit'\n                    />\n                </div>\n            </div>\n        );\n\n        const auditProfile = this.props.getUser(audit.user_id);\n\n        auditInfo.userId = auditProfile ? auditProfile.email : audit.user_id;\n        auditInfo.desc = auditDesc;\n        auditInfo.ip = audit.ip_address;\n        auditInfo.sessionId = audit.session_id;\n\n        return auditInfo;\n    }\n}\n\nexport default injectIntl(AuditTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMissingProfilesByIds} from 'mattermost-redux/actions/users';\nimport {getUser, getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getChannelByName} from 'mattermost-redux/selectors/entities/channels';\n\nimport AuditTable from './audit_table.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n        getUser: (userId) => getUser(state, userId),\n        getByName: (channelName) => getChannelByName(state, channelName),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getMissingProfilesByIds,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AuditTable);\n","module.exports = __webpack_public_path__ + \"files/069c3bb3dec2befb54a0694265b0e7fc.png\";","module.exports = __webpack_public_path__ + \"files/6990c0422142b59e2cacdc823aab9d6d.png\";","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    children: JSX.Element[] | JSX.Element | string;\n};\n\nexport default class AdminHeader extends React.Component<Props> {\n    public render() {\n        return (\n            <div className={'admin-console__header'}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport AdminHeader from './admin_header';\n\ntype Props = {\n    id: string;\n    defaultMessage: string;\n    values?: any;\n};\n\nconst FormattedAdminHeader: React.FC<Props> = (props: Props) => (\n    <AdminHeader>\n        <FormattedMarkdownMessage\n            id={props.id}\n            defaultMessage={props.defaultMessage}\n            values={props.values}\n        />\n    </AdminHeader>\n);\n\nFormattedAdminHeader.defaultProps = {\n    values: {},\n};\n\nexport default FormattedAdminHeader;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart from 'chart.js';\n\nimport * as Utils from 'utils/utils.jsx';\n\ntype Props = {\n    title: React.ReactNode;\n    width: number;\n    height: number;\n    data?: object;\n}\n\nexport default class DoughnutChart extends React.PureComponent<Props> {\n    public chart: Chart | null = null;\n\n    public componentDidMount(): void {\n        this.initChart();\n    }\n\n    public componentDidUpdate(prevProps: Props): void {\n        if (!Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            this.initChart(true);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        if (this.chart && this.refs.canvas) {\n            this.chart.destroy();\n        }\n    }\n\n    public initChart = (update?: boolean): void => {\n        if (!this.refs.canvas) {\n            return;\n        }\n        const el = ReactDOM.findDOMNode(this.refs.canvas) as HTMLCanvasElement;\n        const ctx = el.getContext('2d') as CanvasRenderingContext2D;\n        const dataCopy = JSON.parse(JSON.stringify(this.props.data));\n        this.chart = new Chart(ctx, {type: 'doughnut', data: dataCopy, options: {}});\n        if (update && this.chart) {\n            this.chart.update();\n        }\n    }\n\n    public render(): JSX.Element {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport {FormattedMessage} from 'react-intl';\nimport Chart, {ChartOptions} from 'chart.js';\n\nimport * as Utils from 'utils/utils';\n\ntype Props = {\n    title: React.ReactNode;\n    width: number;\n    height: number;\n    data?: any;\n}\n\nexport default class LineChart extends React.PureComponent<Props> {\n    public static propTypes = {\n\n        /*\n         * Chart title\n         */\n        title: PropTypes.node.isRequired,\n\n        /*\n         * Chart width\n         */\n        width: PropTypes.number.isRequired,\n\n        /*\n         * Chart height\n         */\n        height: PropTypes.number.isRequired,\n\n        /*\n         * Chart data\n         */\n        data: PropTypes.object,\n    };\n\n    public chart: Chart | null = null;\n    public chartOptions: ChartOptions = {\n        legend: {\n            display: false,\n        },\n    };\n\n    public componentDidMount(): void {\n        this.initChart();\n    }\n\n    public componentDidUpdate(prevProps: Props): void {\n        const currentData = this.props.data && this.props.data.labels.length > 0;\n\n        if (!currentData && this.chart) {\n            // Clean up the rendered chart before we render and destroy its context\n            this.chart.destroy();\n            this.chart = null;\n        }\n\n        if (Utils.areObjectsEqual(prevProps.data, this.props.data)) {\n            return;\n        }\n\n        const hasData = this.props.data && this.props.data.labels.length > 0;\n        const hasChart = Boolean(this.chart);\n\n        if (hasData) {\n            // Update the rendered chart or initialize it as necessary\n            this.initChart(hasChart);\n        }\n    }\n\n    public componentWillUnmount(): void {\n        if (this.chart) {\n            this.chart.destroy();\n        }\n    }\n\n    public initChart = (update?: boolean): void => {\n        if (!this.refs.canvas) {\n            return;\n        }\n\n        const el = ReactDOM.findDOMNode(this.refs.canvas) as HTMLCanvasElement;\n        const ctx = el.getContext('2d') as CanvasRenderingContext2D;\n        const dataCopy: any = JSON.parse(JSON.stringify(this.props.data));\n        this.chart = new Chart(ctx, {type: 'line', data: dataCopy, options: this.chartOptions || {}});\n\n        if (update) {\n            this.chart.update();\n        }\n    }\n\n    public render(): JSX.Element {\n        let content;\n        if (this.props.data == null) {\n            content = (\n                <FormattedMessage\n                    id='analytics.chart.loading'\n                    defaultMessage='Loading...'\n                />\n            );\n        } else if (this.props.data.labels.length === 0) {\n            content = (\n                <h5>\n                    <FormattedMessage\n                        id='analytics.chart.meaningful'\n                        defaultMessage='Not enough data for a meaningful representation.'\n                    />\n                </h5>\n            );\n        } else {\n            content = (\n                <canvas\n                    ref='canvas'\n                    width={this.props.width}\n                    height={this.props.height}\n                />\n            );\n        }\n\n        return (\n            <div className='col-sm-12'>\n                <div className='total-count by-day'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {ReactNode} from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    title: ReactNode;\n    icon: string;\n    count?: number;\n}\n\nexport default class StatisticCount extends React.PureComponent<Props> {\n    public render(): JSX.Element {\n        const loading = (\n            <FormattedMessage\n                id='analytics.chart.loading'\n                defaultMessage='Loading...'\n            />\n        );\n\n        return (\n            <div className='col-lg-3 col-md-4 col-sm-6'>\n                <div className='total-count'>\n                    <div className='title'>\n                        {this.props.title}\n                        <i className={'fa ' + this.props.icon}/>\n                    </div>\n                    <div className='content'>{typeof this.props.count === 'undefined' || isNaN(this.props.count) ? loading : this.props.count}</div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {Dictionary} from 'mattermost-redux/types/utilities';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport function formatChannelDoughtnutData(totalPublic: any, totalPrivate: any) {\n    const channelTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.publicChannels', 'Public Channels'),\n            Utils.localizeMessage('analytics.system.privateGroups', 'Private Channels'),\n        ],\n        datasets: [{\n            data: [totalPublic, totalPrivate],\n            backgroundColor: ['#46BFBD', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FFC870'],\n        }],\n    };\n\n    return channelTypeData;\n}\n\nexport function formatPostDoughtnutData(filePosts: any, hashtagPosts: any, totalPosts: any) {\n    const postTypeData = {\n        labels: [\n            Utils.localizeMessage('analytics.system.totalFilePosts', 'Posts with Files'),\n            Utils.localizeMessage('analytics.system.totalHashtagPosts', 'Posts with Hashtags'),\n            Utils.localizeMessage('analytics.system.textPosts', 'Posts with Text-only'),\n        ],\n        datasets: [{\n            data: [filePosts, hashtagPosts, (totalPosts - filePosts - hashtagPosts)],\n            backgroundColor: ['#46BFBD', '#F7464A', '#FDB45C'],\n            hoverBackgroundColor: ['#5AD3D1', '#FF5A5E', '#FFC870'],\n        }],\n    };\n\n    return postTypeData;\n}\n\nexport function formatPostsPerDayData(data: any) {\n    const chartData = {\n        labels: [] as any,\n        datasets: [{\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [] as any,\n        }],\n    };\n\n    for (const index in data) {\n        if (data[index]) {\n            const row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n\n// synchronizeChartData converges on a uniform set of labels for all entries in the given chart data. If a given label wasn't already present in the chart data, a 0-valued data point at that label is added.\n//\n// For date-labelled charts, this ensures that each charts starts and ends on the same interval, even if data for part of that interval was never collected.\nexport function synchronizeChartData(...chartDatas: any[]) {\n    const labels: Set<string> = new Set();\n\n    // collect all labels\n    chartDatas.forEach((chartData) => {\n        chartData.labels.forEach((label: string) => labels.add(label));\n    });\n\n    // fill in missing\n    chartDatas.forEach((chartData) => {\n        if (chartData.labels.length > 0) { // don't add to empty graphs\n            labels.forEach((label: string) => {\n                if (chartData.labels.indexOf(label) === -1) {\n                    chartData.labels.push(label);\n                    chartData.datasets[0].data.push(0);\n                }\n            });\n        }\n    });\n}\n\nexport function formatUsersWithPostsPerDayData(data: any) {\n    const chartData = {\n        labels: [] as any,\n        datasets: [{\n            label: '',\n            fillColor: 'rgba(151,187,205,0.2)',\n            borderColor: 'rgba(151,187,205,1)',\n            pointBackgroundColor: 'rgba(151,187,205,1)',\n            pointBorderColor: '#fff',\n            pointHoverBackgroundColor: '#fff',\n            pointHoverBorderColor: 'rgba(151,187,205,1)',\n            data: [] as any,\n        }],\n    };\n\n    for (const index in data) {\n        if (data[index]) {\n            const row = data[index];\n            chartData.labels.push(row.name);\n            chartData.datasets[0].data.push(row.value);\n        }\n    }\n\n    return chartData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport * as AdminActions from 'actions/admin_actions.jsx';\nimport Constants from 'utils/constants';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nimport DoughnutChart from '../doughnut_chart';\nimport LineChart from '../line_chart';\nimport StatisticCount from '../statistic_count';\n\nimport {\n    formatPostsPerDayData,\n    formatUsersWithPostsPerDayData,\n    formatChannelDoughtnutData,\n    formatPostDoughtnutData,\n    synchronizeChartData,\n} from '../format';\n\nconst StatTypes = Constants.StatTypes;\n\nexport default class SystemAnalytics extends React.PureComponent {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n        stats: PropTypes.object,\n    }\n\n    componentDidMount() {\n        AdminActions.getStandardAnalytics();\n        AdminActions.getPostsPerDayAnalytics();\n        AdminActions.getBotPostsPerDayAnalytics();\n        AdminActions.getUsersPerDayAnalytics();\n\n        if (this.props.isLicensed) {\n            AdminActions.getAdvancedAnalytics();\n        }\n    }\n\n    render() {\n        const stats = this.props.stats;\n        const isLicensed = this.props.isLicensed;\n        const skippedIntensiveQueries = stats[StatTypes.TOTAL_POSTS] === -1;\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const botPostCountsDay = formatPostsPerDayData(stats[StatTypes.BOT_POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n        synchronizeChartData(postCountsDay, botPostCountsDay, userCountsWithPostsDay);\n\n        let banner;\n        let postCount;\n        let postTotalGraph;\n        let botPostTotalGraph;\n        let activeUserGraph;\n        if (skippedIntensiveQueries) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.skippedIntensiveQueries'\n                            defaultMessage='To maximize performance, some statistics are disabled. You can [re-enable them in config.json](!https://docs.mattermost.com/administration/statistics.html).'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            postCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            botPostTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalBotPosts'\n                                defaultMessage='Total Posts from Bots'\n                            />\n                        }\n                        data={botPostCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            activeUserGraph = (\n                <div className='row'>\n                    <LineChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        let advancedStats;\n        let advancedGraphs;\n        let sessionCount;\n        let commandCount;\n        let incomingCount;\n        let outgoingCount;\n        if (this.props.isLicensed) {\n            sessionCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalSessions'\n                            defaultMessage='Total Sessions'\n                        />\n                    }\n                    icon='fa-signal'\n                    count={stats[StatTypes.TOTAL_SESSIONS]}\n                />\n            );\n\n            commandCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalCommands'\n                            defaultMessage='Total Commands'\n                        />\n                    }\n                    icon='fa-terminal'\n                    count={stats[StatTypes.TOTAL_COMMANDS]}\n                />\n            );\n\n            incomingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalIncomingWebhooks'\n                            defaultMessage='Incoming Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-down'\n                    count={stats[StatTypes.TOTAL_IHOOKS]}\n                />\n            );\n\n            outgoingCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.system.totalOutgoingWebhooks'\n                            defaultMessage='Outgoing Webhooks'\n                        />\n                    }\n                    icon='fa-arrow-up'\n                    count={stats[StatTypes.TOTAL_OHOOKS]}\n                />\n            );\n\n            advancedStats = (\n                <div>\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalWebsockets'\n                                defaultMessage='WebSocket Conns'\n                            />\n                        }\n                        icon='fa-user'\n                        count={stats[StatTypes.TOTAL_WEBSOCKET_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalMasterDbConnections'\n                                defaultMessage='Master DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_MASTER_DB_CONNECTIONS]}\n                    />\n                    <StatisticCount\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.totalReadDbConnections'\n                                defaultMessage='Replica DB Conns'\n                            />\n                        }\n                        icon='fa-terminal'\n                        count={stats[StatTypes.TOTAL_READ_DB_CONNECTIONS]}\n                    />\n                </div>\n            );\n\n            const channelTypeData = formatChannelDoughtnutData(stats[StatTypes.TOTAL_PUBLIC_CHANNELS], stats[StatTypes.TOTAL_PRIVATE_GROUPS]);\n            const postTypeData = formatPostDoughtnutData(stats[StatTypes.TOTAL_FILE_POSTS], stats[StatTypes.TOTAL_HASHTAG_POSTS], stats[StatTypes.TOTAL_POSTS]);\n\n            let postTypeGraph;\n            if (stats[StatTypes.TOTAL_POSTS] !== -1) {\n                postTypeGraph = (\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.postTypes'\n                                defaultMessage='Posts, Files and Hashtags'\n                            />\n                        }\n                        data={postTypeData}\n                        width={300}\n                        height={225}\n                    />\n                );\n            }\n\n            advancedGraphs = (\n                <div className='row'>\n                    <DoughnutChart\n                        title={\n                            <FormattedMessage\n                                id='analytics.system.channelTypes'\n                                defaultMessage='Channel Types'\n                            />\n                        }\n                        data={channelTypeData}\n                        width={300}\n                        height={225}\n                    />\n                    {postTypeGraph}\n                </div>\n            );\n        }\n\n        const userCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalUsers'\n                        defaultMessage='Total Active Users'\n                    />\n                }\n                icon='fa-user'\n                count={stats[StatTypes.TOTAL_USERS]}\n            />\n        );\n\n        const teamCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalTeams'\n                        defaultMessage='Total Teams'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.TOTAL_TEAMS]}\n            />\n        );\n\n        const channelCount = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.totalChannels'\n                        defaultMessage='Total Channels'\n                    />\n                }\n                icon='fa-globe'\n                count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS] + stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n            />\n        );\n\n        const dailyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.dailyActiveUsers'\n                        defaultMessage='Daily Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.DAILY_ACTIVE_USERS]}\n            />\n        );\n\n        const monthlyActiveUsers = (\n            <StatisticCount\n                title={\n                    <FormattedMessage\n                        id='analytics.system.monthlyActiveUsers'\n                        defaultMessage='Monthly Active Users'\n                    />\n                }\n                icon='fa-users'\n                count={stats[StatTypes.MONTHLY_ACTIVE_USERS]}\n            />\n        );\n\n        let firstRow;\n        let secondRow;\n        if (isLicensed && skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {sessionCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (isLicensed && !skippedIntensiveQueries) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n\n            secondRow = (\n                <div>\n                    {sessionCount}\n                    {commandCount}\n                    {incomingCount}\n                    {outgoingCount}\n                </div>\n            );\n        } else if (!isLicensed) {\n            firstRow = (\n                <div>\n                    {userCount}\n                    {teamCount}\n                    {channelCount}\n                    {postCount}\n                </div>\n            );\n        }\n\n        const thirdRow = (\n            <div>\n                {dailyActiveUsers}\n                {monthlyActiveUsers}\n            </div>\n        );\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <FormattedAdminHeader\n                    id='analytics.system.title'\n                    defaultMessage='System Statistics'\n                />\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        {banner}\n                        <div className='row'>\n                            {firstRow}\n                            {secondRow}\n                            {thirdRow}\n                            {advancedStats}\n                        </div>\n                        {advancedGraphs}\n                        {postTotalGraph}\n                        {botPostTotalGraph}\n                        {activeUserGraph}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport SystemAnalytics from './system_analytics.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    return {\n        isLicensed,\n        stats: state.entities.admin.analytics,\n    };\n}\n\nexport default connect(mapStateToProps)(SystemAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\ntype Props = {\n    title?: JSX.Element;\n    description: JSX.Element;\n}\n\nconst Banner: React.FC<Props> = (props: Props) => {\n    let title = (\n        <FormattedMessage\n            id='admin.banner.heading'\n            defaultMessage='Note:'\n        />\n    );\n\n    if (props.title) {\n        title = props.title;\n    }\n\n    return (\n        <div className='banner'>\n            <div className='banner__content'>\n                <h4 className='banner__heading'>\n                    {title}\n                </h4>\n                <p>\n                    {props.description}\n                </p>\n            </div>\n        </div>\n    );\n};\n\nexport default Banner;","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Tooltip} from 'react-bootstrap';\n\nimport OverlayTrigger from 'components/overlay_trigger';\n\nimport Constants from 'utils/constants';\n\ntype TableItem = {\n    name: string;\n    tip: string;\n    value: React.ReactNode;\n}\ntype Props = {\n    title: React.ReactNode;\n    data: TableItem[];\n}\n\nexport default class TableChart extends React.PureComponent<Props> {\n    public render() {\n        return (\n            <div className='col-sm-6'>\n                <div className='total-count recent-active-users'>\n                    <div className='title'>\n                        {this.props.title}\n                    </div>\n                    <div className='content'>\n                        <table>\n                            <tbody>\n                                {\n                                    this.props.data.map((item) => {\n                                        const tooltip = (\n                                            <Tooltip id={'tip-table-entry-' + item.name}>\n                                                {item.tip}\n                                            </Tooltip>\n                                        );\n\n                                        return (\n                                            <tr key={'table-entry-' + item.name}>\n                                                <td>\n                                                    <OverlayTrigger\n                                                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                                                        placement='top'\n                                                        overlay={tooltip}\n                                                    >\n                                                        <time>\n                                                            {item.name}\n                                                        </time>\n                                                    </OverlayTrigger>\n                                                </td>\n                                                <td>\n                                                    {item.value}\n                                                </td>\n                                            </tr>\n                                        );\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage} from 'react-intl';\nimport {General} from 'mattermost-redux/constants';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport * as AdminActions from 'actions/admin_actions';\nimport BrowserStore from 'stores/browser_store';\nimport {StatTypes} from 'utils/constants';\nimport Banner from 'components/admin_console/banner';\nimport LineChart from 'components/analytics/line_chart';\nimport StatisticCount from 'components/analytics/statistic_count';\nimport TableChart from 'components/analytics/table_chart';\n\nimport {getMonthLong} from 'utils/i18n';\n\nimport {formatPostsPerDayData, formatUsersWithPostsPerDayData} from '../format';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nexport default class TeamAnalytics extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /*\n         * Initial team to load analytics for\n         */\n        initialTeam: PropTypes.object,\n\n        /**\n         * The locale of the current user\n          */\n        locale: PropTypes.string.isRequired,\n        stats: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get users in a team\n             */\n            getProfilesInTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            team: props.initialTeam,\n            recentlyActiveUsers: [],\n            newUsers: [],\n        };\n    }\n\n    componentDidMount() {\n        if (this.state.team) {\n            this.getData(this.state.team.id);\n        }\n\n        this.props.actions.getTeams(0, 1000);\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.team && prevState.team !== this.state.team) {\n            this.getData(this.state.team.id);\n        }\n    }\n\n    getData = async (id) => {\n        AdminActions.getStandardAnalytics(id);\n        AdminActions.getPostsPerDayAnalytics(id);\n        AdminActions.getBotPostsPerDayAnalytics(id);\n        AdminActions.getUsersPerDayAnalytics(id);\n        const {data: recentlyActiveUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'last_activity_at');\n        const {data: newUsers} = await this.props.actions.getProfilesInTeam(id, 0, General.PROFILE_CHUNK_SIZE, 'create_at');\n\n        this.setState({\n            recentlyActiveUsers,\n            newUsers,\n        });\n    }\n\n    handleTeamChange = (e) => {\n        const teamId = e.target.value;\n\n        let team;\n        this.props.teams.forEach((t) => {\n            if (t.id === teamId) {\n                team = t;\n            }\n        });\n\n        this.setState({\n            team,\n        });\n\n        BrowserStore.setGlobalItem(LAST_ANALYTICS_TEAM, teamId);\n    }\n\n    render() {\n        if (this.props.teams.length === 0 || !this.state.team || !this.props.stats[this.state.team.id]) {\n            return <LoadingScreen/>;\n        }\n\n        if (this.state.team == null) {\n            return (\n                <Banner\n                    description={\n                        <FormattedMessage\n                            id='analytics.team.noTeams'\n                            defaultMessage='There are no teams on this server for which to view statistics.'\n                        />\n                    }\n                />\n            );\n        }\n\n        const stats = this.props.stats[this.state.team.id];\n        const postCountsDay = formatPostsPerDayData(stats[StatTypes.POST_PER_DAY]);\n        const userCountsWithPostsDay = formatUsersWithPostsPerDayData(stats[StatTypes.USERS_WITH_POSTS_PER_DAY]);\n\n        let banner = (\n            <div className='banner'>\n                <div className='banner__content'>\n                    <FormattedMessage\n                        id='analytics.system.info'\n                        defaultMessage='Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team.'\n                    />\n                </div>\n            </div>\n        );\n\n        let totalPostsCount;\n        let postTotalGraph;\n        let userActiveGraph;\n        if (stats[StatTypes.TOTAL_POSTS] === -1) {\n            banner = (\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMarkdownMessage\n                            id='analytics.system.infoAndSkippedIntensiveQueries'\n                            defaultMessage='Only data for the chosen team is calculated. Excludes posts made in direct message channels, which are not tied to a team. \\n \\n Some statistics have been omitted because they put too much load on the system to calculate. See [https://docs.mattermost.com/administration/statistics.html](!https://docs.mattermost.com/administration/statistics.html) for more details.'\n                        />\n                    </div>\n                </div>\n            );\n        } else {\n            totalPostsCount = (\n                <StatisticCount\n                    title={\n                        <FormattedMessage\n                            id='analytics.team.totalPosts'\n                            defaultMessage='Total Posts'\n                        />\n                    }\n                    icon='fa-comment'\n                    count={stats[StatTypes.TOTAL_POSTS]}\n                />\n            );\n\n            postTotalGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.totalPosts'\n                                defaultMessage='Total Posts'\n                            />\n                        }\n                        data={postCountsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n\n            userActiveGraph = (\n                <div className='row'>\n                    <LineChart\n                        key={this.state.team.id}\n                        title={\n                            <FormattedMessage\n                                id='analytics.team.activeUsers'\n                                defaultMessage='Active Users With Posts'\n                            />\n                        }\n                        data={userCountsWithPostsDay}\n                        width={740}\n                        height={225}\n                    />\n                </div>\n            );\n        }\n\n        const recentActiveUsers = formatRecentUsersData(this.state.recentlyActiveUsers, this.props.locale);\n        const newlyCreatedUsers = formatNewUsersData(this.state.newUsers, this.props.locale);\n\n        const teams = this.props.teams.sort((a, b) => {\n            const aName = a.display_name.toUpperCase();\n            const bName = b.display_name.toUpperCase();\n            if (aName === bName) {\n                return 0;\n            }\n            if (aName > bName) {\n                return 1;\n            }\n            return -1;\n        }).map((team) => {\n            return (\n                <option\n                    key={team.id}\n                    value={team.id}\n                >\n                    {team.display_name}\n                </option>\n            );\n        });\n\n        return (\n            <div className='wrapper--fixed team_statistics'>\n                <div className='admin-console__header team-statistics__header-row'>\n                    <div className='team-statistics__header'>\n                        <FormattedMarkdownMessage\n                            id='analytics.team.title'\n                            defaultMessage='Team Statistics for {team}'\n                            values={{\n                                team: this.state.team.display_name,\n                            }}\n                        />\n                    </div>\n                    <div className='team-statistics__team-filter'>\n                        <select\n                            className='form-control team-statistics__team-filter__dropdown'\n                            onChange={this.handleTeamChange}\n                            value={this.state.team.id}\n                        >\n                            {teams}\n                        </select>\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        {banner}\n                        <div className='row'>\n                            <StatisticCount\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.totalUsers'\n                                        defaultMessage='Total Active Users'\n                                    />\n                                }\n                                icon='fa-users'\n                                count={stats[StatTypes.TOTAL_USERS]}\n                            />\n                            <StatisticCount\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.publicChannels'\n                                        defaultMessage='Public Channels'\n                                    />\n                                }\n                                icon='fa-globe'\n                                count={stats[StatTypes.TOTAL_PUBLIC_CHANNELS]}\n                            />\n                            <StatisticCount\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.privateGroups'\n                                        defaultMessage='Private Channels'\n                                    />\n                                }\n                                icon='fa-lock'\n                                count={stats[StatTypes.TOTAL_PRIVATE_GROUPS]}\n                            />\n                            {totalPostsCount}\n                        </div>\n                        {postTotalGraph}\n                        {userActiveGraph}\n                        <div className='row'>\n                            <TableChart\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.recentUsers'\n                                        defaultMessage='Recent Active Users'\n                                    />\n                                }\n                                data={recentActiveUsers}\n                            />\n                            <TableChart\n                                title={\n                                    <FormattedMessage\n                                        id='analytics.team.newlyCreated'\n                                        defaultMessage='Newly Created Users'\n                                    />\n                                }\n                                data={newlyCreatedUsers}\n                            />\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport function formatRecentUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.last_activity_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n\nexport function formatNewUsersData(data, locale) {\n    if (data == null) {\n        return [];\n    }\n\n    const formattedData = data.map((user) => {\n        const item = {};\n        item.name = user.username;\n        item.value = (\n            <FormattedDate\n                value={user.create_at}\n                day='numeric'\n                month={getMonthLong(locale)}\n                year='numeric'\n                hour12={true}\n                hour='2-digit'\n                minute='2-digit'\n            />\n        );\n        item.tip = user.email;\n\n        return item;\n    });\n\n    return formattedData;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams} from 'mattermost-redux/actions/teams';\nimport {getProfilesInTeam} from 'mattermost-redux/actions/users';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\n\nimport BrowserStore from 'stores/browser_store.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport TeamAnalytics from './team_analytics.jsx';\n\nconst LAST_ANALYTICS_TEAM = 'last_analytics_team';\n\nfunction mapStateToProps(state) {\n    const teams = getTeamsList(state);\n    const teamId = BrowserStore.getGlobalItem(LAST_ANALYTICS_TEAM, null);\n    const initialTeam = state.entities.teams.teams[teamId] || (teams.length > 0 ? teams[0] : null);\n\n    return {\n        initialTeam,\n        locale: getCurrentLocale(state),\n        teams,\n        stats: state.entities.admin.teamAnalytics,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getProfilesInTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamAnalytics);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport SaveButton from 'components/save_button';\nimport FormError from 'components/form_error';\n\nimport AdminHeader from 'components/widgets/admin_console/admin_header';\n\ntype Props = {\n    config?: object;\n    environmentConfig?: object;\n    setNavigationBlocked?: (blocked: boolean) => void;\n    updateConfig?: (config: object) => {data: object; error: ClientErrorPlaceholder};\n}\n\ntype State = {\n    saveNeeded: boolean;\n    saving: boolean;\n    serverError: string|null;\n    serverErrorId?: string;\n    errorTooltip: boolean;\n}\n\ntype StateKeys = keyof State;\n\n// Placeholder type until ClientError is exported from redux.\n// TODO: remove ClientErrorPlaceholder and change the return type of updateConfig\ntype ClientErrorPlaceholder = {\n    message: string;\n    server_error_id: string;\n}\n\nexport default abstract class AdminSettings extends React.Component<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n        const stateInit = {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        };\n        if (props.config) {\n            this.state = Object.assign(this.getStateFromConfig(props.config), stateInit);\n        } else {\n            this.state = stateInit;\n        }\n    }\n\n    protected abstract getStateFromConfig(config: object): State;\n\n    protected abstract getConfigFromState(config: object): object;\n\n    protected abstract renderTitle(): React.ReactElement;\n\n    protected abstract renderSettings(): React.ReactElement;\n\n    protected handleSaved?: ((config: object) => React.ReactElement);\n\n    protected canSave?: () => boolean;\n\n    private closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    private openTooltip = (e: React.MouseEvent) => {\n        const elm: HTMLElement|null = e.currentTarget.querySelector('.control-label');\n        if (elm) {\n            const isElipsis = elm.offsetWidth < elm.scrollWidth;\n            this.setState({errorTooltip: isElipsis});\n        }\n    }\n\n    private handleChange = (id: StateKeys, value: any) => {\n        this.setState((prevState) => ({\n            ...prevState,\n            saveNeeded: true,\n            [id]: value,\n        }));\n\n        if (this.props.setNavigationBlocked) {\n            this.props.setNavigationBlocked(true);\n        }\n    };\n\n    private handleSubmit = (e: React.SyntheticEvent) => {\n        e.preventDefault();\n\n        this.doSubmit();\n    }\n\n    private doSubmit = async (callback?: () => void) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        if (this.props.updateConfig) {\n            const {data, error} = await this.props.updateConfig(config);\n\n            if (data) {\n                this.setState(this.getStateFromConfig(data));\n\n                this.setState({\n                    saveNeeded: false,\n                    saving: false,\n                });\n\n                if (this.props.setNavigationBlocked) {\n                    this.props.setNavigationBlocked(false);\n                }\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            } else if (error) {\n                this.setState({\n                    saving: false,\n                    serverError: error.message,\n                    serverErrorId: error.server_error_id,\n                });\n\n                if (callback) {\n                    callback();\n                }\n\n                if (this.handleSaved) {\n                    this.handleSaved(config);\n                }\n            }\n        }\n    };\n\n    private parseInt = (str: string, defaultValue?: number) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n)) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    private parseIntNonNegative = (str: string, defaultValue?: number) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < 0) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 0;\n        }\n\n        return n;\n    };\n\n    private parseIntNonZero = (str: string, defaultValue?: number, minimumValue = 1) => {\n        const n = parseInt(str, 10);\n\n        if (isNaN(n) || n < minimumValue) {\n            if (defaultValue) {\n                return defaultValue;\n            }\n            return 1;\n        }\n\n        return n;\n    };\n\n    private getConfigValue(config: object, path: string) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj: object|null, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n            return obj[(pathPart as keyof object)];\n        }, config);\n    }\n\n    private setConfigValue(config: object, path: string, value: any) {\n        function setValue(obj: object, pathParts: string[]) {\n            const part = pathParts[0] as keyof object;\n\n            if (pathParts.length === 1) {\n                Object.assign(obj, {[part]: value});\n            } else {\n                if (obj[part] == null) {\n                    Object.assign(obj, {[part]: {}});\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    private isSetByEnv = (path: string) => {\n        return Boolean(this.props.environmentConfig && this.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    public render() {\n        return (\n            <form\n                className='form-horizontal'\n                role='form'\n                onSubmit={this.handleSubmit}\n            >\n                <div className='wrapper--fixed'>\n                    <AdminHeader>\n                        {this.renderTitle()}\n                    </AdminHeader>\n                    {this.renderSettings()}\n                    <div className='admin-console-save'>\n                        <SaveButton\n                            saving={this.state.saving}\n                            disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                            onClick={this.handleSubmit}\n                            savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                        />\n                        <div\n                            className='error-message'\n                            ref='errorMessage'\n                            onMouseOver={this.openTooltip}\n                            onMouseOut={this.closeTooltip}\n                        >\n                            <FormError error={this.state.serverError}/>\n                        </div>\n                        <Overlay\n                            show={this.state.errorTooltip}\n                            placement='top'\n                            target={this.refs.errorMessage}\n                        >\n                            <Tooltip id='error-tooltip' >\n                                {this.state.serverError}\n                            </Tooltip>\n                        </Overlay>\n                    </div>\n                </div>\n            </form>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default function() {\n    return (\n        <div className='alert alert-warning'>\n            <FormattedMessage\n                id='admin.set_by_env'\n                defaultMessage='This setting has been set through an environment variable. It cannot be changed through the System Console.'\n            />\n        </div>\n    );\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React, {PureComponent} from 'react';\n\nimport SetByEnv from './set_by_env';\n\ntype Props = {\n    inputId?: string;\n    label: React.ReactNode;\n    children: React.ReactNode;\n    helpText?: React.ReactNode;\n    setByEnv?: boolean;\n}\n\nexport default class Settings extends PureComponent<Props> {\n    public render() {\n        const {\n            children,\n            setByEnv,\n            helpText,\n            inputId,\n            label,\n        } = this.props;\n\n        return (\n            <div\n                data-testid={inputId}\n                className='form-group'\n            >\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={inputId}\n                >\n                    {label}\n                </label>\n                <div className='col-sm-8'>\n                    {children}\n                    <div\n                        data-testid={inputId + 'help-text'}\n                        className='help-text'\n                    >\n                        {helpText}\n                    </div>\n                    {setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    value: boolean;\n    onChange: (id: string, foo: boolean) => void;\n    trueText?: React.ReactNode;\n    falseText?: React.ReactNode;\n    disabled: boolean;\n    setByEnv: boolean;\n    disabledText?: React.ReactNode;\n    helpText: React.ReactNode;\n}\n\nexport default class BooleanSetting extends React.Component<Props> {\n    public static defaultProps = {\n        trueText: (\n            <FormattedMessage\n                id='admin.true'\n                defaultMessage='true'\n            />\n        ),\n        falseText: (\n            <FormattedMessage\n                id='admin.false'\n                defaultMessage='false'\n            />\n        ),\n        disabled: false,\n    };\n\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.props.onChange(this.props.id, e.target.value === 'true');\n    }\n\n    public render() {\n        let helpText;\n        if (this.props.disabled && this.props.disabledText) {\n            helpText = (\n                <div>\n                    <span className='admin-console__disabled-text'>\n                        {this.props.disabledText}\n                    </span>\n                    {this.props.helpText}\n                </div>\n            );\n        } else {\n            helpText = this.props.helpText;\n        }\n\n        return (\n            <Setting\n                inputId={this.props.id}\n                label={this.props.label}\n                helpText={helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <a id={this.props.id}/>\n                <label className='radio-inline'>\n                    <input\n                        data-testid={this.props.id + 'true'}\n                        type='radio'\n                        value='true'\n                        id={Utils.createSafeId(this.props.id) + 'true'}\n                        name={this.props.id}\n                        checked={this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.trueText}\n                </label>\n                <label className='radio-inline'>\n                    <input\n                        data-testid={this.props.id + 'false'}\n                        type='radio'\n                        value='false'\n                        id={Utils.createSafeId(this.props.id) + 'false'}\n                        name={this.props.id}\n                        checked={!this.props.value}\n                        onChange={this.handleChange}\n                        disabled={this.props.disabled || this.props.setByEnv}\n                    />\n                    {this.props.falseText}\n                </label>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nexport default class SettingsGroup extends React.Component {\n    static get propTypes() {\n        return {\n            show: PropTypes.bool.isRequired,\n            header: PropTypes.node,\n            children: PropTypes.node,\n            container: PropTypes.bool,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            show: true,\n            container: true,\n        };\n    }\n\n    render() {\n        let wrapperClass = '';\n        let contentClass = '';\n\n        if (!this.props.show) {\n            return null;\n        }\n\n        if (this.props.container) {\n            wrapperClass = 'admin-console__wrapper';\n            contentClass = 'admin-console__content';\n        }\n\n        let header = null;\n        if (this.props.header) {\n            header = (\n                <h4>\n                    {this.props.header}\n                </h4>\n            );\n        }\n\n        return (\n            <div className={wrapperClass}>\n                <div className={contentClass}>\n                    {header}\n                    {this.props.children}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport TextSetting, {WidgetTextSettingProps} from 'components/widgets/settings/text_setting';\n\nimport SetByEnv from './set_by_env';\n\ninterface Props extends WidgetTextSettingProps {\n    setByEnv: boolean;\n}\n\nconst AdminTextSetting: React.SFC<Props> = (props: Props): JSX.Element => {\n    const {setByEnv, disabled, ...sharedProps} = props;\n    const isTextDisabled = props.disabled || props.setByEnv;\n\n    return (\n        <TextSetting\n            {...sharedProps}\n            labelClassName='col-sm-4'\n            inputClassName='col-sm-8'\n            disabled={isTextDisabled}\n            footer={setByEnv ? <SetByEnv/> : null}\n        />\n    );\n};\n\nexport default AdminTextSetting;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport PluginState from 'mattermost-redux/constants/plugins';\n\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport AdminSettings from '../admin_settings';\nimport BooleanSetting from '../boolean_setting';\nimport SettingsGroup from '../settings_group.jsx';\nimport TextSetting from '../text_setting';\n\nconst PluginItemState = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.not_running'\n                defaultMessage='Not running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.starting'\n                defaultMessage='Starting'\n            />\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.running'\n                defaultMessage='Running'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_start'\n                defaultMessage='Failed to start'\n            />\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.failed_to_stay_running'\n                defaultMessage='Crashing'\n            />\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.stopping'\n                defaultMessage='Stopping'\n            />\n        );\n    default:\n        return (\n            <FormattedMessage\n                id='admin.plugin.state.unknown'\n                defaultMessage='Unknown'\n            />\n        );\n    }\n};\n\nPluginItemState.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItemStateDescription = ({state}) => {\n    switch (state) {\n    case PluginState.PLUGIN_STATE_NOT_RUNNING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-ban'/>\n                <FormattedMessage\n                    id='admin.plugin.state.not_running.description'\n                    defaultMessage='This plugin is not enabled.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STARTING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.starting.description'\n                    defaultMessage='This plugin is starting.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_RUNNING:\n        return (\n            <div className='alert alert-success'>\n                <i className='fa fa-check'/>\n                <FormattedMessage\n                    id='admin.plugin.state.running.description'\n                    defaultMessage='This plugin is running.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_START:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_start.description'\n                    defaultMessage='This plugin failed to start. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_FAILED_TO_STAY_RUNNING:\n        return (\n            <div className='alert alert-warning'>\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.state.failed_to_stay_running.description'\n                    defaultMessage='This plugin crashed multiple times and is no longer running. Check your system logs for errors.'\n                />\n            </div>\n        );\n    case PluginState.PLUGIN_STATE_STOPPING:\n        return (\n            <div className='alert alert-info'>\n                <i className='fa fa-info'/>\n                <FormattedMessage\n                    id='admin.plugin.state.stopping.description'\n                    defaultMessage='This plugin is stopping.'\n                />\n            </div>\n        );\n    default:\n        return null;\n    }\n};\n\nPluginItemStateDescription.propTypes = {\n    state: PropTypes.number.isRequired,\n};\n\nconst PluginItem = ({\n    pluginStatus,\n    removing,\n    handleEnable,\n    handleDisable,\n    handleRemove,\n    showInstances,\n    hasSettings,\n}) => {\n    let activateButton;\n    const activating = pluginStatus.state === PluginState.PLUGIN_STATE_STARTING;\n    const deactivating = pluginStatus.state === PluginState.PLUGIN_STATE_STOPPING;\n\n    if (pluginStatus.active) {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={deactivating}\n                onClick={handleDisable}\n            >\n                {deactivating ?\n                    <FormattedMessage\n                        id='admin.plugin.disabling'\n                        defaultMessage='Disabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.disable'\n                        defaultMessage='Disable'\n                    />\n                }\n            </a>\n        );\n    } else {\n        activateButton = (\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={activating}\n                onClick={handleEnable}\n            >\n                {activating ?\n                    <FormattedMessage\n                        id='admin.plugin.enabling'\n                        defaultMessage='Enabling...'\n                    /> :\n                    <FormattedMessage\n                        id='admin.plugin.enable'\n                        defaultMessage='Enable'\n                    />\n                }\n            </a>\n        );\n    }\n\n    let settingsButton = null;\n    if (hasSettings) {\n        settingsButton = (\n            <span>\n                {' - '}\n                <Link\n                    to={'/admin_console/plugins/plugin_' + pluginStatus.id}\n                >\n                    <FormattedMessage\n                        id='admin.plugin.settingsButton'\n                        defaultMessage='Settings'\n                    />\n                </Link>\n            </span>\n        );\n    }\n\n    let removeButtonText;\n    if (removing) {\n        removeButtonText = (\n            <FormattedMessage\n                id='admin.plugin.removing'\n                defaultMessage='Removing...'\n            />\n        );\n    } else {\n        removeButtonText = (\n            <FormattedMessage\n                id='admin.plugin.remove'\n                defaultMessage='Remove'\n            />\n        );\n    }\n    const removeButton = (\n        <span>\n            {' - '}\n            <a\n                data-plugin-id={pluginStatus.id}\n                disabled={removing}\n                onClick={handleRemove}\n            >\n                {removeButtonText}\n            </a>\n        </span>\n    );\n\n    let description;\n    if (pluginStatus.description) {\n        description = (\n            <div className='padding-top'>\n                {pluginStatus.description}\n            </div>\n        );\n    }\n\n    const notices = [];\n    if (pluginStatus.instances.some((instance) => instance.version !== pluginStatus.version)) {\n        notices.push(\n            <div\n                key='multiple-versions'\n                className='alert alert-warning'\n            >\n                <i className='fa fa-warning'/>\n                <FormattedMessage\n                    id='admin.plugin.multiple_versions_warning'\n                    defaultMessage='There are multiple versions of this plugin installed across your cluster. Re-install this plugin to ensure it works consistently.'\n                />\n            </div>\n        );\n    }\n\n    notices.push(\n        <PluginItemStateDescription\n            key='state-description'\n            state={pluginStatus.state}\n        />\n    );\n\n    const instances = pluginStatus.instances.slice();\n    instances.sort((a, b) => {\n        if (a.cluster_id < b.cluster_id) {\n            return -1;\n        } else if (a.cluster_id > b.cluster_id) {\n            return 1;\n        }\n\n        return 0;\n    });\n\n    let clusterSummary;\n    if (showInstances) {\n        clusterSummary = (\n            <div className='padding-top x2 padding-bottom'>\n                <div className='row'>\n                    <div className='col-md-6'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.cluster_instance'\n                                defaultMessage='Cluster Instance'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.version_title'\n                                defaultMessage='Version'\n                            />\n                        </strong>\n                    </div>\n                    <div className='col-md-3'>\n                        <strong>\n                            <FormattedMessage\n                                id='admin.plugin.state'\n                                defaultMessage='State'\n                            />\n                        </strong>\n                    </div>\n                </div>\n                {instances.map((instance) => (\n                    <div\n                        key={instance.cluster_id}\n                        className='row'\n                    >\n                        <div className='col-md-6'>\n                            {instance.cluster_id}\n                        </div>\n                        <div className='col-md-3'>\n                            {instance.version}\n                        </div>\n                        <div className='col-md-3'>\n                            <PluginItemState state={instance.state}/>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        );\n    }\n\n    return (\n        <div data-testid={pluginStatus.id}>\n            <div>\n                <strong>{pluginStatus.name}</strong>\n                {' ('}\n                {pluginStatus.id}\n                {' - '}\n                {pluginStatus.version}\n                {')'}\n            </div>\n            {description}\n            <div className='padding-top'>\n                {activateButton}\n                {removeButton}\n                {settingsButton}\n            </div>\n            <div>\n                {notices}\n            </div>\n            <div>\n                {clusterSummary}\n            </div>\n            <hr/>\n        </div>\n    );\n};\n\nPluginItem.propTypes = {\n    pluginStatus: PropTypes.object.isRequired,\n    removing: PropTypes.bool.isRequired,\n    handleEnable: PropTypes.func.isRequired,\n    handleDisable: PropTypes.func.isRequired,\n    handleRemove: PropTypes.func.isRequired,\n    showInstances: PropTypes.bool.isRequired,\n    hasSettings: PropTypes.bool.isRequired,\n};\n\nexport default class PluginManagement extends AdminSettings {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        pluginStatuses: PropTypes.object.isRequired,\n        plugins: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            uploadPlugin: PropTypes.func.isRequired,\n            removePlugin: PropTypes.func.isRequired,\n            getPlugins: PropTypes.func.isRequired,\n            getPluginStatuses: PropTypes.func.isRequired,\n            enablePlugin: PropTypes.func.isRequired,\n            disablePlugin: PropTypes.func.isRequired,\n            installPluginFromUrl: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = Object.assign(this.state, {\n            loading: true,\n            fileSelected: false,\n            file: null,\n            pluginDownloadUrl: '',\n            serverError: null,\n            lastMessage: null,\n            uploading: false,\n            installing: false,\n            overwritingUpload: false,\n            confirmOverwriteUploadModal: false,\n            overwritingInstall: false,\n            confirmOverwriteInstallModal: false,\n            showRemoveModal: false,\n            resolveRemoveModal: null,\n        });\n    }\n\n    getConfigFromState = (config) => {\n        config.PluginSettings.Enable = this.state.enable;\n        config.PluginSettings.EnableUploads = this.state.enableUploads;\n        config.PluginSettings.AllowInsecureDownloadUrl = this.state.allowInsecureDownloadUrl;\n        config.PluginSettings.EnableMarketplace = this.state.enableMarketplace;\n        config.PluginSettings.EnableRemoteMarketplace = this.state.enableRemoteMarketplace;\n        config.PluginSettings.AutomaticPrepackagedPlugins = this.state.automaticPrepackagedPlugins;\n        config.PluginSettings.MarketplaceUrl = this.state.marketplaceUrl;\n        config.PluginSettings.RequirePluginSignature = this.state.requirePluginSignature;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const state = {\n            enable: config.PluginSettings.Enable,\n            enableUploads: config.PluginSettings.EnableUploads,\n            allowInsecureDownloadUrl: config.PluginSettings.AllowInsecureDownloadUrl,\n            enableMarketplace: config.PluginSettings.EnableMarketplace,\n            enableRemoteMarketplace: config.PluginSettings.EnableRemoteMarketplace,\n            automaticPrepackagedPlugins: config.PluginSettings.AutomaticPrepackagedPlugins,\n            marketplaceUrl: config.PluginSettings.MarketplaceUrl,\n            requirePluginSignature: config.PluginSettings.RequirePluginSignature,\n        };\n\n        return state;\n    }\n\n    componentDidMount() {\n        if (this.state.enable) {\n            this.props.actions.getPluginStatuses().then(\n                () => this.setState({loading: false})\n            );\n        }\n    }\n\n    handleUpload = () => {\n        this.setState({lastMessage: null, serverError: null});\n        const element = this.refs.fileInput;\n        if (element.files.length > 0) {\n            this.setState({fileSelected: true, file: element.files[0]});\n        }\n    }\n\n    helpSubmitUpload = async (file, force) => {\n        this.setState({uploading: true});\n        const {error} = await this.props.actions.uploadPlugin(file, force);\n\n        if (error) {\n            if (error.server_error_id === 'app.plugin.install_id.app_error' && !force) {\n                this.setState({confirmOverwriteUploadModal: true, overwritingUpload: true});\n                return;\n            }\n            this.setState({\n                file: null,\n                fileSelected: false,\n                uploading: false,\n            });\n            if (error.server_error_id === 'app.plugin.activate.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.activate', 'Unable to upload the plugin. It may conflict with another plugin on your server.')});\n            } else if (error.server_error_id === 'app.plugin.extract.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')});\n            } else {\n                this.setState({serverError: error.message});\n            }\n            this.setState({file: null, fileSelected: false});\n            return;\n        }\n\n        this.setState({loading: true});\n        await this.props.actions.getPlugins();\n\n        let msg = `Successfully uploaded plugin from ${file.name}`;\n        if (this.state.overwritingUpload) {\n            msg = `Successfully updated plugin from ${file.name}`;\n        }\n\n        this.setState({\n            file: null,\n            fileSelected: false,\n            serverError: null,\n            lastMessage: msg,\n            overwritingUpload: false,\n            uploading: false,\n            loading: false,\n        });\n    }\n\n    handleSubmitUpload = (e) => {\n        e.preventDefault();\n\n        const element = this.refs.fileInput;\n        if (element.files.length === 0) {\n            return;\n        }\n        const file = element.files[0];\n\n        this.helpSubmitUpload(file, false);\n        Utils.clearFileInput(element);\n    }\n\n    handleOverwriteUploadPluginCancel = () => {\n        this.setState({\n            file: null,\n            fileSelected: false,\n            serverError: null,\n            confirmOverwriteUploadModal: false,\n            lastMessage: null,\n            uploading: false,\n        });\n    }\n\n    handleOverwriteUploadPlugin = () => {\n        this.setState({confirmOverwriteUploadModal: false});\n        this.helpSubmitUpload(this.state.file, true);\n    }\n\n    onPluginDownloadUrlChange = (e) => {\n        this.setState({\n            pluginDownloadUrl: e.target.value,\n        });\n    }\n\n    installFromUrl = async (force) => {\n        const {pluginDownloadUrl} = this.state;\n\n        this.setState({\n            installing: true,\n            serverError: null,\n            lastMessage: null,\n        });\n        const {error} = await this.props.actions.installPluginFromUrl(pluginDownloadUrl, force);\n\n        if (error) {\n            if (error.server_error_id === 'app.plugin.install_id.app_error' && !force) {\n                this.setState({confirmOverwriteInstallModal: true, overwritingInstall: true});\n                return;\n            }\n\n            this.setState({\n                installing: false,\n            });\n\n            if (error.server_error_id === 'app.plugin.extract.app_error') {\n                this.setState({serverError: Utils.localizeMessage('admin.plugin.error.extract', 'Encountered an error when extracting the plugin. Review your plugin file content and try again.')});\n            } else {\n                this.setState({serverError: error.message});\n            }\n            return;\n        }\n\n        this.setState({loading: true});\n        await this.props.actions.getPlugins();\n\n        let msg = `Successfully installed plugin from ${pluginDownloadUrl}`;\n        if (this.state.overwritingInstall) {\n            msg = `Successfully updated plugin from ${pluginDownloadUrl}`;\n        }\n\n        this.setState({\n            serverError: null,\n            lastMessage: msg,\n            overwritingInstall: false,\n            installing: false,\n            loading: false,\n        });\n    }\n\n    getMarketplaceUrlHelpText = (url) => {\n        return (\n            <div>\n                {\n                    url === '' &&\n                    <div className='alert-warning'>\n                        <i className='fa fa-warning'/>\n                        <FormattedMarkdownMessage\n                            id='admin.plugins.settings.marketplaceUrlDesc.empty'\n                            defaultMessage=' Marketplace URL is a required field.'\n                        />\n                    </div>\n                }\n                {\n                    url !== '' &&\n                    <FormattedMarkdownMessage\n                        id='admin.plugins.settings.marketplaceUrlDesc'\n                        defaultMessage='URL of the marketplace server.'\n                    />\n                }\n            </div>\n        );\n    }\n\n    canSave = () => {\n        return this.state.marketplaceUrl !== '';\n    }\n\n    handleSubmitInstall = (e) => {\n        e.preventDefault();\n        return this.installFromUrl(false);\n    }\n\n    handleOverwriteInstallPluginCancel = () => {\n        this.setState({\n            confirmOverwriteInstallModal: false,\n            installing: false,\n            serverError: null,\n            lastMessage: null,\n        });\n    }\n\n    handleOverwriteInstallPlugin = () => {\n        this.setState({confirmOverwriteInstallModal: false});\n        return this.installFromUrl(true);\n    }\n\n    showRemovePluginModal = (e) => {\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n        this.setState({showRemoveModal: true, removing: pluginId});\n    }\n\n    handleRemovePluginCancel = () => {\n        this.setState({showRemoveModal: false, removing: null});\n    }\n\n    handleRemovePlugin = () => {\n        this.setState({showRemoveModal: false});\n        this.handleRemove();\n    }\n\n    handleRemove = async () => {\n        this.setState({lastMessage: null, serverError: null});\n        const {error} = await this.props.actions.removePlugin(this.state.removing);\n        this.setState({removing: null});\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleEnable = async (e) => {\n        e.preventDefault();\n        this.setState({lastMessage: null, serverError: null});\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.enablePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    handleDisable = async (e) => {\n        this.setState({lastMessage: null, serverError: null});\n        e.preventDefault();\n        const pluginId = e.currentTarget.getAttribute('data-plugin-id');\n\n        const {error} = await this.props.actions.disablePlugin(pluginId);\n\n        if (error) {\n            this.setState({serverError: error.message});\n        }\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.plugin.management.title'\n                defaultMessage='Management'\n            />\n        );\n    }\n\n    renderOverwritePluginModal = ({show, onConfirm, onCancel}) => {\n        const title = (\n            <FormattedMessage\n                id='admin.plugin.upload.overwrite_modal.title'\n                defaultMessage='Overwrite existing plugin?'\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='admin.plugin.upload.overwrite_modal.desc'\n                defaultMessage='A plugin with this ID already exists. Would you like to overwrite it?'\n            />\n        );\n\n        const overwriteButton = (\n            <FormattedMessage\n                id='admin.plugin.upload.overwrite_modal.overwrite'\n                defaultMessage='Overwrite'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={overwriteButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n\n    renderRemovePluginModal = ({show, onConfirm, onCancel}) => {\n        const title = (\n            <FormattedMessage\n                id='admin.plugin.remove_modal.title'\n                defaultMessage='Remove plugin?'\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='admin.plugin.remove_modal.desc'\n                defaultMessage='Are you sure you would like to remove the plugin?'\n            />\n        );\n\n        const removeButton = (\n            <FormattedMessage\n                id='admin.plugin.remove_modal.overwrite'\n                defaultMessage='Remove'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={removeButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n\n    renderEnablePluginsSetting = () => {\n        const hideEnablePlugins = this.props.config.ExperimentalSettings.RestrictSystemAdmin;\n        if (!hideEnablePlugins) {\n            return (\n                <BooleanSetting\n                    id='enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.plugins.settings.enable'\n                            defaultMessage='Enable Plugins: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.plugins.settings.enableDesc'\n                            defaultMessage='When true, enables plugins on your Mattermost server. Use plugins to integrate with third-party systems, extend functionality, or customize the user interface of your Mattermost server. See [documentation](https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                        />\n                    }\n                    value={this.state.enable}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('PluginSettings.Enable')}\n                />\n            );\n        }\n        return null;\n    }\n\n    renderSettings = () => {\n        const {enableUploads} = this.state;\n        const enable = this.props.config.PluginSettings.Enable;\n        let serverError = '';\n        let lastMessage = '';\n\n        // Using props values to make sure these are set on the server and not just locally\n        const enableUploadButton = enableUploads && enable && !this.props.config.PluginSettings.RequirePluginSignature;\n\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error half'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n        if (this.state.lastMessage) {\n            lastMessage = <div className='col-sm-12'><div className='form-group half'>{this.state.lastMessage}</div></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.file) {\n            fileName = this.state.file.name;\n        }\n\n        let uploadButtonText;\n        if (this.state.uploading) {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.uploading'\n                    defaultMessage='Uploading...'\n                />\n            );\n        } else {\n            uploadButtonText = (\n                <FormattedMessage\n                    id='admin.plugin.upload'\n                    defaultMessage='Upload'\n                />\n            );\n        }\n\n        let pluginsList;\n        let pluginsContainer;\n        let pluginsListContainer;\n        const plugins = Object.values(this.props.pluginStatuses);\n        if (this.state.loading) {\n            pluginsList = <LoadingScreen/>;\n        } else if (plugins.length === 0) {\n            pluginsListContainer = (\n                <FormattedMessage\n                    id='admin.plugin.no_plugins'\n                    defaultMessage='No installed plugins.'\n                />\n            );\n        } else {\n            const showInstances = plugins.some((pluginStatus) => pluginStatus.instances.length > 1);\n            plugins.sort((a, b) => {\n                if (a.name < b.name) {\n                    return -1;\n                } else if (a.name > b.name) {\n                    return 1;\n                }\n\n                return 0;\n            });\n\n            pluginsList = plugins.map((pluginStatus) => {\n                const p = this.props.plugins[pluginStatus.id];\n                const hasSettings = Boolean(p && p.settings_schema && (p.settings_schema.header || p.settings_schema.footer || (p.settings_schema.settings && p.settings_schema.settings.length > 0)));\n                return (\n                    <PluginItem\n                        key={pluginStatus.id}\n                        pluginStatus={pluginStatus}\n                        removing={this.state.removing === pluginStatus.id}\n                        handleEnable={this.handleEnable}\n                        handleDisable={this.handleDisable}\n                        handleRemove={this.showRemovePluginModal}\n                        showInstances={showInstances}\n                        hasSettings={hasSettings}\n                    />\n                );\n            });\n\n            pluginsListContainer = (\n                <div className='alert alert-transparent'>\n                    {pluginsList}\n                </div>\n            );\n        }\n\n        if (enable) {\n            pluginsContainer = (\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.plugin.installedTitle'\n                            defaultMessage='Installed Plugins: '\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <p className='help-text'>\n                            <FormattedHTMLMessage\n                                id='admin.plugin.installedDesc'\n                                defaultMessage='Installed plugins on your Mattermost server.'\n                            />\n                        </p>\n                        <br/>\n                        {pluginsListContainer}\n                    </div>\n                </div>\n            );\n        }\n\n        let uploadHelpText;\n\n        if (enableUploads && enable) {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDesc'\n                    defaultMessage='Upload a plugin for your Mattermost server. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        } else if (enable && !enableUploads) {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadDisabledDesc'\n                    defaultMessage='Enable plugin uploads in config.json. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        } else {\n            uploadHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.plugin.uploadAndPluginDisabledDesc'\n                    defaultMessage='To enable plugins, set **Enable Plugins** to true. See [documentation](!https://about.mattermost.com/default-plugin-uploads) to learn more.'\n                />\n            );\n        }\n\n        const overwriteUploadPluginModal = this.state.confirmOverwriteUploadModal && this.renderOverwritePluginModal({\n            show: this.state.confirmOverwriteUploadModal,\n            onConfirm: this.handleOverwriteUploadPlugin,\n            onCancel: this.handleOverwriteUploadPluginCancel,\n        });\n\n        const removePluginModal = this.state.showRemoveModal && this.renderRemovePluginModal({\n            show: this.state.showRemoveModal,\n            onConfirm: this.handleRemovePlugin,\n            onCancel: this.handleRemovePluginCancel,\n        });\n\n        return (\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    <SettingsGroup\n                        id={'PluginSettings'}\n                        container={false}\n                    >\n                        {this.renderEnablePluginsSetting()}\n\n                        <BooleanSetting\n                            id='requirePluginSignature'\n                            label={\n                                <FormattedMessage\n                                    id='admin.plugins.settings.requirePluginSignature'\n                                    defaultMessage='Require Plugin Signature:'\n                                />\n                            }\n                            helpText={\n                                <FormattedMarkdownMessage\n                                    id='admin.plugins.settings.requirePluginSignatureDesc'\n                                    defaultMessage='When true, uploading plugins is disabled and may only be installed through the Marketplace. Plugins are always verified during Mattermost server startup and initialization. See [documentation](!https://mattermost.com/pl/default-plugin-signing) to learn more.'\n                                />\n                            }\n                            value={this.state.requirePluginSignature}\n                            disabled={!this.state.enable}\n                            onChange={this.handleChange}\n                            setByEnv={this.isSetByEnv('PluginSettings.RequirePluginSignature')}\n                        />\n                        <BooleanSetting\n                            id='automaticPrepackagedPlugins'\n                            label={\n                                <FormattedMessage\n                                    id='admin.plugins.settings.automaticPrepackagedPlugins'\n                                    defaultMessage='Enable Automatic Prepackaged Plugins:'\n                                />\n                            }\n                            helpText={\n                                <FormattedMarkdownMessage\n                                    id='admin.plugins.settings.automaticPrepackagedPluginsDesc'\n                                    defaultMessage='When true, automatically installs any prepackaged plugin found to be enabled in the server configuration.'\n                                />\n                            }\n                            value={this.state.automaticPrepackagedPlugins}\n                            disabled={!this.state.enable}\n                            onChange={this.handleChange}\n                            setByEnv={this.isSetByEnv('PluginSettings.AutomaticPrepackagedPlugins')}\n                        />\n                        <div className='form-group'>\n                            <label\n                                className='control-label col-sm-4'\n                            >\n                                <FormattedMessage\n                                    id='admin.plugin.uploadTitle'\n                                    defaultMessage='Upload Plugin: '\n                                />\n                            </label>\n                            <div className='col-sm-8'>\n                                <div className='file__upload'>\n                                    <button\n                                        className={classNames(['btn', {'btn-primary': enableUploads}])}\n                                        disabled={!enableUploadButton}\n                                    >\n                                        <FormattedMessage\n                                            id='admin.plugin.choose'\n                                            defaultMessage='Choose File'\n                                        />\n                                    </button>\n                                    <input\n                                        ref='fileInput'\n                                        type='file'\n                                        accept='.gz'\n                                        onChange={this.handleUpload}\n                                        disabled={!enableUploadButton}\n                                    />\n                                </div>\n                                <button\n                                    className={btnClass}\n                                    id='uploadPlugin'\n                                    disabled={!this.state.fileSelected}\n                                    onClick={this.handleSubmitUpload}\n                                >\n                                    {uploadButtonText}\n                                </button>\n                                <div className='help-text no-margin'>\n                                    {fileName}\n                                </div>\n                                {serverError}\n                                {lastMessage}\n                                <p className='help-text'>\n                                    {uploadHelpText}\n                                </p>\n                            </div>\n                        </div>\n                        <BooleanSetting\n                            id='enableMarketplace'\n                            label={\n                                <FormattedMessage\n                                    id='admin.plugins.settings.enableMarketplace'\n                                    defaultMessage='Enable Marketplace:'\n                                />\n                            }\n                            helpText={\n                                <FormattedMarkdownMessage\n                                    id='admin.plugins.settings.enableMarketplaceDesc'\n                                    defaultMessage='When true, enables System Administrators to install plugins from the [marketplace](!https://mattermost.com/pl/default-mattermost-marketplace.html).'\n                                />\n                            }\n                            value={this.state.enableMarketplace}\n                            disabled={!this.state.enable}\n                            onChange={this.handleChange}\n                            setByEnv={this.isSetByEnv('PluginSettings.EnableMarketplace')}\n                        />\n                        <BooleanSetting\n                            id='enableRemoteMarketplace'\n                            label={\n                                <FormattedMessage\n                                    id='admin.plugins.settings.enableRemoteMarketplace'\n                                    defaultMessage='Enable Remote Marketplace:'\n                                />\n                            }\n                            helpText={\n                                <FormattedMarkdownMessage\n                                    id='admin.plugins.settings.enableRemoteMarketplaceDesc'\n                                    defaultMessage='When true, marketplace fetches latest plugins from the configured Marketplace URL.'\n                                />\n                            }\n                            value={this.state.enableRemoteMarketplace}\n                            disabled={!this.state.enable || !this.state.enableMarketplace}\n                            onChange={this.handleChange}\n                            setByEnv={this.isSetByEnv('PluginSettings.EnableRemoteMarketplace')}\n                        />\n                        <TextSetting\n                            id={'marketplaceUrl'}\n                            type={'input'}\n                            label={\n                                <FormattedMessage\n                                    id='admin.plugins.settings.marketplaceUrl'\n                                    defaultMessage='Marketplace URL:'\n                                />\n                            }\n                            helpText={this.getMarketplaceUrlHelpText(this.state.marketplaceUrl)}\n                            value={this.state.marketplaceUrl}\n                            disabled={!this.state.enable || !this.state.enableMarketplace || !this.state.enableRemoteMarketplace}\n                            onChange={this.handleChange}\n                            setByEnv={this.isSetByEnv('PluginSettings.MarketplaceUrl')}\n                        />\n                        {pluginsContainer}\n                    </SettingsGroup>\n                    {overwriteUploadPluginModal}\n                    {removePluginModal}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {\n    getPlugins,\n    getPluginStatuses,\n    removePlugin,\n    uploadPlugin,\n    installPluginFromUrl,\n    enablePlugin,\n    disablePlugin,\n} from 'mattermost-redux/actions/admin';\n\nimport PluginManagement from './plugin_management.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        plugins: state.entities.admin.plugins,\n        pluginStatuses: state.entities.admin.pluginStatuses,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            uploadPlugin,\n            installPluginFromUrl,\n            removePlugin,\n            getPlugins,\n            getPluginStatuses,\n            enablePlugin,\n            disablePlugin,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PluginManagement);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {Permissions} from 'mattermost-redux/constants/index';\n\nconst MAPPING = {\n    enableTeamCreation: {\n        true: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: true}],\n        false: [{roleName: 'system_user', permission: Permissions.CREATE_TEAM, shouldHave: false}],\n    },\n\n    editOthersPosts: {\n        true: [\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n        ],\n        false: [\n            {roleName: 'team_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: false},\n            {roleName: 'system_admin', permission: Permissions.EDIT_OTHERS_POSTS, shouldHave: true},\n        ],\n    },\n\n    enableOnlyAdminIntegrations: {\n        true: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_INCOMING_WEBHOOKS, shouldHave: false},\n            {roleName: 'team_user', permission: Permissions.MANAGE_OUTGOING_WEBHOOKS, shouldHave: false},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: false},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: false},\n        ],\n        false: [\n            {roleName: 'team_user', permission: Permissions.MANAGE_INCOMING_WEBHOOKS, shouldHave: true},\n            {roleName: 'team_user', permission: Permissions.MANAGE_OUTGOING_WEBHOOKS, shouldHave: true},\n            {roleName: 'team_user', permission: Permissions.MANAGE_SLASH_COMMANDS, shouldHave: true},\n            {roleName: 'system_user', permission: Permissions.MANAGE_OAUTH, shouldHave: true},\n        ],\n    },\n};\n\n/**\n * Get the roles that were changed (but unsaved) for given mapping key/values.\n *\n * @param {object} mappingValues key/value to indicate which mapping items to use to update the roles.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {object} the updated roles (only) in the same structure as returned by mattermost-redux `getRoles`.\n */\nexport function rolesFromMapping(mappingValues, roles) {\n    const rolesClone = JSON.parse(JSON.stringify(roles));\n\n    // Purge roles that aren't present in MAPPING, we don't care about them.\n    purgeNonPertinentRoles(rolesClone);\n\n    Object.keys(MAPPING).forEach((mappingKey) => {\n        const value = mappingValues[mappingKey];\n        if (value) {\n            mutateRolesBasedOnMapping(mappingKey, value, rolesClone);\n        }\n    });\n\n    // Purge roles that didn't have permissions changes, we don't care about them.\n    Object.entries(rolesClone).forEach(([roleName, roleClone]) => {\n        const originalPermissionSet = new Set(roles[roleName].permissions);\n        const newPermissionSet = new Set(roleClone.permissions);\n        const difference = [...newPermissionSet].filter((x) => !originalPermissionSet.has(x));\n\n        if (originalPermissionSet.size === newPermissionSet.size && difference.length === 0) {\n            delete rolesClone[roleName];\n        }\n    });\n\n    return rolesClone;\n}\n\n/**\n * Get the mapping value that matches for a given set of roles.\n *\n * @param {string} key to match under in the mapping.\n * @param {object} roles same structure as returned by mattermost-redux `getRoles`.\n * @return {string} the value that the roles/permissions assignment match in the mapping.\n */\nexport function mappingValueFromRoles(key, roles) {\n    for (const o of mappingPartIterator(MAPPING[key], roles)) {\n        if (o.allConditionsAreMet) {\n            return o.value;\n        }\n    }\n    throw new Error(`No matching mapping value found for key '${key}' with the given roles.`);\n}\n\nfunction purgeNonPertinentRoles(roles) {\n    const pertinentRoleNames = roleNamesInMapping();\n\n    Object.keys(roles).forEach((key) => {\n        if (!pertinentRoleNames.includes(key)) {\n            delete roles[key];\n        }\n    });\n}\n\nfunction mutateRolesBasedOnMapping(mappingKey, value, roles) {\n    const roleRules = MAPPING[mappingKey][value];\n\n    if (typeof roleRules === 'undefined') {\n        throw new Error(`Value '${value}' not present in MAPPING for key '${mappingKey}'.`);\n    }\n\n    roleRules.forEach((item) => {\n        const role = roles[item.roleName];\n        if (item.shouldHave) {\n            addPermissionToRole(item.permission, role);\n        } else {\n            removePermissionFromRole(item.permission, role);\n        }\n    });\n}\n\n// Returns a set of the role names present in MAPPING.\nfunction roleNamesInMapping() {\n    let roleNames = [];\n\n    Object.values(MAPPING).forEach((v1) => {\n        Object.values(v1).forEach((v2) => {\n            const names = v2.map((item) => item.roleName); // eslint-disable-line max-nested-callbacks\n            roleNames = roleNames.concat(names);\n        });\n    });\n\n    return [...new Set(roleNames.map((item) => item))];\n}\n\nfunction* mappingPartIterator(mappingPart, roles) {\n    for (const value in mappingPart) {\n        if (mappingPart.hasOwnProperty(value)) {\n            const roleRules = mappingPart[value];\n\n            const hasUnmetCondition = roleRules.some((item) => {\n                const role = roles[item.roleName];\n                return (item.shouldHave && !role.permissions.includes(item.permission)) || (!item.shouldHave && role.permissions.includes(item.permission));\n            });\n\n            yield {value, allConditionsAreMet: !hasUnmetCondition};\n        }\n    }\n}\n\nfunction addPermissionToRole(permission, role) {\n    if (!role.permissions.includes(permission)) {\n        role.permissions.push(permission);\n    }\n}\n\nfunction removePermissionFromRole(permission, role) {\n    const permissionIndex = role.permissions.indexOf(permission);\n    if (permissionIndex !== -1) {\n        role.permissions.splice(permissionIndex, 1);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\nimport SuccessIcon from 'components/widgets/icons/fa_success_icon';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\n/**\n * A button which, when clicked, performs an action and displays\n * its outcome as either success, or failure accompanied by the\n * `message` property of the `err` object.\n */\nexport default class RequestButton extends React.Component {\n    static propTypes = {\n\n        /**\n         * TD to assign to the form\n         */\n        id: PropTypes.string,\n\n        /**\n         * The action to be called to carry out the request.\n         */\n        requestAction: PropTypes.func.isRequired,\n\n        /**\n         * A component that displays help text for the request button.\n         *\n         * Typically, this will be a <FormattedMessage/>.\n         */\n        helpText: PropTypes.element,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        loadingText: PropTypes.string,\n\n        /**\n         * A component to be displayed on the button.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        buttonText: PropTypes.element.isRequired,\n\n        /**\n         * The element to display as the field label.\n         *\n         * Typically, this will be a <FormattedMessage/>\n         */\n        label: PropTypes.element,\n\n        /**\n         * True if the button form control should be disabled, otherwise false.\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * True if the config needs to be saved before running the request, otherwise false.\n         *\n         * If set to true, the action provided in the `saveConfigAction` property will be\n         * called before the action provided in the `requestAction` property, with the later\n         * only being called if the former is successful.\n         */\n        saveNeeded: PropTypes.bool,\n\n        /**\n         * Action to be called to save the config, if saveNeeded is set to true.\n         */\n        saveConfigAction: PropTypes.func,\n\n        /**\n         * True if the success message should be show when the request completes successfully,\n         * otherwise false.\n         */\n        showSuccessMessage: PropTypes.bool,\n\n        /**\n         * The message to show when the request completes successfully.\n         */\n        successMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the success message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the success message.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * The message to show when the request returns an error.\n         */\n        errorMessage: PropTypes.shape({\n\n            /**\n             * The i18n string ID for the error message.\n             */\n            id: PropTypes.string.isRequired,\n\n            /**\n             * The i18n default value for the error message.\n             *\n             * The placeholder {error} may be used to include the error message returned\n             * by the server in response to the failed request.\n             */\n            defaultMessage: PropTypes.string.isRequired,\n        }),\n\n        /**\n         * True if the {error} placeholder for the `errorMessage` property should include both\n         * the `message` and `detailed_error` properties of the error returned from the server,\n         * otherwise false to include only the `message` property.\n         */\n        includeDetailedError: PropTypes.bool,\n\n        /**\n         * An element to display adjacent to the request button.\n         */\n        alternativeActionElement: PropTypes.element,\n    }\n\n    static defaultProps = {\n        id: null,\n        disabled: false,\n        saveNeeded: false,\n        showSuccessMessage: true,\n        includeDetailedError: false,\n        successMessage: {\n            id: t('admin.requestButton.requestSuccess'),\n            defaultMessage: 'Test Successful',\n        },\n        errorMessage: {\n            id: t('admin.requestButton.requestFailure'),\n            defaultMessage: 'Test Failure: {error}',\n        },\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            busy: false,\n            fail: null,\n            success: false,\n        };\n    }\n\n    handleRequest = (e) => {\n        e.preventDefault();\n\n        this.setState({\n            busy: true,\n            fail: null,\n            success: false,\n        });\n\n        const doRequest = () => { //eslint-disable-line func-style\n            this.props.requestAction(\n                () => {\n                    this.setState({\n                        busy: false,\n                        success: true,\n                    });\n                },\n                (err) => {\n                    let errMsg = err.message;\n                    if (this.props.includeDetailedError && err.detailed_error) {\n                        errMsg += ' - ' + err.detailed_error;\n                    }\n\n                    this.setState({\n                        busy: false,\n                        fail: errMsg,\n                    });\n                }\n            );\n        };\n\n        if (this.props.saveNeeded) {\n            this.props.saveConfigAction(doRequest);\n        } else {\n            doRequest();\n        }\n    }\n\n    render() {\n        let message = null;\n        if (this.state.fail) {\n            message = (\n                <div>\n                    <div className='alert alert-warning'>\n                        <WarningIcon/>\n                        <FormattedMessage\n                            id={this.props.errorMessage.id}\n                            defaultMessage={this.props.errorMessage.defaultMessage}\n                            values={{\n                                error: this.state.fail,\n                            }}\n                        />\n                    </div>\n                </div>\n            );\n        } else if (this.state.success && this.props.showSuccessMessage) {\n            message = (\n                <div>\n                    <div className='alert alert-success'>\n                        <SuccessIcon/>\n                        <FormattedMessage\n                            id={this.props.successMessage.id}\n                            defaultMessage={this.props.successMessage.defaultMessage}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        let widgetClassNames = 'col-sm-8';\n        let label = null;\n        if (this.props.label) {\n            label = (\n                <label\n                    className='control-label col-sm-4'\n                >\n                    {this.props.label}\n                </label>\n            );\n        } else {\n            widgetClassNames = 'col-sm-offset-4 ' + widgetClassNames;\n        }\n\n        return (\n            <div\n                className='form-group'\n                id={this.props.id}\n            >\n                {label}\n                <div className={widgetClassNames}>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleRequest}\n                            disabled={this.props.disabled}\n                        >\n                            <LoadingWrapper\n                                loading={this.state.busy}\n                                text={this.props.loadingText || Utils.localizeMessage('admin.requestButton.loading', ' Loading...')}\n                            >\n                                {this.props.buttonText}\n                            </LoadingWrapper>\n                        </button>\n                        {this.props.alternativeActionElement}\n                        {message}\n                    </div>\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting';\n\nexport default class DropdownSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n    }\n\n    static defaultProps = {\n        isDisabled: false,\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    render() {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <option\n                    value={value}\n                    key={value}\n                >\n                    {text}\n                </option>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <select\n                    data-testid={this.props.id + 'dropdown'}\n                    className='form-control'\n                    id={this.props.id}\n                    value={this.props.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                >\n                    {options}\n                </select>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport ReactSelect from 'react-select';\n\nimport FormError from 'components/form_error';\n\nimport Setting from './setting';\n\nexport default class MultiSelectSetting extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        values: PropTypes.array.isRequired,\n        label: PropTypes.node.isRequired,\n        selected: PropTypes.array.isRequired,\n        mustBePresent: PropTypes.string,\n        onChange: PropTypes.func.isRequired,\n        disabled: PropTypes.bool,\n        setByEnv: PropTypes.bool.isRequired,\n        helpText: PropTypes.node,\n        noResultText: PropTypes.node,\n        errorText: PropTypes.node,\n        notPresent: PropTypes.node,\n    };\n\n    static defaultProps = {\n        disabled: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {error: false};\n    }\n\n    handleChange = (newValue) => {\n        const values = newValue.map((n) => {\n            return n.value;\n        });\n\n        if (this.props.selected.length > 0 && this.props.mustBePresent && values.join(',').indexOf(this.props.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.props.onChange(this.props.id, values);\n            this.setState({error: false});\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(newProps) { // eslint-disable-line camelcase\n        if (newProps.selected.length > 0 && newProps.mustBePresent && newProps.selected.join(',').indexOf(newProps.mustBePresent) === -1) {\n            this.setState({error: this.props.notPresent});\n        } else {\n            this.setState({error: false});\n        }\n    }\n\n    calculateValue = () => {\n        return this.props.selected.reduce((values, item) => {\n            const found = this.props.values.find((e) => {\n                return e.value === item;\n            });\n            if (found !== null) {\n                values.push(found);\n            }\n            return values;\n        }, []);\n    };\n\n    getOptionLabel = ({text}) => text;\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                <ReactSelect\n                    id={this.props.id}\n                    isMulti={true}\n                    getOptionLabel={this.getOptionLabel}\n                    options={this.props.values}\n                    delimiter={','}\n                    clearable={false}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                    noResultsText={this.props.noResultText}\n                    onChange={this.handleChange}\n                    value={this.calculateValue()}\n                />\n                <FormError error={this.state.error}/>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport Setting from './setting';\n\ninterface Props {\n    id: string;\n    label: React.ReactNode;\n    values: { text: string; value: string }[];\n    value: string;\n    setByEnv: boolean;\n    disabled?: boolean;\n    helpText?: React.ReactNode;\n    onChange(id: string, value: any): void;\n}\nexport default class RadioSetting extends React.Component<Props> {\n    public static defaultProps: Partial<Props> = {\n        disabled: false,\n    };\n\n    private handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.props.onChange(this.props.id, e.target.value);\n    };\n\n    render(): JSX.Element {\n        const options = [];\n        for (const {value, text} of this.props.values) {\n            options.push(\n                <div\n                    className='radio'\n                    key={value}\n                >\n                    <label>\n                        <input\n                            type='radio'\n                            value={value}\n                            name={this.props.id}\n                            checked={value === this.props.value}\n                            onChange={this.handleChange}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        />\n                        {text}\n                    </label>\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                inputId={this.props.id}\n                helpText={this.props.helpText}\n                setByEnv={this.props.setByEnv}\n            >\n                {options}\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChromePicker, ColorResult} from 'react-color';\n\nimport Setting from './setting';\n\ntype State = {\n    showPicker: boolean;\n}\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    helpText?: React.ReactNode;\n    value: string;\n    onChange?: (id: string, color: string) => void;\n    disabled?: boolean;\n}\n\nexport default class ColorSetting extends React.PureComponent<Props, State> {\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            showPicker: false,\n        };\n    }\n\n    public componentDidMount() {\n        document.addEventListener('click', this.closePicker);\n    }\n\n    public componentWillUnmount() {\n        document.removeEventListener('click', this.closePicker);\n    }\n\n    private handleChange = (color: ColorResult) => {\n        if (this.props.onChange) {\n            this.props.onChange(this.props.id, color.hex);\n        }\n    }\n\n    private togglePicker = () => {\n        if (this.props.disabled) {\n            this.setState({showPicker: false});\n        } else {\n            this.setState({showPicker: !this.state.showPicker});\n        }\n    }\n\n    private closePicker = (e: MouseEvent) => {\n        if (e.target) {\n            const closest = (e.target as HTMLElement).closest('.' + this.getPickerClass());\n            if (!closest || !closest.contains(e.target as HTMLElement)) {\n                this.setState({showPicker: false});\n            }\n        }\n    }\n\n    private onTextInput = (e: React.ChangeEvent<HTMLInputElement>) => {\n        if (this.props.onChange) {\n            this.props.onChange(this.props.id, e.target.value);\n        }\n    }\n\n    private getPickerClass = () => {\n        return this.props.id ? 'picker-' + this.props.id.replace('.', '-') : '';\n    }\n\n    public render() {\n        let picker;\n        if (this.state.showPicker) {\n            picker = (\n                <div className={'color-picker__popover ' + this.getPickerClass()}>\n                    <ChromePicker\n                        color={this.props.value}\n                        onChange={this.handleChange}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div className='input-group color-picker colorpicker-element'>\n                    <input\n                        type='text'\n                        className='form-control'\n                        value={this.props.value}\n                        onChange={this.onTextInput}\n                        disabled={this.props.disabled}\n                    />\n                    <span\n                        className={'input-group-addon ' + this.getPickerClass()}\n                        onClick={this.togglePicker}\n                    >\n                        <i style={{backgroundColor: this.props.value}}/>\n                    </span>\n                    {picker}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport crypto from 'crypto';\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport SetByEnv from './set_by_env';\n\ntype Props = {\n    id: string;\n    label: React.ReactNode;\n    placeholder?: string;\n    value: string;\n    onChange: (id: string, s: string) => void;\n    disabled: boolean;\n    setByEnv: boolean;\n    disabledText?: React.ReactNode;\n    helpText: React.ReactNode;\n    regenerateText: React.ReactNode;\n    regenerateHelpText?: React.ReactNode;\n}\n\nexport default class GeneratedSetting extends React.Component<Props> {\n    public static get defaultProps() {\n        return {\n            disabled: false,\n            regenerateText: (\n                <FormattedMessage\n                    id='admin.regenerate'\n                    defaultMessage='Regenerate'\n                />\n            ),\n        };\n    }\n\n    private regenerate = (e: React.MouseEvent) => {\n        e.preventDefault();\n\n        this.props.onChange(this.props.id, crypto.randomBytes(256).toString('base64').substring(0, 32));\n    }\n\n    public render() {\n        let disabledText = null;\n        if (this.props.disabled && this.props.disabledText) {\n            disabledText = (\n                <div className='admin-console__disabled-text'>\n                    {this.props.disabledText}\n                </div>\n            );\n        }\n\n        let regenerateHelpText = null;\n        if (this.props.regenerateHelpText) {\n            regenerateHelpText = (\n                <div className='help-text'>\n                    {this.props.regenerateHelpText}\n                </div>\n            );\n        }\n\n        let text: React.ReactNode = this.props.value;\n        if (!text) {\n            text = (\n                <span className='placeholder-text'>{this.props.placeholder}</span>\n            );\n        }\n\n        return (\n            <div className='form-group'>\n                <label\n                    className='control-label col-sm-4'\n                    htmlFor={this.props.id}\n                >\n                    {this.props.label}\n                </label>\n                <div className='col-sm-8'>\n                    <div\n                        className='form-control disabled'\n                        id={this.props.id}\n                    >\n                        {text}\n                    </div>\n                    {disabledText}\n                    <div className='help-text'>\n                        {this.props.helpText}\n                    </div>\n                    <div className='help-text'>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.regenerate}\n                            disabled={this.props.disabled || this.props.setByEnv}\n                        >\n                            {this.props.regenerateText}\n                        </button>\n                    </div>\n                    {regenerateHelpText}\n                    {this.props.setByEnv ? <SetByEnv/> : null}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport GenericUserProvider from 'components/suggestion/generic_user_provider.jsx';\nimport Setting from 'components/admin_console/setting';\nimport SuggestionBox from 'components/suggestion/suggestion_box.jsx';\nimport SuggestionList from 'components/suggestion/suggestion_list.jsx';\n\nexport default class UserAutocompleteSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            placeholder: PropTypes.string,\n            helpText: PropTypes.node,\n            value: PropTypes.string,\n            onChange: PropTypes.func,\n            disabled: PropTypes.bool,\n            actions: PropTypes.shape({\n                autocompleteUsers: PropTypes.func.isRequired,\n            }),\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.userSuggestionProviders = [new GenericUserProvider(props.actions.autocompleteUsers)];\n    }\n\n    handleChange = (e) => {\n        this.props.onChange(this.props.id, e.target.value);\n    }\n\n    handleUserSelected = (user) => {\n        this.props.onChange(this.props.id, user.username);\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div\n                    className='admin-setting-user__dropdown'\n                >\n                    <SuggestionBox\n                        id={'admin_user_setting_' + this.props.id}\n                        className='form-control'\n                        placeholder={this.props.placeholder}\n                        value={this.props.value}\n                        onChange={this.handleChange}\n                        onItemSelected={this.handleUserSelected}\n                        listComponent={SuggestionList}\n                        listStyle='bottom'\n                        providers={this.userSuggestionProviders}\n                        disabled={this.props.disabled}\n                        requiredCharacters={0}\n                        openOnFocus={true}\n                    />\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {bindActionCreators} from 'redux';\n\nimport {autocompleteUsers} from 'actions/user_actions';\n\nimport UserAutocompleteSetting from './user_autocomplete_setting';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            autocompleteUsers,\n        }, dispatch),\n    };\n}\nexport default connect(null, mapDispatchToProps)(UserAutocompleteSetting);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime, injectIntl} from 'react-intl';\n\nimport {JobStatuses} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\nimport * as Utils from 'utils/utils.jsx';\n\nclass JobTable extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Used for formatting dates\n         */\n        intl: intlShape.isRequired,\n\n        /**\n         * Array of jobs\n         */\n        jobs: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * Function called when displaying extra text.\n         */\n        getExtraInfoText: PropTypes.func,\n\n        /**\n         * Grey buttons out when disabled\n         */\n        disabled: PropTypes.bool,\n\n        /**\n         * Help text under the create job button\n         */\n        createJobHelpText: PropTypes.element.isRequired,\n\n        /**\n         * Button text to create a new job\n         */\n        createJobButtonText: PropTypes.element.isRequired,\n\n        /**\n         * The type of jobs to include in this table.\n         */\n        jobType: PropTypes.string.isRequired,\n\n        actions: PropTypes.shape({\n            getJobsByType: PropTypes.func.isRequired,\n            cancelJob: PropTypes.func.isRequired,\n            createJob: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.interval = null;\n\n        this.state = {\n            loading: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => this.setState({loading: false})\n        );\n\n        this.interval = setInterval(this.reload, 15000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    getStatus = (job) => {\n        const formatMessage = this.props.intl.formatMessage;\n        if (job.status === JobStatuses.PENDING) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusPending'\n                        defaultMessage='Pending'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusInProgress'\n                        defaultMessage='In Progress'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.SUCCESS) {\n            return (\n                <span\n                    className='status-icon-success'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusSuccess'\n                        defaultMessage='Success'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.ERROR) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusError'\n                        defaultMessage='Error'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span\n                    className='status-icon-warning'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceling'\n                        defaultMessage='Canceling...'\n                    />\n                </span>\n            );\n        } else if (job.status === JobStatuses.CANCELED) {\n            return (\n                <span\n                    className='status-icon-error'\n                    title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}\n                >\n                    <FormattedMessage\n                        id='admin.jobTable.statusCanceled'\n                        defaultMessage='Canceled'\n                    />\n                </span>\n            );\n        }\n\n        return (\n            <span title={formatMessage({id: 'admin.jobTable.jobId', defaultMessage: 'Job ID: '}) + job.id}>{job.status}</span>\n        );\n    }\n\n    getExtraInfoText = (job) => {\n        if (job.data && job.data.error && job.data.error.length > 0) {\n            return <span title={job.data.error}>{job.data.error}</span>;\n        }\n\n        if (this.props.getExtraInfoText) {\n            return this.props.getExtraInfoText(job);\n        }\n\n        return <span/>;\n    }\n\n    getRunLength = (job) => {\n        let millis = job.last_activity_at - job.start_at;\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            const runningMillis = Date.now() - job.start_at;\n            if (runningMillis > millis) {\n                millis = runningMillis;\n            }\n        }\n\n        let lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') + '--';\n\n        if (job.last_activity_at > 0) {\n            lastActivity = Utils.localizeMessage('admin.jobTable.lastActivityAt', 'Last Activity: ') +\n                this.props.intl.formatDate(new Date(job.last_activity_at), {\n                    year: 'numeric',\n                    month: 'short',\n                    day: '2-digit',\n                }) + ' - ' +\n                this.props.intl.formatTime(new Date(job.last_activity_at), {\n                    hour: '2-digit',\n                    minute: '2-digit',\n                    second: '2-digit',\n                });\n        }\n\n        var seconds = Math.round(millis / 1000);\n        var minutes = Math.round(millis / (1000 * 60));\n\n        if (millis <= 0 || job.status === JobStatuses.CANCELED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        if (seconds <= 120) {\n            return (\n                <span\n                    className='whitespace--nowrap'\n                    title={lastActivity}\n                >\n                    {seconds + Utils.localizeMessage('admin.jobTable.runLengthSeconds', ' seconds')}\n                </span>\n            );\n        }\n\n        return (\n            <span\n                className='whitespace--nowrap'\n                title={lastActivity}\n            >\n                {minutes + Utils.localizeMessage('admin.jobTable.runLengthMinutes', ' minutes')}\n            </span>\n        );\n    }\n\n    getFinishAt = (status, millis) => {\n        if (millis === 0 || status === JobStatuses.PENDING || status === JobStatuses.IN_PROGRESS || status === JobStatuses.CANCEL_REQUESTED) {\n            return (\n                <span className='whitespace--nowrap'>{'--'}</span>\n            );\n        }\n\n        const date = new Date(millis);\n\n        return (\n            <span className='whitespace--nowrap'>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    reload = () => {\n        this.setState({loading: true});\n\n        this.props.actions.getJobsByType(this.props.jobType).then(\n            () => {\n                this.setState({\n                    loading: false,\n                });\n            }\n        );\n    };\n\n    handleCancelJob = async (e) => {\n        e.preventDefault();\n        const jobId = e.currentTarget.getAttribute('data-job-id');\n        await this.props.actions.cancelJob(jobId);\n        this.reload();\n    };\n\n    handleCreateJob = async (e) => {\n        e.preventDefault();\n        const job = {\n            type: this.props.jobType,\n        };\n\n        await this.props.actions.createJob(job);\n        this.reload();\n    };\n\n    getCancelButton = (job) => {\n        const formatMessage = this.props.intl.formatMessage;\n        let cancelButton = null;\n\n        if (!this.props.disabled && (job.status === JobStatuses.PENDING || job.status === JobStatuses.IN_PROGRESS)) {\n            cancelButton = (\n                <span\n                    data-job-id={job.id}\n                    onClick={this.handleCancelJob}\n                    className='job-table__cancel-button'\n                    title={formatMessage({id: 'admin.jobTable.cancelButton', defaultMessage: 'Cancel'})}\n                >\n                    {'×'}\n                </span>\n            );\n        }\n\n        return cancelButton;\n    }\n\n    render() {\n        var items = this.props.jobs.map((job) => {\n            return (\n                <tr key={job.id}>\n                    <td\n                        width='30px'\n                        className='whitespace--nowrap text-center'\n                    >\n                        {this.getCancelButton(job)}\n                    </td>\n                    <td className='whitespace--nowrap'>{this.getStatus(job)}</td>\n                    <td className='whitespace--nowrap'>{this.getFinishAt(job.status, job.last_activity_at)}</td>\n                    <td className='whitespace--nowrap'>{this.getRunLength(job)}</td>\n                    <td>{this.getExtraInfoText(job)}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div className='job-table__panel'>\n                <div className='job-table__create-button'>\n                    <div>\n                        <button\n                            className='btn btn-default'\n                            onClick={this.handleCreateJob}\n                            disabled={this.props.disabled}\n                        >\n                            {this.props.createJobButtonText}\n                        </button>\n                    </div>\n                    <div className='help-text'>\n                        {this.props.createJobHelpText}\n                    </div>\n                </div>\n                <div className='job-table__table'>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th width='30px'/>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerStatus'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerFinishAt'\n                                        defaultMessage='Finish Time'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerRunTime'\n                                        defaultMessage='Run Time'\n                                    />\n                                </th>\n                                <th colSpan='3'>\n                                    <FormattedMessage\n                                        id='admin.jobTable.headerExtraInfo'\n                                        defaultMessage='Details'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {items}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(JobTable);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getJobsByType, createJob, cancelJob} from 'mattermost-redux/actions/jobs';\nimport * as Selectors from 'mattermost-redux/selectors/entities/jobs';\n\nimport Table from './table.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    return {\n        jobs: Selectors.makeGetJobsByType(ownProps.jobType)(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getJobsByType,\n            createJob,\n            cancelJob,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport Setting from './setting';\n\nexport default class FileUploadSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            uploadingText: PropTypes.node,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            fileType: PropTypes.string.isRequired,\n            error: PropTypes.string,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fileName: null,\n            serverError: props.error,\n        };\n    }\n\n    handleChange = () => {\n        const files = this.refs.fileInput.files;\n        if (files && files.length > 0) {\n            this.setState({fileSelected: true, fileName: files[0].name});\n        }\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        $(this.refs.upload_button).button('loading');\n        this.props.onSubmit(this.props.id, this.refs.fileInput.files[0], (error) => {\n            $(this.refs.upload_button).button('reset');\n            if (error) {\n                Utils.clearFileInput(this.refs.fileInput);\n            }\n        });\n    }\n\n    render() {\n        let serverError;\n        if (this.state.serverError) {\n            serverError = <div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div>;\n        }\n\n        let btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        let fileName;\n        if (this.state.fileName) {\n            fileName = this.state.fileName;\n        } else {\n            fileName = (\n                <FormattedMessage\n                    id='admin.file_upload.noFile'\n                    defaultMessage='No file uploaded'\n                />\n            );\n        }\n\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='file__upload'>\n                        <button\n                            className='btn btn-default'\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.file_upload.chooseFile'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            disabled={this.props.disabled}\n                            accept={this.props.fileType}\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        ref='upload_button'\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.uploadingText}`}\n                    >\n                        <FormattedMessage\n                            id='admin.file_upload.uploadFile'\n                            defaultMessage='Upload'\n                        />\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    {serverError}\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport Setting from './setting';\n\nexport default class RemoveFileSetting extends Setting {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            label: PropTypes.node.isRequired,\n            helpText: PropTypes.node,\n            removeButtonText: PropTypes.node.isRequired,\n            removingText: PropTypes.node,\n            fileName: PropTypes.string.isRequired,\n            onSubmit: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n        };\n    }\n\n    handleRemove = (e) => {\n        e.preventDefault();\n\n        $(this.refs.remove_button).button('loading');\n        this.props.onSubmit(this.props.id, () => {\n            $(this.refs.remove_button).button('reset');\n        });\n    }\n\n    render() {\n        return (\n            <Setting\n                label={this.props.label}\n                helpText={this.props.helpText}\n                inputId={this.props.id}\n            >\n                <div>\n                    <div className='help-text remove-filename'>\n                        {this.props.fileName}\n                    </div>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        ref='remove_button'\n                        disabled={this.props.disabled}\n                        data-loading-text={`<span class='glyphicon glyphicon-refresh glyphicon-refresh-animate'></span> ${this.props.removingText}`}\n                    >\n                        {this.props.removeButtonText}\n                    </button>\n                </div>\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport marked from 'marked';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage, {CustomRenderer} from 'components/formatted_markdown_message';\n\nexport default class SchemaText extends React.PureComponent {\n    static propTypes = {\n        isMarkdown: PropTypes.bool,\n        isTranslated: PropTypes.bool,\n        text: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.object,\n        ]).isRequired,\n        textDefault: PropTypes.string,\n        textValues: PropTypes.object,\n    };\n\n    static defaultProps = {\n        isTranslated: true,\n    };\n\n    renderTranslated = () => {\n        const {\n            isMarkdown,\n            text,\n            textDefault,\n            textValues,\n        } = this.props;\n\n        if (typeof text === 'object') {\n            return text;\n        }\n\n        if (isMarkdown) {\n            return (\n                <FormattedMarkdownMessage\n                    id={text}\n                    defaultMessage={textDefault}\n                    values={textValues}\n                />\n            );\n        }\n\n        return (\n            <FormattedMessage\n                id={text}\n                values={textValues}\n                defaultMessage={textDefault}\n            />\n        );\n    };\n\n    renderUntranslated = () => {\n        if (this.props.isMarkdown) {\n            const html = marked(this.props.text, {\n                breaks: true,\n                sanitize: true,\n                renderer: new CustomRenderer(),\n            });\n\n            return <span dangerouslySetInnerHTML={{__html: html}}/>;\n        }\n\n        return <span>{this.props.text}</span>;\n    };\n\n    render() {\n        return this.props.isTranslated ? this.renderTranslated() : this.renderUntranslated();\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\nimport {Link} from 'react-router-dom';\n\nimport * as I18n from 'i18n/i18n.jsx';\n\nimport Constants from 'utils/constants';\nimport {rolesFromMapping, mappingValueFromRoles} from 'utils/policy_roles_adapter';\nimport * as Utils from 'utils/utils.jsx';\nimport RequestButton from 'components/admin_console/request_button/request_button';\nimport BooleanSetting from 'components/admin_console/boolean_setting';\nimport TextSetting from 'components/admin_console/text_setting';\nimport DropdownSetting from 'components/admin_console/dropdown_setting.jsx';\nimport MultiSelectSetting from 'components/admin_console/multiselect_settings.jsx';\nimport RadioSetting from 'components/admin_console/radio_setting';\nimport ColorSetting from 'components/admin_console/color_setting';\nimport GeneratedSetting from 'components/admin_console/generated_setting';\nimport UserAutocompleteSetting from 'components/admin_console/user_autocomplete_setting';\nimport SettingsGroup from 'components/admin_console/settings_group.jsx';\nimport JobsTable from 'components/admin_console/jobs';\nimport FileUploadSetting from 'components/admin_console/file_upload_setting.jsx';\nimport RemoveFileSetting from 'components/admin_console/remove_file_setting.jsx';\nimport SchemaText from 'components/admin_console/schema_text';\nimport SaveButton from 'components/save_button';\nimport FormError from 'components/form_error';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport AdminHeader from 'components/widgets/admin_console/admin_header';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nimport Setting from './setting';\n\nexport default class SchemaAdminSettings extends React.Component {\n    static propTypes = {\n        config: PropTypes.object,\n        environmentConfig: PropTypes.object,\n        setNavigationBlocked: PropTypes.func,\n        schema: PropTypes.object,\n        roles: PropTypes.object,\n        license: PropTypes.object,\n        editRole: PropTypes.func,\n        updateConfig: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.isPlugin = false;\n\n        this.saveActions = [];\n\n        this.buildSettingFunctions = {\n            [Constants.SettingsTypes.TYPE_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_LONG_TEXT]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_NUMBER]: this.buildTextSetting,\n            [Constants.SettingsTypes.TYPE_COLOR]: this.buildColorSetting,\n            [Constants.SettingsTypes.TYPE_BOOL]: this.buildBoolSetting,\n            [Constants.SettingsTypes.TYPE_PERMISSION]: this.buildPermissionSetting,\n            [Constants.SettingsTypes.TYPE_DROPDOWN]: this.buildDropdownSetting,\n            [Constants.SettingsTypes.TYPE_RADIO]: this.buildRadioSetting,\n            [Constants.SettingsTypes.TYPE_BANNER]: this.buildBannerSetting,\n            [Constants.SettingsTypes.TYPE_GENERATED]: this.buildGeneratedSetting,\n            [Constants.SettingsTypes.TYPE_USERNAME]: this.buildUsernameSetting,\n            [Constants.SettingsTypes.TYPE_BUTTON]: this.buildButtonSetting,\n            [Constants.SettingsTypes.TYPE_LANGUAGE]: this.buildLanguageSetting,\n            [Constants.SettingsTypes.TYPE_JOBSTABLE]: this.buildJobsTableSetting,\n            [Constants.SettingsTypes.TYPE_FILE_UPLOAD]: this.buildFileUploadSetting,\n            [Constants.SettingsTypes.TYPE_CUSTOM]: this.buildCustomSetting,\n        };\n        this.state = {\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n            customComponentWrapperClass: '',\n            confirmNeededId: '',\n            showConfirmId: '',\n            clientWarning: '',\n        };\n    }\n\n    static getDerivedStateFromProps(props, state) {\n        if (props.schema && props.schema.id !== state.prevSchemaId) {\n            return {\n                prevSchemaId: props.schema.id,\n                saveNeeded: false,\n                saving: false,\n                serverError: null,\n                errorTooltip: false,\n                ...SchemaAdminSettings.getStateFromConfig(props.config, props.schema, props.roles),\n            };\n        }\n        return null;\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        if (this.state.confirmNeededId) {\n            this.setState({\n                showConfirmId: this.state.confirmNeededId,\n            });\n            return;\n        }\n\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'permissions') {\n            const settings = (this.props.schema && this.props.schema.settings) || [];\n            const rolesBinding = settings.reduce((acc, val) => {\n                if (val.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    acc[val.permissions_mapping_name] = this.state[val.key].toString();\n                }\n                return acc;\n            }, {});\n            const updatedRoles = rolesFromMapping(rolesBinding, this.props.roles);\n\n            let success = true;\n\n            await Promise.all(Object.values(updatedRoles).map(async (item) => {\n                try {\n                    await this.props.editRole(item);\n                } catch (err) {\n                    success = false;\n                    this.setState({\n                        saving: false,\n                        serverError: err.message,\n                    });\n                }\n            }));\n\n            if (!success) {\n                return;\n            }\n        }\n\n        if (this.state.saveNeeded === 'both' || this.state.saveNeeded === 'config') {\n            this.doSubmit(SchemaAdminSettings.getStateFromConfig);\n        } else {\n            this.setState({\n                saving: false,\n                saveNeeded: false,\n                serverError: null,\n            });\n            this.props.setNavigationBlocked(false);\n        }\n    }\n\n    getConfigFromState(config) {\n        const schema = this.props.schema;\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    this.setConfigValue(config, setting.key, null);\n                    return;\n                }\n\n                let value = this.getSettingValue(setting);\n                const previousValue = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigSave) {\n                    value = setting.onConfigSave(value, previousValue);\n                }\n\n                this.setConfigValue(config, setting.key, value);\n            });\n\n            if (schema.onConfigSave) {\n                return schema.onConfigSave(config, this.props.config);\n            }\n        }\n\n        return config;\n    }\n\n    static getStateFromConfig(config, schema, roles) {\n        let state = {};\n\n        if (schema) {\n            const settings = schema.settings || [];\n            settings.forEach((setting) => {\n                if (!setting.key) {\n                    return;\n                }\n\n                if (setting.type === Constants.SettingsTypes.TYPE_PERMISSION) {\n                    try {\n                        state[setting.key] = mappingValueFromRoles(setting.permissions_mapping_name, roles) === 'true';\n                    } catch (e) {\n                        state[setting.key] = false;\n                    }\n                    return;\n                }\n\n                let value = SchemaAdminSettings.getConfigValue(config, setting.key);\n\n                if (setting.onConfigLoad) {\n                    value = setting.onConfigLoad(value, config);\n                }\n\n                state[setting.key] = value == null ? setting.default : value;\n            });\n\n            if (schema.onConfigLoad) {\n                state = {...state, ...schema.onConfigLoad(config)};\n            }\n        }\n\n        return state;\n    }\n\n    getSetting(key) {\n        for (const setting of this.props.schema.settings) {\n            if (setting.key === key) {\n                return setting;\n            }\n        }\n\n        return null;\n    }\n\n    getSettingValue(setting) {\n        // Force boolean values to false when disabled.\n        if (setting.type === Constants.SettingsTypes.TYPE_BOOL) {\n            if (this.isDisabled(setting)) {\n                return false;\n            }\n        }\n        if (setting.type === Constants.SettingsTypes.TYPE_TEXT && setting.dynamic_value) {\n            return setting.dynamic_value(this.state[setting.key], this.props.config, this.state, this.props.license);\n        }\n\n        return this.state[setting.key];\n    }\n\n    renderTitle = () => {\n        if (!this.props.schema) {\n            return '';\n        }\n        if (this.props.schema.translate === false) {\n            return (\n                <AdminHeader>\n                    {this.props.schema.name || this.props.schema.id}\n                </AdminHeader>\n            );\n        }\n        return (\n            <FormattedAdminHeader\n                id={this.props.schema.name || this.props.schema.id}\n                defaultMessage={this.props.schema.name_default || this.props.schema.id}\n            />\n        );\n    };\n\n    renderBanner = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (setting.label.translate === false) {\n            return <span>{setting.label}</span>;\n        }\n\n        if (typeof setting.label === 'string') {\n            if (setting.label_markdown) {\n                return (\n                    <FormattedMarkdownMessage\n                        id={setting.label}\n                        values={setting.label_values}\n                        defaultMessage={setting.label_default}\n                    />\n                );\n            }\n            return (\n                <FormattedMessage\n                    id={setting.label}\n                    defaultMessage={setting.label_default}\n                    values={setting.label_values}\n                />\n            );\n        }\n        return setting.label;\n    }\n\n    renderHelpText = (setting) => {\n        if (!this.props.schema) {\n            return <span>{''}</span>;\n        }\n\n        if (!setting.help_text) {\n            return null;\n        }\n\n        let helpText;\n        let isMarkdown;\n        let helpTextValues;\n        let helpTextDefault;\n        if (setting.disabled_help_text && this.isDisabled(setting)) {\n            helpText = setting.disabled_help_text;\n            isMarkdown = setting.disabled_help_text_markdown;\n            helpTextValues = setting.disabled_help_text_values;\n            helpTextDefault = setting.disabled_help_text_default;\n        } else {\n            helpText = setting.help_text;\n            isMarkdown = setting.help_text_markdown;\n            helpTextValues = setting.help_text_values;\n            helpTextDefault = setting.help_text_default;\n        }\n\n        return (\n            <SchemaText\n                isMarkdown={isMarkdown}\n                isTranslated={setting.translate}\n                text={helpText}\n                textDefault={helpTextDefault}\n                textValues={helpTextValues}\n            />\n        );\n    }\n\n    renderLabel = (setting) => {\n        if (!this.props.schema) {\n            return '';\n        }\n\n        if (setting.translate === false) {\n            return setting.label;\n        }\n        return Utils.localizeMessage(setting.label, setting.label_default);\n    }\n\n    isDisabled = (setting) => {\n        if (typeof setting.isDisabled === 'function') {\n            return setting.isDisabled(this.props.config, this.state, this.props.license);\n        }\n        return Boolean(setting.isDisabled);\n    }\n\n    isHidden = (setting) => {\n        if (typeof setting.isHidden === 'function') {\n            return setting.isHidden(this.props.config, this.state, this.props.license);\n        }\n        return Boolean(setting.isHidden);\n    }\n\n    buildButtonSetting = (setting) => {\n        const handleRequestAction = (success, error) => {\n            const successCallback = (data) => {\n                const metadata = new Map(Object.entries(data));\n                const settings = (this.props.schema && this.props.schema.settings) || [];\n                settings.forEach((tsetting) => {\n                    if (tsetting.key && tsetting.setFromMetadataField) {\n                        const inputData = metadata.get(tsetting.setFromMetadataField);\n\n                        if (tsetting.type === Constants.SettingsTypes.TYPE_TEXT) {\n                            this.setState({[tsetting.key]: inputData, [`${tsetting.key}Error`]: null});\n                        } else if (tsetting.type === Constants.SettingsTypes.TYPE_FILE_UPLOAD) {\n                            if (this.buildSettingFunctions[tsetting.type] && this.buildSettingFunctions[tsetting.type](tsetting).props.onSetData) {\n                                this.buildSettingFunctions[tsetting.type](tsetting).props.onSetData(tsetting.key, inputData);\n                            }\n                        }\n                    }\n                });\n\n                if (success && typeof success === 'function') {\n                    success();\n                }\n            };\n\n            var sourceUrlKey = 'ServiceSettings.SiteURL';\n            if (setting.sourceUrlKey) {\n                sourceUrlKey = setting.sourceUrlKey;\n            }\n            setting.action(successCallback, error, this.state[sourceUrlKey]);\n        };\n\n        return (\n            <RequestButton\n                id={setting.key}\n                key={this.props.schema.id + '_text_' + setting.key}\n                requestAction={handleRequestAction}\n                helpText={this.renderHelpText(setting)}\n                loadingText={Utils.localizeMessage(setting.loading, setting.loading_default)}\n                buttonText={<span>{this.renderLabel(setting)}</span>}\n                showSuccessMessage={Boolean(setting.success_message)}\n                includeDetailedError={true}\n                disabled={this.isDisabled(setting)}\n                errorMessage={{\n                    id: setting.error_message,\n                    defaultMessage: setting.error_message_default,\n                }}\n                successMessage={setting.success_message && {\n                    id: setting.success_message,\n                    defaultMessage: setting.success_message_default,\n                }}\n            />\n        );\n    }\n\n    buildTextSetting = (setting) => {\n        let inputType = 'input';\n        if (setting.type === Constants.SettingsTypes.TYPE_NUMBER) {\n            inputType = 'number';\n        } else if (setting.type === Constants.SettingsTypes.TYPE_LONG_TEXT) {\n            inputType = 'textarea';\n        }\n\n        let value = this.state[setting.key] || '';\n        if (setting.dynamic_value) {\n            value = setting.dynamic_value(value, this.props.config, this.state, this.props.license);\n        }\n\n        return (\n            <TextSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                type={inputType}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n                maxLength={setting.max_length}\n            />\n        );\n    }\n\n    buildColorSetting = (setting) => {\n        return (\n            <ColorSetting\n                key={this.props.schema.id + '_text_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBoolSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={(!this.isDisabled(setting) && this.state[setting.key]) || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildPermissionSetting = (setting) => {\n        return (\n            <BooleanSetting\n                key={this.props.schema.id + '_bool_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={(!this.isDisabled(setting) && this.state[setting.key]) || false}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handlePermissionChange}\n            />\n        );\n    }\n\n    buildDropdownSetting = (setting) => {\n        const enterpriseReady = this.props.config.BuildEnterpriseReady === 'true';\n        const options = [];\n        setting.options.forEach((option) => {\n            if (!option.isHidden || !option.isHidden(this.props.config, this.state, this.props.license, enterpriseReady)) {\n                options.push(option);\n            }\n        });\n\n        const values = options.map((o) => ({value: o.value, text: Utils.localizeMessage(o.display_name, o.display_name_default)}));\n        const selectedValue = this.state[setting.key] || values[0].value;\n\n        let selectedOptionForHelpText = null;\n        for (const option of options) {\n            if (option.help_text && option.value === selectedValue) {\n                selectedOptionForHelpText = option;\n                break;\n            }\n        }\n\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_dropdown_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(selectedOptionForHelpText || setting)}\n                value={selectedValue}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildLanguageSetting = (setting) => {\n        const locales = I18n.getAllLanguages();\n        const values = Object.keys(locales).map((l) => {\n            return {value: locales[l].value, text: locales[l].name, order: locales[l].order};\n        }).sort((a, b) => a.order - b.order);\n\n        if (setting.multiple) {\n            const noResultText = (\n                <FormattedMessage\n                    id={setting.no_result}\n                    defaultMessage={setting.no_result_default}\n                />\n            );\n            const notPresent = (\n                <FormattedMessage\n                    id={setting.not_present}\n                    defaultMessage={setting.not_present_default}\n                />\n            );\n            return (\n                <MultiSelectSetting\n                    key={this.props.schema.id + '_language_' + setting.key}\n                    id={setting.key}\n                    label={this.renderLabel(setting)}\n                    values={values}\n                    helpText={this.renderHelpText(setting)}\n                    selected={(this.state[setting.key] && this.state[setting.key].split(',')) || []}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                    onChange={(changedId, value) => this.handleChange(changedId, value.join(','))}\n                    noResultText={noResultText}\n                    notPresent={notPresent}\n                />\n            );\n        }\n        return (\n            <DropdownSetting\n                key={this.props.schema.id + '_language_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                values={values}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0].value}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildRadioSetting = (setting) => {\n        const options = setting.options || [];\n        const values = options.map((o) => ({value: o.value, text: o.display_name}));\n\n        return (\n            <RadioSetting\n                key={this.props.schema.id + '_radio_' + setting.key}\n                id={setting.key}\n                values={values}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key] || values[0]}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildBannerSetting = (setting) => {\n        if (this.isDisabled(setting)) {\n            return null;\n        }\n        return (\n            <div\n                className={'banner ' + setting.banner_type}\n                key={this.props.schema.id + '_bool_' + setting.key}\n            >\n                <div className='banner__content'>\n                    <span>\n                        { setting.banner_type === 'warning' ? <WarningIcon additionalClassName='banner__icon'/> : null}\n                        {this.renderBanner(setting)}\n                    </span>\n                </div>\n            </div>\n        );\n    }\n\n    buildGeneratedSetting = (setting) => {\n        return (\n            <GeneratedSetting\n                key={this.props.schema.id + '_generated_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                regenerateHelpText={setting.regenerate_help_text}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default)}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleGeneratedChange}\n            />\n        );\n    }\n\n    handleGeneratedChange = (id, s) => {\n        this.handleChange(id, s.replace('+', '-').replace('/', '_'));\n    }\n\n    handleChange = (id, value, confirm = false, doSubmit = false, warning = false) => {\n        const saveNeeded = this.state.saveNeeded === 'permissions' ? 'both' : 'config';\n        const clientWarning = warning === false ? this.state.clientWarning : warning;\n\n        let confirmNeededId = confirm ? id : this.state.confirmNeededId;\n        if (id === this.state.confirmNeededId && !confirm) {\n            confirmNeededId = '';\n        }\n\n        this.setState({\n            saveNeeded,\n            confirmNeededId,\n            clientWarning,\n            [id]: value,\n        });\n\n        if (doSubmit) {\n            this.doSubmit(SchemaAdminSettings.getStateFromConfig);\n        }\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    handlePermissionChange = (id, value) => {\n        let saveNeeded = 'permissions';\n        if (this.state.saveNeeded === 'config') {\n            saveNeeded = 'both';\n        }\n        this.setState({\n            saveNeeded,\n            [id]: value,\n        });\n\n        this.props.setNavigationBlocked(true);\n    }\n\n    buildUsernameSetting = (setting) => {\n        return (\n            <UserAutocompleteSetting\n                key={this.props.schema.id + '_userautocomplete_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                placeholder={Utils.localizeMessage(setting.placeholder, setting.placeholder_default) || Utils.localizeMessage('search_bar.search', 'Search')}\n                value={this.state[setting.key] || ''}\n                disabled={this.isDisabled(setting)}\n                onChange={this.handleChange}\n            />\n        );\n    }\n\n    buildJobsTableSetting = (setting) => {\n        return (\n            <JobsTable\n                key={this.props.schema.id + '_jobstable_' + setting.key}\n                jobType={setting.job_type}\n                getExtraInfoText={setting.render_job}\n                disabled={this.isDisabled(setting)}\n                createJobButtonText={\n                    <FormattedMessage\n                        id={setting.label}\n                        defaultMessage={setting.label_default}\n                    />\n                }\n                createJobHelpText={\n                    <FormattedMarkdownMessage\n                        id={setting.help_text}\n                        defaultMessage={setting.help_text_default}\n                    />\n                }\n            />\n        );\n    }\n\n    buildFileUploadSetting = (setting) => {\n        const setData = (id, data) => {\n            const successCallback = (filename) => {\n                this.handleChange(id, filename);\n                this.setState({[setting.key]: filename, [`${setting.key}Error`]: null});\n            };\n            const errorCallback = (error) => {\n                this.setState({[setting.key]: null, [`${setting.key}Error`]: error.message});\n            };\n            setting.set_action(successCallback, errorCallback, data);\n        };\n\n        if (this.state[setting.key]) {\n            const removeFile = (id, callback) => {\n                const successCallback = () => {\n                    this.handleChange(setting.key, '');\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: null});\n                };\n                const errorCallback = (error) => {\n                    callback();\n                    this.setState({[setting.key]: null, [`${setting.key}Error`]: error.message});\n                };\n                setting.remove_action(successCallback, errorCallback);\n            };\n            return (\n                <RemoveFileSetting\n                    id={this.props.schema.id}\n                    key={this.props.schema.id + '_fileupload_' + setting.key}\n                    label={this.renderLabel(setting)}\n                    helpText={\n                        <FormattedMessage\n                            id={setting.remove_help_text}\n                            defaultMessage={setting.remove_help_text_default}\n                        />\n                    }\n                    removeButtonText={Utils.localizeMessage(setting.remove_button_text, setting.remove_button_text_default)}\n                    removingText={Utils.localizeMessage(setting.removing_text, setting.removing_text_default)}\n                    fileName={this.state[setting.key]}\n                    onSubmit={removeFile}\n                    onSetData={setData}\n                    disabled={this.isDisabled(setting)}\n                    setByEnv={this.isSetByEnv(setting.key)}\n                />\n            );\n        }\n        const uploadFile = (id, file, callback) => {\n            const successCallback = (filename) => {\n                this.handleChange(id, filename);\n                this.setState({[setting.key]: filename, [`${setting.key}Error`]: null});\n                if (callback && typeof callback === 'function') {\n                    callback();\n                }\n            };\n            const errorCallback = (error) => {\n                if (callback && typeof callback === 'function') {\n                    callback(error.message);\n                }\n            };\n            setting.upload_action(file, successCallback, errorCallback);\n        };\n\n        return (\n            <FileUploadSetting\n                id={setting.key}\n                key={this.props.schema.id + '_fileupload_' + setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                uploadingText={Utils.localizeMessage(setting.uploading_text, setting.uploading_text_default)}\n                disabled={this.isDisabled(setting)}\n                fileType={setting.fileType}\n                onSubmit={uploadFile}\n                onSetData={setData}\n                error={this.state.idpCertificateFileError}\n                setByEnv={this.isSetByEnv(setting.key)}\n            />\n        );\n    }\n\n    buildCustomSetting = (setting) => {\n        const CustomComponent = setting.component;\n\n        const componentInstance = (\n            <CustomComponent\n                key={this.props.schema.id + '_custom_' + setting.key}\n                id={setting.key}\n                label={this.renderLabel(setting)}\n                helpText={this.renderHelpText(setting)}\n                value={this.state[setting.key]}\n                disabled={this.isDisabled(setting)}\n                config={this.props.config}\n                license={this.props.license}\n                setByEnv={this.isSetByEnv(setting.key)}\n                onChange={this.handleChange}\n                registerSaveAction={this.registerSaveAction}\n                setSaveNeeded={this.setSaveNeeded}\n                unRegisterSaveAction={this.unRegisterSaveAction}\n                cancelSubmit={this.cancelSubmit}\n                showConfirm={this.state.showConfirmId === setting.key}\n            />);\n\n        // Show the plugin custom setting title\n        // consistently as other settings with the Setting component\n        if (setting.showTitle) {\n            return (\n                <Setting\n                    label={setting.label}\n                    inputId={setting.key}\n                    helpText={setting.helpText}\n                >\n                    {componentInstance}\n                </Setting>\n            );\n        }\n        return componentInstance;\n    }\n\n    unRegisterSaveAction = (saveAction) => {\n        const indexOfSaveAction = this.saveActions.indexOf(saveAction);\n        this.saveActions.splice(indexOfSaveAction, 1);\n    }\n\n    registerSaveAction = (saveAction) => {\n        this.saveActions.push(saveAction);\n    }\n\n    setSaveNeeded = () => {\n        this.setState({saveNeeded: 'config'});\n        this.props.setNavigationBlocked(true);\n    }\n\n    renderSettings = () => {\n        const schema = this.props.schema;\n\n        const settingsList = [];\n        if (schema.settings) {\n            schema.settings.forEach((setting) => {\n                if (this.buildSettingFunctions[setting.type] && !this.isHidden(setting)) {\n                    settingsList.push(this.buildSettingFunctions[setting.type](setting));\n                }\n            });\n        }\n\n        let header;\n        if (schema.header) {\n            header = (\n                <div className='banner'>\n                    <SchemaText\n                        text={schema.header}\n                        isMarkdown={true}\n                        isTranslated={this.props.schema.translate}\n                    />\n                </div>\n            );\n        }\n\n        let footer;\n        if (schema.footer) {\n            footer = (\n                <div className='banner'>\n                    <SchemaText\n                        text={schema.footer}\n                        isMarkdown={true}\n                        isTranslated={this.props.schema.translate}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <SettingsGroup container={false}>\n                {header}\n                {settingsList}\n                {footer}\n            </SettingsGroup>\n        );\n    }\n\n    closeTooltip = () => {\n        this.setState({errorTooltip: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('.control-label');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({errorTooltip: isElipsis});\n    }\n\n    doSubmit = async (getStateFromConfig) => {\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        const {error} = await this.props.updateConfig(config);\n        if (error) {\n            this.setState({\n                serverError: error.message,\n                serverErrorId: error.id,\n            });\n        } else {\n            this.setState(getStateFromConfig(config));\n        }\n\n        if (this.handleSaved) {\n            this.handleSaved(config);\n        }\n\n        const results = [];\n        for (const saveAction of this.saveActions) {\n            results.push(saveAction());\n        }\n\n        const hasSaveActionError = await Promise.all(results).then((values) => values.some(((value) => value.error && value.error.message)));\n\n        const hasError = this.state.serverError || hasSaveActionError;\n        if (hasError) {\n            this.setState({saving: false});\n        } else {\n            this.setState({saving: false, saveNeeded: false, confirmNeededId: '', showConfirmId: '', clientWarning: ''});\n            this.props.setNavigationBlocked(false);\n        }\n    };\n\n    cancelSubmit = () => {\n        this.setState({\n            showConfirmId: '',\n        });\n    };\n\n    // Some path parts may contain periods (e.g. plugin ids), but path walking the configuration\n    // relies on splitting by periods. Use this pair of functions to allow such path parts.\n    //\n    // It is assumed that no path contains the symbol '+'.\n    static escapePathPart(pathPart) {\n        return pathPart.replace(/\\./g, '+');\n    }\n\n    static unescapePathPart(pathPart) {\n        return pathPart.replace(/\\+/g, '.');\n    }\n\n    static getConfigValue(config, path) {\n        const pathParts = path.split('.');\n\n        return pathParts.reduce((obj, pathPart) => {\n            if (!obj) {\n                return null;\n            }\n\n            return obj[SchemaAdminSettings.unescapePathPart(pathPart)];\n        }, config);\n    }\n\n    setConfigValue(config, path, value) {\n        function setValue(obj, pathParts) {\n            const part = SchemaAdminSettings.unescapePathPart(pathParts[0]);\n\n            if (pathParts.length === 1) {\n                obj[part] = value;\n            } else {\n                if (obj[part] == null) {\n                    obj[part] = {};\n                }\n\n                setValue(obj[part], pathParts.slice(1));\n            }\n        }\n\n        setValue(config, path.split('.'));\n    }\n\n    isSetByEnv = (path) => {\n        return Boolean(SchemaAdminSettings.getConfigValue(this.props.environmentConfig, path));\n    };\n\n    hybridSchemaAndComponent = () => {\n        const schema = this.props.schema;\n        if (schema && schema.component && schema.settings) {\n            const CustomComponent = schema.component;\n            return (\n                <CustomComponent {...this.props}/>\n            );\n        }\n        return null;\n    }\n\n    render = () => {\n        const schema = this.props.schema;\n        if (schema && schema.component && !schema.settings) {\n            const CustomComponent = schema.component;\n            return (\n                <CustomComponent {...this.props}/>\n            );\n        }\n\n        if (!schema) {\n            return (\n                <div className={'wrapper--fixed'}>\n                    <AdminHeader>\n                        <FormattedMessage\n                            id='error.plugin_not_found.title'\n                            defaultMessage='Plugin not found'\n                        />\n                    </AdminHeader>\n                    <div className='admin-console__wrapper'>\n                        <div className='admin-console__content'>\n                            <p>\n                                <FormattedMessage\n                                    id='error.plugin_not_found.desc'\n                                    defaultMessage='The plugin you are looking for does not exist.'\n                                />\n                            </p>\n                            <Link\n                                to={'plugin_management'}\n                            >\n                                <FormattedMessage\n                                    id='admin.plugin.backToPlugins'\n                                    defaultMessage='Go back to the Plugins'\n                                />\n                            </Link>\n                        </div>\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className={'wrapper--fixed ' + this.state.customComponentWrapperClass}>\n                {this.renderTitle()}\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <form\n                            className='form-horizontal'\n                            role='form'\n                            onSubmit={this.handleSubmit}\n                        >\n                            {this.renderSettings()}\n                        </form>\n                        {this.hybridSchemaAndComponent()}\n                    </div>\n                </div>\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={Utils.localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <div\n                        className='error-message'\n                        ref='errorMessage'\n                        onMouseOver={this.openTooltip}\n                        onMouseOut={this.closeTooltip}\n                    >\n                        <FormError\n                            iconClassName='fa-exclamation-triangle'\n                            textClassName='has-warning'\n                            error={this.state.clientWarning}\n                        />\n\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                    <Overlay\n                        show={this.state.errorTooltip}\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        target={this.refs.errorMessage}\n                    >\n                        <Tooltip id='error-tooltip' >\n                            {this.state.serverError}\n                        </Tooltip>\n                    </Overlay>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings.jsx';\n\n// No changes required to the base SchemaAdminSettings, except to inject custom props.\nconst CustomPluginSettings = SchemaAdminSettings;\n\nexport default CustomPluginSettings;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {Constants} from '../../../utils/constants';\nimport {t} from '../../../utils/i18n';\nimport SchemaAdminSettings from '../schema_admin_settings';\n\nexport default function getEnablePluginSetting(plugin) {\n    const escapedPluginId = SchemaAdminSettings.escapePathPart(plugin.id);\n    const pluginEnabledConfigKey = 'PluginSettings.PluginStates.' + escapedPluginId + '.Enable';\n\n    return {\n        type: Constants.SettingsTypes.TYPE_BOOL,\n        key: pluginEnabledConfigKey,\n        label: t('admin.plugin.enable_plugin'),\n        label_default: 'Enable Plugin: ',\n        help_text: t('admin.plugin.enable_plugin.help'),\n        help_text_default: 'When true, this plugin is enabled.',\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {createSelector} from 'reselect';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\n\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport {getAdminConsoleCustomComponents} from 'selectors/admin_console';\nimport SchemaAdminSettings from '../schema_admin_settings';\nimport {it} from '../admin_definition';\n\nimport CustomPluginSettings from './custom_plugin_settings.jsx';\nimport getEnablePluginSetting from './enable_plugin_setting';\n\nfunction makeGetPluginSchema() {\n    return createSelector(\n        (state, pluginId) => state.entities.admin.plugins[pluginId],\n        (state, pluginId) => getAdminConsoleCustomComponents(state, pluginId),\n        (plugin, customComponents) => {\n            if (!plugin) {\n                return null;\n            }\n\n            const escapedPluginId = SchemaAdminSettings.escapePathPart(plugin.id);\n            const pluginEnabledConfigKey = 'PluginSettings.PluginStates.' + escapedPluginId + '.Enable';\n\n            let settings = [];\n            if (plugin.settings_schema && plugin.settings_schema.settings) {\n                settings = plugin.settings_schema.settings.map((setting) => {\n                    const key = setting.key.toLowerCase();\n                    let component = null;\n                    let bannerType = '';\n                    let type = setting.type;\n                    let displayName = setting.display_name;\n                    let isDisabled = it.stateIsFalse(pluginEnabledConfigKey);\n\n                    if (customComponents[key]) {\n                        component = customComponents[key].component;\n                        type = Constants.SettingsTypes.TYPE_CUSTOM;\n                    } else if (setting.type === Constants.SettingsTypes.TYPE_CUSTOM) {\n                        // Show a warning banner to enable the plugin in order to display the custom component.\n                        type = Constants.SettingsTypes.TYPE_BANNER;\n                        displayName = localizeMessage('admin.plugin.customSetting.pluginDisabledWarning', 'In order to view this setting, enable the plugin and click Save.');\n                        bannerType = 'warning';\n                        isDisabled = it.stateIsTrue(pluginEnabledConfigKey);\n                    }\n\n                    return {\n                        ...setting,\n                        type,\n                        key: 'PluginSettings.Plugins.' + escapedPluginId + '.' + key,\n                        help_text_markdown: true,\n                        label: displayName,\n                        translate: Boolean(plugin.translate),\n                        isDisabled,\n                        banner_type: bannerType,\n                        component,\n                        showTitle: customComponents[key] ? customComponents[key].options.showTitle : false,\n                    };\n                });\n            }\n\n            settings.unshift(getEnablePluginSetting(plugin));\n\n            return {\n                ...plugin.settings_schema,\n                id: plugin.id,\n                name: plugin.name,\n                settings,\n                translate: Boolean(plugin.translate),\n            };\n        }\n    );\n}\n\nfunction makeMapStateToProps() {\n    const getPluginSchema = makeGetPluginSchema();\n\n    return (state, ownProps) => {\n        const pluginId = ownProps.match.params.plugin_id;\n\n        return {\n            schema: getPluginSchema(state, pluginId),\n            roles: getRoles(state),\n        };\n    };\n}\n\nexport default connect(makeMapStateToProps)(CustomPluginSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class ReloadIcon extends React.PureComponent {\n    render() {\n        return (\n            <FormattedMessage\n                id='generic_icons.reload'\n                defaultMessage='Reload Icon'\n            >\n                {(title) => (\n                    <i\n                        className='fa fa-refresh'\n                        title={title}\n                    />\n                )}\n            </FormattedMessage>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedMessage, FormattedTime} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport LoadingScreen from 'components/loading_screen';\nimport ReloadIcon from 'components/widgets/icons/fa_reload_icon';\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport {t} from 'utils/i18n.jsx';\n\nexport default class ComplianceReports extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set if compliance reports are licensed\n         */\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Set if compliance reports are enabled in the config\n         */\n        enabled: PropTypes.bool.isRequired,\n\n        /*\n         * Array of reports to render\n         */\n        reports: PropTypes.arrayOf(PropTypes.object).isRequired,\n        users: PropTypes.object.isRequired,\n\n        /*\n         * Error message to display\n         */\n        serverError: PropTypes.string,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get compliance reports\n             */\n            getComplianceReports: PropTypes.func.isRequired,\n\n            /*\n             * Function to save compliance reports\n             */\n            createComplianceReport: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingReports: true,\n        };\n\n        this.descInput = React.createRef();\n        this.emailsInput = React.createRef();\n        this.fromInput = React.createRef();\n        this.keywordsInput = React.createRef();\n        this.toInput = React.createRef();\n    }\n\n    componentDidMount() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return;\n        }\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingReports: true});\n\n        this.props.actions.getComplianceReports().then(\n            () => this.setState({loadingReports: false})\n        );\n    }\n\n    runReport = (e) => {\n        e.preventDefault();\n\n        this.setState({runningReport: true});\n\n        const job = {};\n        job.desc = this.descInput.current.value;\n        job.emails = this.emailsInput.current.value;\n        job.keywords = this.keywordsInput.current.value;\n        job.start_at = Date.parse(this.fromInput.current.value);\n        job.end_at = Date.parse(this.toInput.current.value);\n\n        this.props.actions.createComplianceReport(job).then(\n            ({data}) => {\n                if (data) {\n                    this.emailsInput.current.value = '';\n                    this.keywordsInput.current.value = '';\n                    this.descInput.current.value = '';\n                    this.fromInput.current.value = '';\n                    this.toInput.current.value = '';\n                }\n                this.setState({runningReport: false});\n                this.props.actions.getComplianceReports();\n            }\n        );\n    }\n\n    getDateTime(millis) {\n        const date = new Date(millis);\n        return (\n            <span style={style.date}>\n                <FormattedDate\n                    value={date}\n                    day='2-digit'\n                    month='short'\n                    year='numeric'\n                />\n                {' - '}\n                <FormattedTime\n                    value={date}\n                    hour='2-digit'\n                    minute='2-digit'\n                />\n            </span>\n        );\n    }\n\n    render() {\n        if (!this.props.isLicensed || !this.props.enabled) {\n            return <div/>;\n        }\n\n        let content = null;\n        if (this.state.loadingReports) {\n            content = <LoadingScreen/>;\n        } else {\n            var list = [];\n\n            for (var i = 0; i < this.props.reports.length; i++) {\n                const report = this.props.reports[i];\n\n                let params = '';\n                if (report.type === 'adhoc') {\n                    params = (\n                        <span>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />{' '}{this.getDateTime(report.start_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />{' '}{this.getDateTime(report.end_at)}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />{' '}{report.emails}\n                            <br/>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />{' '}{report.keywords}\n                        </span>);\n                }\n                let download = '';\n                let status = '';\n                if (report.status === 'finished') {\n                    download = (\n                        <a href={`${Client4.getBaseRoute()}/compliance/reports/${report.id}/download`}>\n                            <FormattedMessage\n                                id='admin.compliance_table.download'\n                                defaultMessage='Download'\n                            />\n                        </a>\n                    );\n\n                    status = (\n                        <span className='status-icon-success'>\n                            <FormattedMessage\n                                id='admin.compliance_table.success'\n                                defaultMessage='Success'\n                            />\n                        </span>\n                    );\n                } else if (report.status === 'running') {\n                    status = (\n                        <span className='status-icon-warning'>\n                            <FormattedMessage\n                                id='admin.compliance_table.pending'\n                                defaultMessage='Pending'\n                            />\n                        </span>\n                    );\n                } else if (report.status === 'failed') {\n                    status = (\n                        <span className='status-icon-error'>\n                            <FormattedMessage\n                                id='admin.compliance_table.failed'\n                                defaultMessage='Failed'\n                            />\n                        </span>\n                    );\n                }\n\n                let user = report.user_id;\n                const profile = this.props.users[report.user_id];\n                if (profile) {\n                    user = profile.email;\n                }\n\n                list[i] = (\n                    <tr key={report.id}>\n                        <td>{status}</td>\n                        <td style={style.dataCell}>{download}</td>\n                        <td>{this.getDateTime(report.create_at)}</td>\n                        <td>{report.count}</td>\n                        <td>{report.type}</td>\n                        <td style={style.dataCell}>{report.desc}</td>\n                        <td>{user}</td>\n                        <td style={style.dataCell}>{params}</td>\n                    </tr>\n                );\n            }\n\n            content = (\n                <div style={style.content}>\n                    <table className='table'>\n                        <thead>\n                            <tr>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.status'\n                                        defaultMessage='Status'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.files'\n                                        defaultMessage='Files'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.timestamp'\n                                        defaultMessage='Timestamp'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.records'\n                                        defaultMessage='Records'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.type'\n                                        defaultMessage='Type'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.desc'\n                                        defaultMessage='Description'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.userId'\n                                        defaultMessage='Requested By'\n                                    />\n                                </th>\n                                <th>\n                                    <FormattedMessage\n                                        id='admin.compliance_table.params'\n                                        defaultMessage='Params'\n                                    />\n                                </th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {list}\n                        </tbody>\n                    </table>\n                </div>\n            );\n        }\n\n        let serverError = '';\n        if (this.props.serverError) {\n            serverError = (\n                <div\n                    className='form-group has-error'\n                    style={style.serverError}\n                >\n                    <label className='control-label'>{this.props.serverError}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div className='panel compliance-panel'>\n                <h4>\n                    <FormattedMessage\n                        id='admin.compliance_reports.title'\n                        defaultMessage='Compliance Reports'\n                    />\n                </h4>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.desc'\n                                defaultMessage='Job Name:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='desc'\n                            ref={this.descInput}\n                            placeholder={{id: t('admin.compliance_reports.desc_placeholder'), defaultMessage: 'E.g. \"Audit 445 for HR\"'}}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.from'\n                                defaultMessage='From:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='from'\n                            ref={this.fromInput}\n                            placeholder={{id: t('admin.compliance_reports.from_placeholder'), defaultMessage: 'E.g. \"2016-03-11\"'}}\n                        />\n                    </div>\n                    <div className='col-sm-3 col-md-2 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.to'\n                                defaultMessage='To:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='to'\n                            ref={this.toInput}\n                            placeholder={{id: t('admin.compliance_reports.to_placeholder'), defaultMessage: 'E.g. \"2016-03-15\"'}}\n                        />\n                    </div>\n                </div>\n                <div className='row'>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.emails'\n                                defaultMessage='Emails:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='emails'\n                            ref={this.emailsInput}\n                            placeholder={{id: t('admin.compliance_reports.emails_placeholder'), defaultMessage: 'E.g. \"bill@example.com, bob@example.com\"'}}\n                        />\n                    </div>\n                    <div className='col-sm-6 col-md-4 form-group'>\n                        <label>\n                            <FormattedMessage\n                                id='admin.compliance_reports.keywords'\n                                defaultMessage='Keywords:'\n                            />\n                        </label>\n                        <LocalizedInput\n                            type='text'\n                            className='form-control'\n                            id='keywords'\n                            ref={this.keywordsInput}\n                            placeholder={{id: t('admin.compliance_reports.keywords_placeholder'), defaultMessage: 'E.g. \"shorting stock\"'}}\n                        />\n                    </div>\n                </div>\n                <div className='clearfix'>\n                    <button\n                        id='run-button'\n                        type='submit'\n                        className='btn btn-primary'\n                        onClick={this.runReport}\n                    >\n                        <FormattedMessage\n                            id='admin.compliance_reports.run'\n                            defaultMessage='Run Compliance Report'\n                        />\n                    </button>\n                </div>\n                {serverError}\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        disabled={this.state.runningReport}\n                        onClick={this.reload}\n                    >\n                        <ReloadIcon/>\n                        <FormattedMessage\n                            id='admin.compliance_reports.reload'\n                            defaultMessage='Reload Completed Compliance Reports'\n                        />\n                    </button>\n                </div>\n                <div className='compliance-panel__table'>\n                    {content}\n                </div>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    content: {margin: 10},\n    greenStatus: {color: 'green'},\n    redStatus: {color: 'red'},\n    dataCell: {whiteSpace: 'nowrap'},\n    date: {whiteSpace: 'nowrap'},\n    serverError: {marginTop: '10px'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {createComplianceReport, getComplianceReports} from 'mattermost-redux/actions/admin';\nimport {getComplianceReports as selectComplianceReports, getConfig} from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport ComplianceReports from './compliance_reports.jsx';\n\nconst getUsersForReports = createSelector(\n    (state) => state.entities.users.profiles,\n    (state) => state.entities.admin.complianceReports,\n    (users, reports) => {\n        const usersMap = {};\n        Object.values(reports).forEach((r) => {\n            const u = users[r.user_id];\n            if (u) {\n                usersMap[u.id] = u;\n            }\n        });\n        return usersMap;\n    }\n);\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.IsLicensed === 'true';\n\n    let enabled = false;\n    const config = getConfig(state);\n    if (config && config.ComplianceSettings) {\n        enabled = config.ComplianceSettings.Enable;\n    }\n\n    let serverError;\n    const error = state.requests.admin.createCompliance.error;\n    if (error) {\n        serverError = error.message;\n    }\n\n    const reports = Object.values(selectComplianceReports(state)).sort((a, b) => {\n        return b.create_at - a.create_at;\n    });\n\n    return {\n        isLicensed,\n        enabled,\n        reports,\n        serverError,\n        users: getUsersForReports(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getComplianceReports,\n            createComplianceReport,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ComplianceReports);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ComplianceReports from 'components/admin_console/compliance_reports';\nimport AuditTable from 'components/audit_table';\nimport LoadingScreen from 'components/loading_screen';\n\nimport ReloadIcon from 'components/widgets/icons/fa_reload_icon';\n\nexport default class Audits extends React.PureComponent {\n    static propTypes = {\n        isLicensed: PropTypes.bool.isRequired,\n\n        /*\n         * Array of audits to render\n         */\n        audits: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch audits\n             */\n            getAudits: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loadingAudits: true,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    reload = () => {\n        this.setState({loadingAudits: true});\n        this.props.actions.getAudits().then(\n            () => this.setState({loadingAudits: false})\n        );\n    }\n\n    activityLogHeader = () => {\n        const h4Style = {\n            display: 'inline-block',\n            marginBottom: '6px',\n        };\n        const divStyle = {\n            clear: 'both',\n        };\n        return (\n            <div style={divStyle}>\n                <h4 style={h4Style}>\n                    <FormattedMessage\n                        id='admin.complianceMonitoring.userActivityLogsTitle'\n                        defaultMessage='User Activity Logs'\n                    />\n                </h4>\n                <button\n                    type='submit'\n                    className='btn btn-link pull-right'\n                    onClick={this.reload}\n                >\n                    <ReloadIcon/>\n                    <FormattedMessage\n                        id='admin.audits.reload'\n                        defaultMessage='Reload User Activity Logs'\n                    />\n                </button>\n            </div>\n        );\n    }\n\n    renderComplianceReports = () => {\n        if (!this.props.isLicensed) {\n            return <div/>;\n        }\n        return (\n            <ComplianceReports/>\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (this.state.loadingAudits) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <div>\n                    <AuditTable\n                        audits={this.props.audits}\n                        showUserId={true}\n                        showIp={true}\n                        showSession={true}\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                {this.renderComplianceReports()}\n                <div className='panel compliance-panel'>\n                    {this.activityLogHeader()}\n                    <div className='compliance-panel__table'>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getAudits} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport Audits from './audits.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const isLicensed = license.Compliance === 'true';\n\n    return {\n        isLicensed,\n        audits: Object.values(Selectors.getAudits(state)),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getAudits,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Audits);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport * as Utils from 'utils/utils';\nimport {t} from 'utils/i18n.jsx';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport Setting from './setting';\n\nexport default class CustomUrlSchemesSetting extends React.Component {\n    static get propTypes() {\n        return {\n            id: PropTypes.string.isRequired,\n            value: PropTypes.array.isRequired,\n            onChange: PropTypes.func.isRequired,\n            disabled: PropTypes.bool,\n            setByEnv: PropTypes.bool.isRequired,\n        };\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            value: this.arrayToString(props.value),\n        };\n    }\n\n    stringToArray = (str) => {\n        return str.split(',').map((s) => s.trim()).filter(Boolean);\n    };\n\n    arrayToString = (arr) => {\n        return arr.join(',');\n    };\n\n    handleChange = (e) => {\n        const valueAsArray = this.stringToArray(e.target.value);\n\n        this.props.onChange(this.props.id, valueAsArray);\n\n        this.setState({\n            value: e.target.value,\n        });\n    };\n\n    render() {\n        const label = Utils.localizeMessage('admin.customization.customUrlSchemes', 'Custom URL Schemes:');\n        const helpText = Utils.localizeMessage(\n            'admin.customization.customUrlSchemesDesc',\n            'Allows message text to link if it begins with any of the comma-separated URL schemes listed. By default, the following schemes will create links: \"http\", \"https\", \"ftp\", \"tel\", and \"mailto\".'\n        );\n\n        return (\n            <Setting\n                label={label}\n                helpText={helpText}\n                inputId={this.props.id}\n                setByEnv={this.props.setByEnv}\n            >\n                <LocalizedInput\n                    id={this.props.id}\n                    className='form-control'\n                    type='text'\n                    placeholder={{id: t('admin.customization.customUrlSchemesPlaceholder'), defaultMessage: 'E.g.: \"git,smtp\"'}}\n                    value={this.state.value}\n                    onChange={this.handleChange}\n                    disabled={this.props.disabled || this.props.setByEnv}\n                />\n            </Setting>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport BooleanSetting from './boolean_setting';\n\ntype Props = {\n    id: string;\n    value: boolean;\n    onChange: (id: string, value: boolean, confirm?: boolean, doSubmit?: boolean, warning?: React.ReactNode | string) => void;\n    cancelSubmit: () => void;\n    disabled?: boolean;\n    setByEnv: boolean;\n    showConfirm: boolean;\n}\n\nexport default class CustomEnableDisableGuestAccountsSetting extends React.Component<Props> {\n    public handleChange = (id: string, value: boolean, submit = false) => {\n        const confirmNeeded = value === false; // Requires confirmation if disabling guest accounts\n        let warning: React.ReactNode | string = '';\n        if (confirmNeeded) {\n            warning = (\n                <FormattedMessage\n                    id='admin.guest_access.disableConfirmWarning'\n                    defaultMessage='All current guest account sessions will be revoked, and marked as inactive'\n                />\n            );\n        }\n        this.props.onChange(id, value, confirmNeeded, submit, warning);\n    };\n\n    public render() {\n        const label = (\n            <FormattedMessage\n                id='admin.guest_access.enableTitle'\n                defaultMessage='Enable Guest Access: '\n            />\n        );\n        const helpText = (\n            <FormattedMarkdownMessage\n                id='admin.guest_access.enableDescription'\n                defaultMessage='When true, external guest can be invited to channels within teams. Please see [Permissions Schemes](../user_management/permissions/system_scheme) for which roles can invite guests.'\n            />\n        );\n\n        return (\n            <>\n                <BooleanSetting\n                    id={this.props.id}\n                    value={this.props.value}\n                    label={label}\n                    helpText={helpText}\n                    setByEnv={this.props.setByEnv}\n                    onChange={this.handleChange}\n                />\n                <ConfirmModal\n                    show={this.props.showConfirm && (this.props.value === false)}\n                    title={\n                        <FormattedMessage\n                            id='admin.guest_access.disableConfirmTitle'\n                            defaultMessage='Save and Disable Guest Access?'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='admin.guest_access.disableConfirmMessage'\n                            defaultMessage='Disabling guest access will revoke all current Guest Account sessions. Guests will no longer be able to login and new guests cannot be invited into Mattermost. Guest users will be marked as inactive in user lists. Enabling this feature will not reinstate previous guest accounts. Are you sure you wish to remove these users?'\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='admin.guest_access.disableConfirmButton'\n                            defaultMessage='Save and Disable Guest Access'\n                        />\n                    }\n                    onConfirm={() => {\n                        this.handleChange(this.props.id, false, true);\n                        this.setState({showConfirm: false});\n                    }}\n                    onCancel={this.props.cancelSubmit}\n                />\n            </>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedDate, FormattedTime, FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nexport default class LicenseSettings extends React.Component {\n    static propTypes = {\n        license: PropTypes.object.isRequired,\n        config: PropTypes.object,\n        actions: PropTypes.shape({\n            getLicenseConfig: PropTypes.func.isRequired,\n            uploadLicense: PropTypes.func.isRequired,\n            removeLicense: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            fileSelected: false,\n            fileName: null,\n            serverError: null,\n            removing: false,\n            uploading: false,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getLicenseConfig();\n    }\n\n    handleChange = () => {\n        const element = this.refs.fileInput;\n        if (element && element.files.length > 0) {\n            this.setState({fileSelected: true, fileName: element.files[0].name});\n        }\n    }\n\n    handleSubmit = async (e) => {\n        e.preventDefault();\n\n        const element = this.refs.fileInput;\n        if (!element || element.files.length === 0) {\n            return;\n        }\n        const file = element.files[0];\n\n        this.setState({uploading: true});\n\n        const {error} = await this.props.actions.uploadLicense(file);\n        if (error) {\n            Utils.clearFileInput(element[0]);\n            this.setState({fileSelected: false, fileName: null, serverError: error.message, uploading: false});\n            return;\n        }\n\n        await this.props.actions.getLicenseConfig();\n        this.setState({fileSelected: false, fileName: null, serverError: null, uploading: false});\n    }\n\n    handleRemove = async (e) => {\n        e.preventDefault();\n\n        this.setState({removing: true});\n\n        const {error} = await this.props.actions.removeLicense();\n        if (error) {\n            this.setState({fileSelected: false, fileName: null, serverError: error.message, removing: false});\n            return;\n        }\n\n        await this.props.actions.getLicenseConfig();\n        this.setState({fileSelected: false, fileName: null, serverError: null, removing: false});\n    }\n\n    render() {\n        let serverError = '';\n        if (this.state.serverError) {\n            serverError = <div className='col-sm-12'><div className='form-group has-error'><label className='control-label'>{this.state.serverError}</label></div></div>;\n        }\n\n        var btnClass = 'btn';\n        if (this.state.fileSelected) {\n            btnClass = 'btn btn-primary';\n        }\n\n        const {license} = this.props;\n        const {uploading} = this.state;\n\n        let edition;\n        let licenseType;\n        let licenseKey;\n\n        const issued = (\n            <React.Fragment>\n                <FormattedDate value={new Date(parseInt(license.IssuedAt, 10))}/>\n                {' '}\n                <FormattedTime value={new Date(parseInt(license.IssuedAt, 10))}/>\n            </React.Fragment>\n        );\n        const startsAt = <FormattedDate value={new Date(parseInt(license.StartsAt, 10))}/>;\n        const expiresAt = <FormattedDate value={new Date(parseInt(license.ExpiresAt, 10))}/>;\n\n        if (license.IsLicensed === 'true' && !uploading) {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            const sku = license.SkuShortName ? <React.Fragment>{`Edition: Mattermost Enterprise Edition ${license.SkuShortName}`}<br/></React.Fragment> : null;\n            edition = 'Mattermost Enterprise Edition. Enterprise features on this server have been unlocked with a license key and a valid subscription.';\n            licenseType = (\n                <div>\n                    <p>\n                        {'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.\\n\\nYour subscription details are as follows:'}\n                    </p>\n                    {`Name: ${license.Name}`}<br/>\n                    {`Company or organization name: ${license.Company}`}<br/>\n                    {sku}\n                    {`Number of users: ${license.Users}`}<br/>\n                    {'License issued: '}{issued}<br/>\n                    {'Start date of license: '}{startsAt}<br/>\n                    {'Expiry date of license: '}{expiresAt}<br/>\n                    <br/>\n                    {'See also '}\n                    <a\n                        rel='noopener noreferrer'\n                        target='_blank'\n                        href='https://about.mattermost.com/enterprise-edition-terms/'\n                    >{'Enterprise Edition Terms of Service'}</a>{' and '}\n                    <a\n                        rel='noopener noreferrer'\n                        target='_blank'\n                        href='https://about.mattermost.com/default-privacy-policy/'\n                    >{'Privacy Policy.'}</a>\n                </div>\n            );\n\n            let removeButtonText = (\n                <FormattedMessage\n                    id='admin.license.keyRemove'\n                    defaultMessage='Remove Enterprise License and Downgrade Server'\n                />\n            );\n            if (this.state.removing) {\n                removeButtonText = (\n                    <FormattedMessage\n                        id='admin.license.removing'\n                        defaultMessage='Removing License...'\n                    />\n                );\n            }\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <button\n                        className='btn btn-danger'\n                        onClick={this.handleRemove}\n                        id='remove-button'\n                    >\n                        {removeButtonText}\n                    </button>\n                    <br/>\n                    <br/>\n                    <p className='help-text'>\n                        {'If you migrate servers you may need to remove your license key to install it elsewhere. You can remove the key here, which will revert functionality to that of Team Edition.'}\n                    </p>\n                </div>\n            );\n        } else {\n            // Note: DO NOT LOCALISE THESE STRINGS. Legally we can not since the license is in English.\n            edition = (\n                <p>\n                    {'Mattermost Enterprise Edition. A license is required to unlock enterprise features. Start a trial subscription at '}\n                    <a\n                        target='_blank'\n                        rel='noopener noreferrer'\n                        href='https://mattermost.com/trial/?utm_medium=product&utm_source=product-trial'\n                    >\n                        {'https://mattermost.com/trial/'}\n                    </a>\n                </p>\n            );\n\n            licenseType = 'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.';\n\n            let fileName;\n            if (this.state.fileName) {\n                fileName = this.state.fileName;\n            } else {\n                fileName = (\n                    <FormattedMessage\n                        id='admin.license.noFile'\n                        defaultMessage='No file uploaded'\n                    />\n                );\n            }\n\n            let uploadButtonText = (\n                <FormattedMessage\n                    id='admin.license.upload'\n                    defaultMessage='Upload'\n                />\n            );\n            if (uploading) {\n                uploadButtonText = (\n                    <FormattedMessage\n                        id='admin.license.uploading'\n                        defaultMessage='Uploading License...'\n                    />\n                );\n            }\n\n            licenseKey = (\n                <div className='col-sm-8'>\n                    <div className='file__upload'>\n                        <button className='btn btn-primary'>\n                            <FormattedMessage\n                                id='admin.license.choose'\n                                defaultMessage='Choose File'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.mattermost-license'\n                            onChange={this.handleChange}\n                        />\n                    </div>\n                    <button\n                        className={btnClass}\n                        disabled={!this.state.fileSelected}\n                        onClick={this.handleSubmit}\n                        id='upload-button'\n                    >\n                        {uploadButtonText}\n                    </button>\n                    <div className='help-text no-margin'>\n                        {fileName}\n                    </div>\n                    <br/>\n                    {serverError}\n                    <p className='help-text no-margin'>\n                        <FormattedMarkdownMessage\n                            id='admin.license.uploadDesc'\n                            defaultMessage='Upload a license key for Mattermost Enterprise Edition to upgrade this server. [Visit us online](!http://mattermost.com) to learn more about the benefits of Enterprise Edition or to purchase a key.'\n                        />\n                    </p>\n                </div>\n            );\n        }\n\n        return (\n            <div className='wrapper--fixed'>\n                <FormattedAdminHeader\n                    id='admin.license.title'\n                    defaultMessage='Edition and License'\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <form\n                            className='form-horizontal'\n                            role='form'\n                        >\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                >\n                                    <FormattedMessage\n                                        id='admin.license.edition'\n                                        defaultMessage='Edition: '\n                                    />\n                                </label>\n                                <div className='col-sm-8'>\n                                    {edition}\n                                </div>\n                            </div>\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                >\n                                    <FormattedMessage\n                                        id='admin.license.type'\n                                        defaultMessage='License: '\n                                    />\n                                </label>\n                                <div className='col-sm-8'>\n                                    {licenseType}\n                                </div>\n                            </div>\n                            <div className='form-group'>\n                                <label\n                                    className='control-label col-sm-4'\n                                >\n                                    <FormattedMessage\n                                        id='admin.license.key'\n                                        defaultMessage='License Key: '\n                                    />\n                                </label>\n                                {licenseKey}\n                            </div>\n                        </form>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getLicenseConfig} from 'mattermost-redux/actions/general';\nimport {uploadLicense, removeLicense} from 'mattermost-redux/actions/admin';\n\nimport LicenseSettings from './license_settings.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getLicenseConfig,\n            uploadLicense,\n            removeLicense,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(LicenseSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport './admin_panel.scss';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\ntype Props = {\n    id?: string;\n    className?: string;\n    onHeaderClick?: React.EventHandler<React.MouseEvent>;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    subtitleValues?: any;\n    button?: React.ReactNode;\n    children?: React.ReactNode;\n};\n\nconst AdminPanel: React.FC<Props> = (props: Props) => (\n    <div\n        className={'AdminPanel ' + props.className}\n        id={props.id}\n    >\n        <div\n            className='header'\n            onClick={props.onHeaderClick}\n        >\n            <div>\n                <h3>\n                    <FormattedMessage\n                        id={props.titleId}\n                        defaultMessage={props.titleDefault}\n                    />\n                </h3>\n                <div className='margin-top'>\n                    <FormattedMarkdownMessage\n                        id={props.subtitleId}\n                        defaultMessage={props.subtitleDefault}\n                        values={props.subtitleValues}\n                    />\n                </div>\n            </div>\n            {props.button &&\n                <div className='button'>\n                    {props.button}\n                </div>\n            }\n        </div>\n        {props.children}\n    </div>\n);\n\nAdminPanel.defaultProps = {\n    className: '',\n};\n\nexport default AdminPanel;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {Link} from 'react-router-dom';\n\nimport AdminPanel from './admin_panel';\n\ntype Props = {\n    children?: React.ReactNode;\n    className: string;\n    id?: string;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    url: string;\n    disabled: boolean;\n    linkTextId: string;\n    linkTextDefault: string;\n}\n\nconst AdminPanelWithLink = (props: Props) => {\n    const button = (\n        <Link\n            className='btn btn-primary'\n            to={props.url}\n            onClick={props.disabled ? (e) => e.preventDefault() : () => null}\n        >\n            <FormattedMessage\n                id={props.linkTextId}\n                defaultMessage={props.linkTextDefault}\n            />\n        </Link>\n    );\n\n    return (\n        <AdminPanel\n            className={'AdminPanelWithLink ' + props.className}\n            id={props.id}\n            titleId={props.titleId}\n            titleDefault={props.titleDefault}\n            subtitleId={props.subtitleId}\n            subtitleDefault={props.subtitleDefault}\n            button={button}\n        >\n            {props.children}\n        </AdminPanel>\n    );\n};\n\nAdminPanelWithLink.defaultProps = {\n    className: '',\n};\n\nexport default AdminPanelWithLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {Tooltip} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport OverlayTrigger from 'components/overlay_trigger';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\n\nconst MAX_TEAMS_PER_SCHEME_SUMMARY = 8;\n\nexport default class PermissionsSchemeSummary extends React.Component {\n    static propTypes = {\n        scheme: PropTypes.object.isRequired,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            deleteScheme: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showConfirmModal: false,\n            deleting: false,\n            serverError: null,\n        };\n    }\n\n    renderConfirmModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.permissions.permissionsSchemeSummary.deleteSchemeTitle'\n                defaultMessage='Delete {scheme} scheme?'\n                values={{scheme: this.props.scheme.display_name}}\n            />\n        );\n\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='permission-scheme-summary-error-message'>\n                    <i className='fa fa-exclamation-circle'/> {this.state.serverError}\n                </div>\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.permissions.permissionsSchemeSummary.deleteConfirmQuestion'\n                        defaultMessage='The permissions in the teams using this scheme will reset to the defaults in the System Scheme. Are you sure you want to delete the {schemeName} scheme?'\n                        values={{schemeName: this.props.scheme.display_name}}\n                    />\n                </p>\n                {serverError}\n            </div>\n        );\n\n        const confirmButton = (\n            <LoadingWrapper\n                loading={this.state.deleting}\n                text={Utils.localizeMessage('admin.permissions.permissionsSchemeSummary.deleting', 'Deleting...')}\n            >\n                <FormattedMessage\n                    id='admin.permissions.permissionsSchemeSummary.deleteConfirmButton'\n                    defaultMessage='Yes, Delete'\n                />\n            </LoadingWrapper>\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleDeleteConfirmed}\n                onCancel={this.handleDeleteCanceled}\n            />\n        );\n    }\n\n    stopPropagation = (e) => {\n        e.stopPropagation();\n    }\n\n    handleDeleteCanceled = () => {\n        this.setState({\n            showConfirmModal: false,\n        });\n    }\n\n    handleDeleteConfirmed = async () => {\n        this.setState({deleting: true, serverError: null});\n        const data = await this.props.actions.deleteScheme(this.props.scheme.id);\n        if (data.error) {\n            this.setState({deleting: false, serverError: data.error.message});\n        } else {\n            this.setState({deleting: false, showConfirmModal: false});\n        }\n    }\n\n    delete = (e) => {\n        e.stopPropagation();\n        this.setState({showConfirmModal: true, serverError: null});\n    }\n\n    goToEdit = () => {\n        this.props.history.push('/admin_console/user_management/permissions/team_override_scheme/' + this.props.scheme.id);\n    }\n\n    render = () => {\n        const scheme = this.props.scheme;\n\n        let teams = this.props.teams ? this.props.teams.map((team) => (\n            <span\n                className='team'\n                key={team.id}\n            >\n                {team.display_name}\n            </span>\n        )) : [];\n\n        let extraTeams = null;\n        if (teams.length > MAX_TEAMS_PER_SCHEME_SUMMARY) {\n            extraTeams = (\n                <OverlayTrigger\n                    delayShow={Constants.OVERLAY_TIME_DELAY}\n                    placement='bottom'\n                    overlay={\n                        <Tooltip\n                            className='team-scheme-extra-teams-overlay'\n                            id={scheme.id + '-extra-teams-overlay'}\n                        >\n                            {teams.slice(MAX_TEAMS_PER_SCHEME_SUMMARY)}\n                        </Tooltip>\n                    }\n                >\n                    <span\n                        className='team'\n                        key='extra-teams'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionsSchemeSummary.moreTeams'\n                            defaultMessage='+{number} more'\n                            values={{number: teams.length - MAX_TEAMS_PER_SCHEME_SUMMARY}}\n                        />\n                    </span>\n                </OverlayTrigger>\n            );\n            teams = teams.slice(0, MAX_TEAMS_PER_SCHEME_SUMMARY);\n        }\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <div\n                className='permissions-scheme-summary'\n                onClick={this.goToEdit}\n            >\n                <div onClick={this.stopPropagation}>{confirmModal}</div>\n                <div\n                    className='permissions-scheme-summary--header'\n                >\n                    <div className='title'>\n                        {scheme.display_name}\n                    </div>\n                    <div className='actions'>\n                        <Link\n                            className='edit-button'\n                            to={'/admin_console/user_management/permissions/team_override_scheme/' + scheme.id}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.edit'\n                                defaultMessage='Edit'\n                            />\n                        </Link>\n                        {'-'}\n                        <a\n                            className='delete-button'\n                            onClick={this.delete}\n                        >\n                            <FormattedMessage\n                                id='admin.permissions.permissionsSchemeSummary.delete'\n                                defaultMessage='Delete'\n                            />\n                        </a>\n                    </div>\n                </div>\n                <div className='permissions-scheme-summary--description'>\n                    {scheme.description}\n                </div>\n                <div className='permissions-scheme-summary--teams'>\n                    {teams}\n                    {extraTeams}\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {deleteScheme} from 'mattermost-redux/actions/schemes';\n\nimport {makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return function mapStateToProps(state, ownProps) {\n        return {\n            teams: getSchemeTeams(state, {schemeId: ownProps.scheme.id}),\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deleteScheme,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionsSchemeSummary);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport LoadingScreen from 'components/loading_screen';\nimport LoadingWrapper from 'components/widgets/loading/loading_wrapper';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport AdminPanelWithLink from 'components/widgets/admin_console/admin_panel_with_link';\n\nimport PermissionsSchemeSummary from './permissions_scheme_summary';\n\nconst PAGE_SIZE = 30;\nconst PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE = 501;\n\nexport default class PermissionSchemesSettings extends React.PureComponent {\n    static propTypes = {\n        schemes: PropTypes.object.isRequired,\n        jobsAreEnabled: PropTypes.bool,\n        clusterIsEnabled: PropTypes.bool,\n        license: PropTypes.shape({\n            CustomPermissionsSchemes: PropTypes.string,\n        }),\n        actions: PropTypes.shape({\n            loadSchemes: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n        }),\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            loadingMore: false,\n            page: 0,\n            phase2MigrationIsComplete: false,\n        };\n    }\n\n    static defaultProps = {\n        schemes: {},\n    };\n\n    async UNSAFE_componentWillMount() { // eslint-disable-line camelcase\n        let schemes;\n        let phase2MigrationIsComplete = true; // Assume migration is complete unless HTTP status code says otherwise.\n        try {\n            schemes = await this.props.actions.loadSchemes('team', 0, PAGE_SIZE);\n            if (schemes.error.status_code === PHASE_2_MIGRATION_IMCOMPLETE_STATUS_CODE) {\n                phase2MigrationIsComplete = false;\n            }\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loading: false, phase2MigrationIsComplete}));\n        } catch (err) {\n            this.setState({loading: false, phase2MigrationIsComplete});\n        }\n    }\n\n    loadMoreSchemes = () => {\n        this.setState({loadingMore: true});\n        this.props.actions.loadSchemes('team', this.state.page + 1, PAGE_SIZE).then((schemes) => {\n            const promises = [];\n            for (const scheme of schemes.data) {\n                promises.push(this.props.actions.loadSchemeTeams(scheme.id));\n            }\n            Promise.all(promises).then(() => this.setState({loadingMore: false, page: this.state.page + 1}));\n        });\n    }\n\n    // |RunJobs && !EnableCluster|(*App).IsPhase2MigrationCompleted|View                                                   |\n    // |-------------------------|---------------------------------|-------------------------------------------------------|\n    // |true                     |true                             |null                                                   |\n    // |false                    |true                             |null (Jobs were disabled after a successful migration.)|\n    // |false                    |false                            |On hold view.                                          |\n    // |true                     |false                            |In progress view.                                      |\n    teamOverrideSchemesMigrationView = () => {\n        if (this.state.phase2MigrationIsComplete) {\n            return null;\n        }\n\n        const docLink = (\n            <a\n                href='https://docs.mattermost.com/administration/config-settings.html#jobs'\n                rel='noopener noreferrer'\n                target='_blank'\n            >\n                <FormattedMessage\n                    id='admin.permissions.documentationLinkText'\n                    defaultMessage='documentation'\n                />\n            </a>\n        );\n\n        if (this.props.jobsAreEnabled && !this.props.clusterIsEnabled) {\n            return this.teamOverrideUnavalableView(\n                t('admin.permissions.teamOverrideSchemesInProgress'),\n                'Migration job in progress: Team Override Schemes are not available until the job server completes the permissions migration. Learn more in the {documentationLink}.',\n                docLink\n            );\n        }\n\n        return this.teamOverrideUnavalableView(\n            t('admin.permissions.teamOverrideSchemesNoJobsEnabled'),\n            'Migration job on hold: Team Override Schemes are not available until the job server can execute the permissions migration. The job will be automatically started when the job server is enabled. Learn more in the {documentationLink}.',\n            docLink,\n        );\n    }\n\n    teamOverrideUnavalableView = (id, defaultMsg, documentationLink) => {\n        return (\n            <div className='team-override-unavailable'>\n                <div className='team-override-unavailable__inner'>\n                    <FormattedMessage\n                        id={id}\n                        defaultMessage={defaultMsg}\n                        values={{documentationLink}}\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    renderTeamOverrideSchemes = () => {\n        const schemes = Object.values(this.props.schemes).map((scheme) => (\n            <PermissionsSchemeSummary\n                scheme={scheme}\n                history={this.props.history}\n                key={scheme.id}\n            />\n        ));\n        const hasCustomSchemes = this.props.license.CustomPermissionsSchemes === 'true';\n        const teamOverrideView = this.teamOverrideSchemesMigrationView();\n\n        if (hasCustomSchemes) {\n            return (\n                <AdminPanelWithLink\n                    className='permissions-block'\n                    titleId={t('admin.permissions.teamOverrideSchemesTitle')}\n                    titleDefault='Team Override Schemes'\n                    subtitleId={t('admin.permissions.teamOverrideSchemesBannerText')}\n                    subtitleDefault='Use when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                    url='/admin_console/user_management/permissions/team_override_scheme'\n                    disabled={teamOverrideView !== null}\n                    linkTextId={t('admin.permissions.teamOverrideSchemesNewButton')}\n                    linkTextDefault='New Team Override Scheme'\n                >\n                    {schemes.length === 0 && teamOverrideView === null &&\n                        <div className='no-team-schemes'>\n                            <FormattedMessage\n                                id='admin.permissions.teamOverrideSchemesNoSchemes'\n                                defaultMessage='No team override schemes created.'\n                            />\n                        </div>}\n                    {teamOverrideView}\n                    {schemes.length > 0 && schemes}\n                    {schemes.length === (PAGE_SIZE * (this.state.page + 1)) &&\n                        <button\n                            className='more-schemes theme style--none color--link'\n                            onClick={this.loadMoreSchemes}\n                            disabled={this.state.loadingMore}\n                        >\n                            <LoadingWrapper\n                                loading={this.state.loadingMore}\n                                text={Utils.localizeMessage('admin.permissions.loadingMoreSchemes', 'Loading...')}\n                            >\n                                <FormattedMessage\n                                    id='admin.permissions.loadMoreSchemes'\n                                    defaultMessage='Load more schemes'\n                                />\n                            </LoadingWrapper>\n                        </button>}\n                </AdminPanelWithLink>\n            );\n        }\n        return false;\n    }\n\n    render = () => {\n        if (this.state.loading) {\n            return (<LoadingScreen/>);\n        }\n\n        const teamOverrideView = this.teamOverrideSchemesMigrationView();\n\n        return (\n            <div className='wrapper--fixed'>\n                <FormattedAdminHeader\n                    id='admin.permissions.permissionSchemes'\n                    defaultMessage='Permission Schemes'\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className='banner info'>\n                            <div className='banner__content'>\n                                <span>\n                                    <FormattedMarkdownMessage\n                                        id='admin.permissions.introBanner'\n                                        defaultMessage='Permission Schemes set the default permissions for Team Admins, Channel Admins and everyone else. Learn more about permission schemes in our [documentation](!https://about.mattermost.com/default-advanced-permissions).'\n                                    />\n                                </span>\n                            </div>\n                        </div>\n\n                        <AdminPanelWithLink\n                            titleId={t('admin.permissions.systemSchemeBannerTitle')}\n                            titleDefault='System Scheme'\n                            subtitleId={t('admin.permissions.systemSchemeBannerText')}\n                            subtitleDefault='Set the default permissions inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied.'\n                            url='/admin_console/user_management/permissions/system_scheme'\n                            disabled={teamOverrideView !== null}\n                            linkTextId={t('admin.permissions.systemSchemeBannerButton')}\n                            linkTextDefault='Edit Scheme'\n                        />\n\n                        {this.renderTeamOverrideSchemes()}\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n\nt('admin.permissions.group.delete_posts.description');\nt('admin.permissions.group.delete_posts.name');\nt('admin.permissions.group.integrations.description');\nt('admin.permissions.group.integrations.name');\nt('admin.permissions.group.posts.description');\nt('admin.permissions.group.posts.name');\nt('admin.permissions.group.private_channel.description');\nt('admin.permissions.group.private_channel.name');\nt('admin.permissions.group.public_channel.description');\nt('admin.permissions.group.public_channel.name');\nt('admin.permissions.group.reactions.description');\nt('admin.permissions.group.reactions.name');\nt('admin.permissions.group.send_invites.description');\nt('admin.permissions.group.send_invites.name');\nt('admin.permissions.group.teams.description');\nt('admin.permissions.group.teams.name');\nt('admin.permissions.group.edit_posts.description');\nt('admin.permissions.group.edit_posts.name');\nt('admin.permissions.group.teams_team_scope.description');\nt('admin.permissions.group.teams_team_scope.name');\nt('admin.permissions.permission.assign_system_admin_role.description');\nt('admin.permissions.permission.assign_system_admin_role.name');\nt('admin.permissions.permission.create_direct_channel.description');\nt('admin.permissions.permission.create_direct_channel.name');\nt('admin.permissions.permission.create_group_channel.description');\nt('admin.permissions.permission.create_group_channel.name');\nt('admin.permissions.permission.create_private_channel.description');\nt('admin.permissions.permission.create_private_channel.name');\nt('admin.permissions.permission.create_public_channel.description');\nt('admin.permissions.permission.create_public_channel.name');\nt('admin.permissions.permission.create_team.description');\nt('admin.permissions.permission.create_team.name');\nt('admin.permissions.permission.create_user_access_token.description');\nt('admin.permissions.permission.create_user_access_token.name');\nt('admin.permissions.permission.delete_others_posts.description');\nt('admin.permissions.permission.delete_others_posts.name');\nt('admin.permissions.permission.delete_post.description');\nt('admin.permissions.permission.delete_post.name');\nt('admin.permissions.permission.delete_private_channel.description');\nt('admin.permissions.permission.delete_private_channel.name');\nt('admin.permissions.permission.delete_public_channel.description');\nt('admin.permissions.permission.delete_public_channel.name');\nt('admin.permissions.permission.edit_other_users.description');\nt('admin.permissions.permission.edit_other_users.name');\nt('admin.permissions.permission.edit_post.description');\nt('admin.permissions.permission.edit_post.name');\nt('admin.permissions.permission.import_team.description');\nt('admin.permissions.permission.import_team.name');\nt('admin.permissions.permission.list_team_channels.description');\nt('admin.permissions.permission.list_team_channels.name');\nt('admin.permissions.permission.list_users_without_team.description');\nt('admin.permissions.permission.list_users_without_team.name');\nt('admin.permissions.permission.manage_channel_roles.description');\nt('admin.permissions.permission.manage_channel_roles.name');\nt('admin.permissions.permission.create_emojis.description');\nt('admin.permissions.permission.create_emojis.name');\nt('admin.permissions.permission.delete_emojis.description');\nt('admin.permissions.permission.delete_emojis.name');\nt('admin.permissions.permission.delete_others_emojis.description');\nt('admin.permissions.permission.delete_others_emojis.name');\nt('admin.permissions.permission.manage_jobs.description');\nt('admin.permissions.permission.manage_jobs.name');\nt('admin.permissions.permission.manage_oauth.description');\nt('admin.permissions.permission.manage_oauth.name');\nt('admin.permissions.permission.manage_private_channel_members.description');\nt('admin.permissions.permission.manage_private_channel_members.name');\nt('admin.permissions.permission.manage_private_channel_properties.description');\nt('admin.permissions.permission.manage_private_channel_properties.name');\nt('admin.permissions.permission.manage_public_channel_members.description');\nt('admin.permissions.permission.manage_public_channel_members.name');\nt('admin.permissions.permission.manage_public_channel_properties.description');\nt('admin.permissions.permission.manage_public_channel_properties.name');\nt('admin.permissions.permission.manage_roles.description');\nt('admin.permissions.permission.manage_roles.name');\nt('admin.permissions.permission.manage_slash_commands.description');\nt('admin.permissions.permission.manage_slash_commands.name');\nt('admin.permissions.permission.manage_system.description');\nt('admin.permissions.permission.manage_system.name');\nt('admin.permissions.permission.manage_team.description');\nt('admin.permissions.permission.manage_team.name');\nt('admin.permissions.permission.manage_team_roles.description');\nt('admin.permissions.permission.manage_team_roles.name');\nt('admin.permissions.permission.manage_incoming_webhooks.description');\nt('admin.permissions.permission.manage_incoming_webhooks.name');\nt('admin.permissions.permission.manage_outgoing_webhooks.description');\nt('admin.permissions.permission.manage_outgoing_webhooks.name');\nt('admin.permissions.permission.permanent_delete_user.description');\nt('admin.permissions.permission.permanent_delete_user.name');\nt('admin.permissions.permission.read_channel.description');\nt('admin.permissions.permission.read_channel.name');\nt('admin.permissions.permission.read_user_access_token.description');\nt('admin.permissions.permission.read_user_access_token.name');\nt('admin.permissions.permission.remove_user_from_team.description');\nt('admin.permissions.permission.remove_user_from_team.name');\nt('admin.permissions.permission.revoke_user_access_token.description');\nt('admin.permissions.permission.revoke_user_access_token.name');\nt('admin.permissions.permission.upload_file.description');\nt('admin.permissions.permission.upload_file.name');\nt('admin.permissions.permission.view_team.description');\nt('admin.permissions.permission.view_team.name');\nt('admin.permissions.permission.edit_others_posts.description');\nt('admin.permissions.permission.edit_others_posts.name');\nt('admin.permissions.permission.invite_guest.name');\nt('admin.permissions.permission.invite_guest.description');\nt('admin.permissions.roles.all_users.name');\nt('admin.permissions.roles.channel_admin.name');\nt('admin.permissions.roles.channel_user.name');\nt('admin.permissions.roles.system_admin.name');\nt('admin.permissions.roles.system_user.name');\nt('admin.permissions.roles.team_admin.name');\nt('admin.permissions.roles.team_user.name');\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getSchemeTeams as loadSchemeTeams, getSchemes as loadSchemes} from 'mattermost-redux/actions/schemes';\nimport {getSchemes} from 'mattermost-redux/selectors/entities/schemes';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PermissionSchemesSettings from './permission_schemes_settings.jsx';\n\nfunction mapStateToProps(state) {\n    const schemes = getSchemes(state);\n    const config = getConfig(state);\n\n    return {\n        schemes,\n        jobsAreEnabled: config.RunJobs === 'true',\n        clusterIsEnabled: config.EnableCluster === 'true',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadSchemes,\n            loadSchemeTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSchemesSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {NavLink} from 'react-router-dom';\n\nimport {browserHistory} from 'utils/browser_history';\n\ntype Props = {\n\n    /*\n   * Bool whether navigation is blocked\n   */\n    blocked: boolean;\n\n    /*\n   * String Link destination\n   */\n    to: string;\n    actions: {\n\n        /*\n     * Function for deferring navigation while blocked\n     */\n        deferNavigation: (func: () => void) => void;\n    };\n};\nexport default class BlockableLink extends React.PureComponent<Props> {\n    private handleClick = (e: React.MouseEvent) => {\n        if (this.props.blocked) {\n            e.preventDefault();\n\n            this.props.actions.deferNavigation(() => {\n                browserHistory.push(this.props.to);\n            });\n        }\n    };\n\n    public render() {\n        const props = {...this.props};\n        Reflect.deleteProperty(props, 'blocked');\n        Reflect.deleteProperty(props, 'actions');\n\n        return (\n            <NavLink\n                {...props}\n                onClick={this.handleClick}\n            />);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {GenericAction} from 'mattermost-redux/types/actions';\n\nimport {deferNavigation} from 'actions/admin_actions';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport BlockableLink from './blockable_link';\n\nfunction mapStateToProps(state: object) {\n    return {\n        blocked: getNavigationBlocked(state)\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation\n        }, dispatch)\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(BlockableLink);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class AccordionToggleIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='30px'\n                    height='30px'\n                    viewBox='0 0 30 30'\n                >\n                    <g\n                        id='Developer-Export'\n                        stroke='none'\n                        strokeWidth='1'\n                        fill='none'\n                        fillRule='evenodd'\n                    >\n                        <g\n                            transform='translate(-995.000000, -1372.000000)'\n                            id='All-Team-Members'\n                        >\n                            <g transform='translate(245.000000, 698.000000)'>\n                                <g\n                                    id='Team-Administrators'\n                                    transform='translate(0.000000, 651.000000)'\n                                >\n                                    <g id='accordion-header'>\n                                        <g\n                                            id='accordion---expanded'\n                                            transform='translate(750.000000, 23.000000)'\n                                        >\n                                            <path\n                                                d='M23.1484532,13.3124932 C23.3437659,13.1171805 23.3437659,12.7968676 23.1484532,12.6015549 L21.8515766,11.3124908 C21.6562639,11.1171781 21.3437635,11.1171781 21.1484508,11.3124908 L15.0000083,17.4609333 L8.8515659,11.3124908 C8.65625317,11.1171781 8.34375279,11.1171781 8.14844006,11.3124908 L6.85156352,12.6015549 C6.65625078,12.7968676 6.65625078,13.1171805 6.85156352,13.3124932 L14.6484454,21.1015626 C14.8437582,21.2968754 15.1562585,21.2968754 15.3515713,21.1015626 L23.1484532,13.3124932 Z'\n                                                id=''\n                                                fill='#979797'\n                                            />\n                                            <circle\n                                                id='Oval-2'\n                                                stroke='#989898'\n                                                strokeWidth='2'\n                                                cx='15'\n                                                cy='15'\n                                                r='14'\n                                            />\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport AccordionToggleIcon from 'components/widgets/icons/accordion_toggle_icon.jsx';\n\nimport AdminPanel from './admin_panel';\n\ntype Props = {\n    children?: React.ReactNode;\n    className: string;\n    id?: string;\n    open: boolean;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    onToggle?: React.EventHandler<React.MouseEvent>;\n};\n\nconst AdminPanelTogglable: React.FC<Props> = (props: Props) => {\n    return (\n        <AdminPanel\n            className={'AdminPanelTogglable ' + props.className + (props.open ? '' : ' closed')}\n            id={props.id}\n            titleId={props.titleId}\n            titleDefault={props.titleDefault}\n            subtitleId={props.subtitleId}\n            subtitleDefault={props.subtitleDefault}\n            onHeaderClick={props.onToggle}\n            button={<AccordionToggleIcon/>}\n        >\n            {props.children}\n        </AdminPanel>\n    );\n};\n\nAdminPanelTogglable.defaultProps = {\n    className: '',\n    open: true,\n};\n\nexport default AdminPanelTogglable;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class CheckboxPartialIcon extends React.PureComponent {\n    render() {\n        return (\n            <svg\n                width='18px'\n                height='18px'\n                viewBox='0 0 18 18'\n            >\n                <g\n                    id='Developer-Export'\n                    stroke='none'\n                    strokeWidth='1'\n                    fillRule='evenodd'\n                >\n                    <g\n                        transform='translate(-298.000000, -1273.000000)'\n                        id='All-Team-Members'\n                    >\n                        <g transform='translate(245.000000, 698.000000)'>\n                            <g\n                                id='Channel-Administrators'\n                                transform='translate(0.000000, 106.000000)'\n                            >\n                                <g\n                                    id='data-table/column-1'\n                                    transform='translate(11.000000, 86.000000)'\n                                >\n                                    <g\n                                        id='row-checkbox---@all-@channel-Mentions'\n                                        transform='translate(0.000000, 375.000000)'\n                                    >\n                                        <g id='Stacked-Group'>\n                                            <g\n                                                id='data-table/1st/row-checkbox-label-base'\n                                                transform='translate(25.000000, 5.000000)'\n                                            >\n                                                <g\n                                                    id='check-on-copy-11'\n                                                    transform='translate(14.000000, 0.000000)'\n                                                >\n                                                    <path\n                                                        d='M19,3 C20.1,3 21,3.9 21,5 L21,19 C21,20.1 20.1,21 19,21 L5,21 C3.9,21 3,20.1 3,19 L3,5 C3,3.9 3.9,3 5,3 L19,3 Z M7,11 L7,13 L17,13 L17,11 L7,11 Z'\n                                                        id='checkbox---partial'\n                                                    />\n                                                </g>\n                                            </g>\n                                        </g>\n                                    </g>\n                                </g>\n                            </g>\n                        </g>\n                    </g>\n                </g>\n            </svg>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon.jsx';\nimport CheckboxPartialIcon from 'components/widgets/icons/checkbox_partial_icon.jsx';\n\nexport default class PermissionCheckbox extends React.PureComponent {\n    static propTypes = {\n        value: PropTypes.string.isRequired,\n    };\n\n    static defaultProps = {\n        value: '',\n    }\n\n    render() {\n        const {value} = this.props;\n        let icon = null;\n        let extraClass = '';\n        if (value === 'checked') {\n            icon = (<CheckboxCheckedIcon/>);\n            extraClass = 'checked';\n        } else if (value === 'intermediate') {\n            icon = (<CheckboxPartialIcon/>);\n            extraClass = 'intermediate';\n        }\n        return (\n            <div className={'permission-check ' + extraClass}>\n                {icon}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage, injectIntl} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {generateId} from 'utils/utils.jsx';\nimport {intlShape} from 'utils/react_intl';\nimport Constants from 'utils/constants';\n\nexport class PermissionDescription extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        id: PropTypes.string.isRequired,\n        rowType: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        selectRow: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.id = generateId();\n\n        this.state = {\n            open: false,\n        };\n    }\n\n    closeTooltip = () => {\n        this.setState({open: false});\n    }\n\n    openTooltip = (e) => {\n        const elm = e.currentTarget.querySelector('span');\n        const isElipsis = elm.offsetWidth < elm.scrollWidth;\n        this.setState({open: isElipsis});\n    }\n\n    parentPermissionClicked = (e) => {\n        const isInheritLink = e.target.parentElement.parentElement.className === 'inherit-link-wrapper';\n        if (e.target.parentElement.className !== 'permission-description' && !isInheritLink) {\n            e.stopPropagation();\n        } else if (isInheritLink) {\n            this.props.selectRow(this.props.id);\n            e.stopPropagation();\n        }\n    }\n\n    render() {\n        const {inherited, id, rowType} = this.props;\n\n        let content = '';\n        if (inherited) {\n            content = (\n                <span className='inherit-link-wrapper'>\n                    <FormattedHTMLMessage\n                        id='admin.permissions.inherited_from'\n                        values={{\n                            name: this.props.intl.formatMessage({\n                                id: 'admin.permissions.roles.' + inherited.name + '.name',\n                                defaultMessage: inherited.display_name,\n                            }),\n                        }}\n                    />\n                </span>\n            );\n        } else {\n            content = (\n                <FormattedMessage\n                    id={'admin.permissions.' + rowType + '.' + id + '.description'}\n                    values={this.props.additionalValues}\n                />\n            );\n        }\n        let tooltip = (\n            <Overlay\n                show={this.state.open}\n                delayShow={Constants.OVERLAY_TIME_DELAY}\n                placement='top'\n                target={this.refs.content}\n            >\n                <Tooltip id={this.id}>\n                    {content}\n                </Tooltip>\n            </Overlay>\n        );\n        if (content.props.values && Object.keys(content.props.values).length > 0) {\n            tooltip = null;\n        }\n        content = (\n            <span\n                className='permission-description'\n                onClick={this.parentPermissionClicked}\n                ref='content'\n                onMouseOver={this.openTooltip}\n                onMouseOut={this.closeTooltip}\n            >\n                {content}\n                {tooltip}\n            </span>\n        );\n\n        return content;\n    }\n}\n\nexport default injectIntl(PermissionDescription);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionRow extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        inherited: PropTypes.object,\n        readOnly: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        value: PropTypes.string.isRequired,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    toggleSelect = () => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(this.props.id);\n    }\n\n    render = () => {\n        const {id, uniqId, inherited, value, readOnly, selected, additionalValues} = this.props;\n        let classes = 'permission-row';\n        if (readOnly) {\n            classes += ' read-only';\n        }\n\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        return (\n            <div\n                className={classes}\n                onClick={this.toggleSelect}\n                id={uniqId}\n            >\n                <PermissionCheckbox value={value}/>\n                <span className='permission-name'>\n                    <FormattedMessage\n                        id={'admin.permissions.permission.' + id + '.name'}\n                    />\n                </span>\n                <PermissionDescription\n                    inherited={inherited}\n                    id={id}\n                    selectRow={this.props.selectRow}\n                    rowType='permission'\n                    additionalValues={additionalValues}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {PermissionsScope} from 'utils/constants';\n\nimport PermissionCheckbox from './permission_checkbox.jsx';\nimport PermissionRow from './permission_row.jsx';\nimport PermissionDescription from './permission_description.jsx';\n\nexport default class PermissionGroup extends React.Component {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        uniqId: PropTypes.string.isRequired,\n        permissions: PropTypes.array.isRequired,\n        readOnly: PropTypes.bool,\n        role: PropTypes.object,\n        parentRole: PropTypes.object,\n        scope: PropTypes.string.isRequired,\n        combined: PropTypes.bool,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        root: PropTypes.bool,\n        onChange: PropTypes.func.isRequired,\n        additionalValues: PropTypes.object,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            expanded: true,\n            prevPermissions: [],\n        };\n    }\n\n    UNSAFE_componentWillUpdate(nextProps) { // eslint-disable-line camelcase\n        if (this.props.selected !== nextProps.selected) {\n            if (this.getRecursivePermissions(this.props.permissions).indexOf(nextProps.selected) !== -1) {\n                this.setState({expanded: true});\n            }\n        }\n    }\n\n    toggleExpanded = (e) => {\n        e.stopPropagation();\n        this.setState({expanded: !this.state.expanded});\n    }\n\n    toggleSelectRow = (id) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange([id]);\n    }\n\n    getRecursivePermissions = (permissions) => {\n        let result = [];\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                result.push(permission);\n            } else {\n                result = result.concat(this.getRecursivePermissions(permission.permissions));\n            }\n        }\n        return result;\n    }\n\n    toggleSelectSubGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onChange(ids);\n    }\n\n    toggleSelectGroup = () => {\n        const {readOnly, permissions, role, onChange} = this.props;\n        if (readOnly) {\n            return;\n        }\n        if (this.getStatus(permissions) === 'checked') {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (!this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({expanded: true});\n            onChange(permissionsToToggle);\n        } else if (this.getStatus(permissions) === '') {\n            const permissionsToToggle = [];\n            let expanded = true;\n            if (this.state.prevPermissions.length === 0) {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (!this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                        expanded = false;\n                    }\n                }\n            } else {\n                for (const permission of this.getRecursivePermissions(permissions)) {\n                    if (this.state.prevPermissions.indexOf(permission) !== -1 && !this.fromParent(permission)) {\n                        permissionsToToggle.push(permission);\n                    }\n                }\n            }\n            onChange(permissionsToToggle);\n            this.setState({prevPermissions: [], expanded});\n        } else {\n            const permissionsToToggle = [];\n            for (const permission of this.getRecursivePermissions(permissions)) {\n                if (role.permissions.indexOf(permission) === -1 && !this.fromParent(permission)) {\n                    permissionsToToggle.push(permission);\n                }\n            }\n            this.setState({prevPermissions: role.permissions, expanded: false});\n            onChange(permissionsToToggle);\n        }\n    }\n\n    isInScope = (permission) => {\n        if (this.props.scope === 'channel_scope' && PermissionsScope[permission] !== 'channel_scope') {\n            return false;\n        }\n        if (this.props.scope === 'team_scope' && PermissionsScope[permission] === 'system_scope') {\n            return false;\n        }\n        return true;\n    }\n\n    renderPermission = (permission, additionalValues) => {\n        if (!this.isInScope(permission)) {\n            return null;\n        }\n        const comesFromParent = this.fromParent(permission);\n        const active = comesFromParent || this.props.role.permissions.indexOf(permission) !== -1;\n        return (\n            <PermissionRow\n                key={permission}\n                id={permission}\n                uniqId={this.props.uniqId + '-' + permission}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly || comesFromParent}\n                inherited={comesFromParent ? this.props.parentRole : null}\n                value={active ? 'checked' : ''}\n                onChange={this.toggleSelectRow}\n                additionalValues={additionalValues}\n            />\n        );\n    }\n\n    renderGroup = (g) => {\n        return (\n            <PermissionGroup\n                key={g.id}\n                id={g.id}\n                uniqId={this.props.uniqId + '-' + g.id}\n                selected={this.props.selected}\n                selectRow={this.props.selectRow}\n                readOnly={this.props.readOnly}\n                permissions={g.permissions}\n                additionalValues={this.props.additionalValues}\n                role={this.props.role}\n                parentRole={this.props.parentRole}\n                scope={this.props.scope}\n                onChange={this.toggleSelectSubGroup}\n                combined={g.combined}\n                root={false}\n            />\n        );\n    }\n\n    fromParent = (id) => {\n        return this.props.parentRole && this.props.parentRole.permissions.indexOf(id) !== -1;\n    }\n\n    getStatus = (permissions) => {\n        let anyChecked = false;\n        let anyUnchecked = false;\n        for (const permission of permissions) {\n            if (typeof permission === 'string') {\n                if (!this.isInScope(permission)) {\n                    continue;\n                }\n                anyChecked = anyChecked || this.fromParent(permission) || this.props.role.permissions.indexOf(permission) !== -1;\n                anyUnchecked = anyUnchecked || (!this.fromParent(permission) && this.props.role.permissions.indexOf(permission) === -1);\n            } else {\n                const status = this.getStatus(permission.permissions);\n                if (status === 'intermediate') {\n                    return 'intermediate';\n                }\n                if (status === 'checked') {\n                    anyChecked = true;\n                }\n                if (status === '') {\n                    anyUnchecked = true;\n                }\n            }\n        }\n        if (anyChecked && anyUnchecked) {\n            return 'intermediate';\n        }\n        if (anyChecked && !anyUnchecked) {\n            return 'checked';\n        }\n        return '';\n    }\n\n    hasPermissionsOnScope = () => {\n        return this.getRecursivePermissions(this.props.permissions).some((permission) => this.isInScope(permission));\n    }\n\n    allPermissionsFromParent = (permissions) => {\n        for (const permission of permissions) {\n            if (typeof permission !== 'string') {\n                if (!this.allPermissionsFromParent(permission.permissions)) {\n                    return false;\n                }\n                continue;\n            }\n            if (this.isInScope(permission) && !this.fromParent(permission)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    render = () => {\n        const {id, uniqId, permissions, readOnly, combined, root, selected, additionalValues} = this.props;\n        if (!this.hasPermissionsOnScope()) {\n            return null;\n        }\n        const permissionsRows = permissions.map((group) => {\n            if (typeof group === 'string') {\n                const addVals = additionalValues && additionalValues[group] ? additionalValues[group] : {};\n                return this.renderPermission(group, addVals);\n            }\n            return this.renderGroup(group);\n        });\n        if (root) {\n            return (\n                <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                    {permissionsRows}\n                </div>\n            );\n        }\n\n        let inherited = null;\n        if (this.allPermissionsFromParent(this.props.permissions) && this.props.combined) {\n            inherited = this.props.parentRole;\n        }\n\n        let classes = '';\n        if (selected === id) {\n            classes += ' selected';\n        }\n\n        if (readOnly || this.allPermissionsFromParent(this.props.permissions)) {\n            classes += ' read-only';\n        }\n\n        if (combined) {\n            classes += ' combined';\n        }\n\n        return (\n            <div className='permission-group'>\n                {!root &&\n                    <div\n                        className={'permission-group-row ' + classes}\n                        onClick={this.toggleSelectGroup}\n                        id={uniqId}\n                    >\n                        {!combined &&\n                            <div\n                                className={'fa fa-caret-right permission-arrow ' + (this.state.expanded ? 'open' : '')}\n                                onClick={this.toggleExpanded}\n                            />}\n                        <PermissionCheckbox value={this.getStatus(this.props.permissions)}/>\n                        <span className='permission-name'>\n                            <FormattedMessage id={'admin.permissions.group.' + id + '.name'}/>\n                        </span>\n                        <PermissionDescription\n                            inherited={inherited}\n                            id={id}\n                            selectRow={this.props.selectRow}\n                            rowType='group'\n                        />\n                    </div>}\n                {!combined &&\n                    <div className={'permission-group-permissions ' + (this.state.expanded ? 'open' : '')}>\n                        {permissionsRows}\n                    </div>}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {t} from 'utils/i18n';\n\nexport default class EditPostTimeLimitButton extends React.Component {\n    static propTypes = {\n        timeLimit: PropTypes.number.isRequired,\n        onClick: PropTypes.func,\n    };\n\n    render = () => {\n        let messageID;\n        if (this.props.timeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            messageID = t('edit_post.time_limit_button.no_limit');\n        } else {\n            messageID = t('edit_post.time_limit_button.for_n_seconds');\n        }\n\n        return (\n            <button\n                className='edit-post-time-limit-button'\n                onClick={this.props.onClick}\n            >\n                <i className='fa fa-gear'/>\n                <FormattedMessage\n                    id={messageID}\n                    values={{n: this.props.timeLimit}}\n                />\n            </button>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport EditPostTimeLimitButton from './edit_post_time_limit_button';\n\nfunction mapStateToProps(state) {\n    const {PostEditTimeLimit} = getConfig(state);\n\n    return {\n        timeLimit: parseInt(PostEditTimeLimit, 10),\n    };\n}\n\nexport default connect(mapStateToProps)(EditPostTimeLimitButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage, FormattedHTMLMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport {Constants} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nconst INT32_MAX = 2147483647;\n\nexport default class EditPostTimeLimitModal extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        show: PropTypes.bool,\n        onClose: PropTypes.func.isRequired,\n        actions: PropTypes.shape({\n            updateConfig: PropTypes.func.isRequired,\n            getConfig: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            postEditTimeLimit: parseInt(props.config.ServiceSettings.PostEditTimeLimit, 10),\n            saving: false,\n            errorMessage: '',\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getConfig();\n    }\n\n    save = async () => {\n        this.setState({saving: true, errorMessage: ''});\n\n        const val = parseInt(this.state.postEditTimeLimit, 10);\n        if (val !== Constants.UNSET_POST_EDIT_TIME_LIMIT) {\n            if (val.toString() === 'NaN' || val <= 0 || val > INT32_MAX) {\n                this.setState({errorMessage: localizeMessage('edit_post.time_limit_modal.invalid_time_limit', 'Invalid time limit'), saving: false});\n                return false;\n            }\n        }\n\n        const newConfig = JSON.parse(JSON.stringify(this.props.config));\n        newConfig.ServiceSettings.PostEditTimeLimit = val;\n\n        const {error: err} = await this.props.actions.updateConfig(newConfig);\n        if (err) {\n            this.setState({errorMessage: err, saving: false});\n        } else {\n            this.setState({saving: false});\n            this.props.onClose();\n        }\n\n        return true;\n    }\n\n    handleOptionChange = (e) => {\n        const {value} = e.target;\n        if (value === Constants.ALLOW_EDIT_POST_ALWAYS) {\n            this.setState({postEditTimeLimit: Constants.UNSET_POST_EDIT_TIME_LIMIT});\n        } else {\n            this.setState({postEditTimeLimit: ''});\n        }\n    }\n\n    handleSecondsChange = (e) => {\n        const {value} = e.target;\n        this.setState({postEditTimeLimit: value});\n    }\n\n    render = () => {\n        return (\n            <Modal\n                dialogClassName='a11y__modal admin-modal edit-post-time-limit-modal'\n                show={this.props.show}\n                role='dialog'\n                aria-labelledby='editPostTimeModalLabel'\n            >\n                <Modal.Header\n                    closeButton={true}\n                >\n                    <Modal.Title\n                        componentClass='h1'\n                        id='editPostTimeModalLabel'\n                    >\n                        <FormattedMessage\n                            id='edit_post.time_limit_modal.title'\n                            defaultMessage='Configure Global Edit Post Time Limit'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <FormattedHTMLMessage\n                        id='edit_post.time_limit_modal.description'\n                        defaultMessage='Setting a time limit <strong>applies to all users</strong> who have the \"Edit Post\" permissions in any permission scheme.'\n                    />\n                    <div className='padding-left x2 padding-top padding-bottom'>\n                        <div className='padding-top x2'>\n                            <input\n                                id='anytime'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_ALWAYS}\n                                checked={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='anytime'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_anytime'\n                                    defaultMessage='Anytime'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top'>\n                            <input\n                                id='timelimit'\n                                type='radio'\n                                name='limit'\n                                value={Constants.ALLOW_EDIT_POST_TIME_LIMIT}\n                                checked={this.state.postEditTimeLimit !== Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleOptionChange}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.preinput'\n                                    defaultMessage='Can edit for'\n                                />\n                            </label>\n                            <input\n                                type='number'\n                                className='form-control inline'\n                                min='0'\n                                step='1'\n                                max={INT32_MAX}\n                                id='editPostTimeLimit'\n                                readOnly={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT}\n                                onChange={this.handleSecondsChange}\n                                value={this.state.postEditTimeLimit === Constants.UNSET_POST_EDIT_TIME_LIMIT ? '' : this.state.postEditTimeLimit}\n                            />\n                            <label htmlFor='timelimit'>\n                                <FormattedMessage\n                                    id='edit_post.time_limit_modal.option_label_time_limit.postinput'\n                                    defaultMessage='seconds after posting'\n                                />\n                            </label>\n                        </div>\n                        <div className='padding-top x2 light'>\n                            <FormattedMessage\n                                id='edit_post.time_limit_modal.subscript'\n                                defaultMessage='Set the length of time users have to edit their messages after posting.'\n                            />\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer>\n                    <div className='edit-post-time-limit-modal__error'>\n                        {this.state.errorMessage}\n                    </div>\n                    <button\n                        type='button'\n                        className='btn btn-cancel'\n                        onClick={this.props.onClose}\n                    >\n                        <FormattedMessage\n                            id='confirm_modal.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        id='linkModalCloseButton'\n                        type='button'\n                        className='btn btn-default'\n                        onClick={this.save}\n                        disabled={this.state.saving}\n                    >\n                        <FormattedMessage\n                            id={this.state.saving ? t('save_button.saving') : t('edit_post.time_limit_modal.save_button')}\n                            defaultMessage='Save Edit Time'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getConfig, updateConfig} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport EditPostTimeLimitModal from './edit_post_time_limit_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        config: Selectors.getConfig(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateConfig,\n            getConfig,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(EditPostTimeLimitModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport PermissionGroup from '../permission_group.jsx';\n\nimport EditPostTimeLimitButton from '../edit_post_time_limit_button';\nimport EditPostTimeLimitModal from '../edit_post_time_limit_modal';\n\nexport default class PermissionsTree extends React.Component {\n    static propTypes = {\n        scope: PropTypes.string.isRequired,\n        config: PropTypes.object.isRequired,\n        role: PropTypes.object.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        parentRole: PropTypes.object,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        readOnly: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        role: {\n            permissions: [],\n        },\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editTimeLimitModalIsVisible: false,\n        };\n\n        this.ADDITIONAL_VALUES = {\n            edit_post: {\n                editTimeLimitButton: <EditPostTimeLimitButton onClick={this.openPostTimeLimitModal}/>,\n            },\n        };\n\n        this.groups = [\n            {\n                id: 'teams',\n                permissions: [\n                    {\n                        id: 'send_invites',\n                        combined: true,\n                        permissions: [\n                            Permissions.INVITE_USER,\n                            Permissions.GET_PUBLIC_LINK,\n                            Permissions.ADD_USER_TO_TEAM,\n                        ],\n                    },\n                    Permissions.CREATE_TEAM,\n                ],\n            },\n            {\n                id: 'public_channel',\n                permissions: [\n                    Permissions.CREATE_PUBLIC_CHANNEL,\n                    Permissions.MANAGE_PUBLIC_CHANNEL_PROPERTIES,\n                    Permissions.MANAGE_PUBLIC_CHANNEL_MEMBERS,\n                    Permissions.DELETE_PUBLIC_CHANNEL,\n                ],\n            },\n            {\n                id: 'private_channel',\n                permissions: [\n                    Permissions.CREATE_PRIVATE_CHANNEL,\n                    Permissions.MANAGE_PRIVATE_CHANNEL_PROPERTIES,\n                    Permissions.MANAGE_PRIVATE_CHANNEL_MEMBERS,\n                    Permissions.DELETE_PRIVATE_CHANNEL,\n                ],\n            },\n            {\n                id: 'posts',\n                permissions: [\n                    {\n                        id: 'edit_posts',\n                        permissions: [\n                            Permissions.EDIT_POST,\n                            Permissions.EDIT_OTHERS_POSTS,\n                        ],\n                    },\n                    {\n                        id: 'delete_posts',\n                        permissions: [\n                            Permissions.DELETE_POST,\n                            Permissions.DELETE_OTHERS_POSTS,\n                        ],\n                    },\n                    {\n                        id: 'reactions',\n                        combined: true,\n                        permissions: [\n                            Permissions.ADD_REACTION,\n                            Permissions.REMOVE_REACTION,\n                        ],\n                    },\n                ],\n            },\n            {\n                id: 'integrations',\n                permissions: [\n                ],\n            },\n        ];\n        this.updateGroups();\n    }\n\n    updateGroups = () => {\n        const {config, scope} = this.props;\n        const integrationsGroup = this.groups[this.groups.length - 1];\n        const teamsGroup = this.groups[0];\n        if (config.EnableIncomingWebhooks === 'true' && integrationsGroup.permissions.indexOf(Permissions.MANAGE_INCOMING_WEBHOOKS) === -1) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_INCOMING_WEBHOOKS);\n        }\n        if (config.EnableOutgoingWebhooks === 'true' && integrationsGroup.permissions.indexOf(Permissions.MANAGE_OUTGOING_WEBHOOKS) === -1) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_OUTGOING_WEBHOOKS);\n        }\n        if (config.EnableOAuthServiceProvider === 'true' && integrationsGroup.permissions.indexOf(Permissions.MANAGE_OAUTH) === -1) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_OAUTH);\n        }\n        if (config.EnableCommands === 'true' && integrationsGroup.permissions.indexOf(Permissions.MANAGE_SLASH_COMMANDS) === -1) {\n            integrationsGroup.permissions.push(Permissions.MANAGE_SLASH_COMMANDS);\n        }\n        if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf(Permissions.CREATE_EMOJIS) === -1) {\n            integrationsGroup.permissions.push(Permissions.CREATE_EMOJIS);\n        }\n        if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf(Permissions.DELETE_EMOJIS) === -1) {\n            integrationsGroup.permissions.push(Permissions.DELETE_EMOJIS);\n        }\n        if (config.EnableCustomEmoji === 'true' && integrationsGroup.permissions.indexOf(Permissions.DELETE_OTHERS_EMOJIS) === -1) {\n            integrationsGroup.permissions.push(Permissions.DELETE_OTHERS_EMOJIS);\n        }\n        if (config.EnableGuestAccounts === 'true' && teamsGroup.permissions.indexOf(Permissions.INVITE_GUEST) === -1) {\n            teamsGroup.permissions.push(Permissions.INVITE_GUEST);\n        }\n        if (scope === 'team_scope' && this.groups[0].id !== 'teams_team_scope') {\n            this.groups[0].id = 'teams_team_scope';\n        }\n    }\n\n    openPostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: true});\n    }\n\n    closePostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: false});\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.props.config !== prevProps.config) {\n            this.updateGroups();\n        }\n    }\n\n    toggleGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onToggle(this.props.role.name, ids);\n    }\n\n    render = () => {\n        return (\n            <div className='permissions-tree'>\n                <div className='permissions-tree--header'>\n                    <div className='permission-name'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.permission'\n                            defaultMessage='Permission'\n                        />\n                    </div>\n                    <div className='permission-description'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.description'\n                            defaultMessage='Description'\n                        />\n                    </div>\n                </div>\n                <div className='permissions-tree--body'>\n                    <PermissionGroup\n                        key='all'\n                        id='all'\n                        uniqId={this.props.role.name}\n                        selected={this.props.selected}\n                        selectRow={this.props.selectRow}\n                        readOnly={this.props.readOnly}\n                        permissions={this.groups}\n                        additionalValues={this.ADDITIONAL_VALUES}\n                        role={this.props.role}\n                        parentRole={this.props.parentRole}\n                        scope={this.props.scope}\n                        combined={false}\n                        onChange={this.toggleGroup}\n                        root={true}\n                    />\n                </div>\n                <EditPostTimeLimitModal\n                    onClose={this.closePostTimeLimitModal}\n                    show={this.state.editTimeLimitModalIsVisible}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport PermissionsTree from './permissions_tree.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        config,\n    };\n}\n\nexport default connect(mapStateToProps)(PermissionsTree);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport PermissionGroup from '../permission_group.jsx';\n\nimport EditPostTimeLimitButton from '../edit_post_time_limit_button';\nimport EditPostTimeLimitModal from '../edit_post_time_limit_modal';\n\nexport default class GuestPermissionsTree extends React.Component {\n    static propTypes = {\n        scope: PropTypes.string.isRequired,\n        role: PropTypes.object.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        parentRole: PropTypes.object,\n        selected: PropTypes.string,\n        selectRow: PropTypes.func.isRequired,\n        readOnly: PropTypes.bool,\n    };\n\n    static defaultProps = {\n        role: {\n            permissions: [],\n        },\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            editTimeLimitModalIsVisible: false,\n        };\n\n        this.ADDITIONAL_VALUES = {\n            edit_post: {\n                editTimeLimitButton: <EditPostTimeLimitButton onClick={this.openPostTimeLimitModal}/>,\n            },\n        };\n\n        this.permissions = [\n            Permissions.CREATE_PRIVATE_CHANNEL,\n            Permissions.EDIT_POST,\n            Permissions.DELETE_POST,\n            {\n                id: 'reactions',\n                combined: true,\n                permissions: [\n                    Permissions.ADD_REACTION,\n                    Permissions.REMOVE_REACTION,\n                ],\n            },\n        ];\n    }\n\n    openPostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: true});\n    }\n\n    closePostTimeLimitModal = () => {\n        this.setState({editTimeLimitModalIsVisible: false});\n    }\n\n    toggleGroup = (ids) => {\n        if (this.props.readOnly) {\n            return;\n        }\n        this.props.onToggle(this.props.role.name, ids);\n    }\n\n    render = () => {\n        return (\n            <div className='permissions-tree guest'>\n                <div className='permissions-tree--header'>\n                    <div className='permission-name'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.permission'\n                            defaultMessage='Permission'\n                        />\n                    </div>\n                    <div className='permission-description'>\n                        <FormattedMessage\n                            id='admin.permissions.permissionsTree.description'\n                            defaultMessage='Description'\n                        />\n                    </div>\n                </div>\n                <div className='permissions-tree--body'>\n                    <PermissionGroup\n                        key='all'\n                        id='all'\n                        uniqId={this.props.role.name}\n                        selected={this.props.selected}\n                        selectRow={this.props.selectRow}\n                        readOnly={this.props.readOnly}\n                        permissions={this.permissions}\n                        additionalValues={this.ADDITIONAL_VALUES}\n                        role={this.props.role}\n                        parentRole={this.props.parentRole}\n                        scope={this.props.scope}\n                        combined={false}\n                        onChange={this.toggleGroup}\n                        root={true}\n                    />\n                </div>\n                <EditPostTimeLimitModal\n                    onClose={this.closePostTimeLimitModal}\n                    show={this.state.editTimeLimitModalIsVisible}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport GuestPermissionsTree from './guest_permissions_tree.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    return {\n        config,\n    };\n}\n\nexport default connect(mapStateToProps)(GuestPermissionsTree);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\nimport GeneralConstants from 'mattermost-redux/constants/general';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport {PermissionsScope, DefaultRolePermissions} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SaveButton from 'components/save_button';\nimport LoadingScreen from 'components/loading_screen';\nimport FormError from 'components/form_error';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport AdminPanelTogglable from 'components/widgets/admin_console/admin_panel_togglable';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree';\nimport GuestPermissionsTree from '../guest_permissions_tree';\n\nconst EXCLUDED_PERMISSIONS = [\n    Permissions.VIEW_MEMBERS,\n    Permissions.JOIN_PUBLIC_TEAMS,\n    Permissions.LIST_PUBLIC_TEAMS,\n    Permissions.JOIN_PRIVATE_TEAMS,\n    Permissions.LIST_PRIVATE_TEAMS,\n];\n\nconst GUEST_INCLUDED_PERMISSIONS = [\n    Permissions.CREATE_PRIVATE_CHANNEL,\n    Permissions.EDIT_POST,\n    Permissions.DELETE_POST,\n    Permissions.ADD_REACTION,\n    Permissions.REMOVE_REACTION,\n];\n\nexport default class PermissionSystemSchemeSettings extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        roles: PropTypes.object.isRequired,\n        license: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showResetDefaultModal: false,\n            loaded: false,\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: {},\n            openRoles: {\n                guests: true,\n                all_users: true,\n                system_admin: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n        this.rolesNeeded = [\n            GeneralConstants.SYSTEM_ADMIN_ROLE,\n            GeneralConstants.SYSTEM_USER_ROLE,\n            GeneralConstants.TEAM_ADMIN_ROLE,\n            GeneralConstants.TEAM_USER_ROLE,\n            GeneralConstants.CHANNEL_ADMIN_ROLE,\n            GeneralConstants.CHANNEL_USER_ROLE,\n            GeneralConstants.SYSTEM_GUEST_ROLE,\n            GeneralConstants.TEAM_GUEST_ROLE,\n            GeneralConstants.CHANNEL_GUEST_ROLE,\n        ];\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(this.rolesNeeded);\n        if (this.rolesNeeded.every((roleName) => this.props.roles[roleName])) {\n            this.loadRolesIntoState(this.props);\n        }\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if (!this.state.loaded && this.rolesNeeded.every((roleName) => nextProps.roles[roleName])) {\n            this.loadRolesIntoState(nextProps);\n        }\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    loadRolesIntoState(props) {\n        const {system_admin, team_admin, channel_admin, system_user, team_user, channel_user, system_guest, team_guest, channel_guest} = props.roles; // eslint-disable-line camelcase, @typescript-eslint/camelcase\n        this.setState({\n            selectedPermission: null,\n            loaded: true,\n            roles: {\n                system_admin,\n                team_admin,\n                channel_admin,\n                all_users: {\n                    name: 'all_users',\n                    displayName: 'All members',\n                    permissions: system_user.permissions.concat(team_user.permissions).concat(channel_user.permissions),\n                },\n                guests: {\n                    name: 'guests',\n                    displayName: 'Guests',\n                    permissions: system_guest.permissions.concat(team_guest.permissions).concat(channel_guest.permissions),\n                },\n            },\n        });\n    }\n\n    deriveRolesFromAllUsers = (role) => {\n        return {\n            system_user: {\n                ...this.props.roles.system_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'system_scope'),\n            },\n            team_user: {\n                ...this.props.roles.team_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...this.props.roles.channel_user,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    deriveRolesFromGuests = (role) => {\n        return {\n            system_guest: {\n                ...this.props.roles.system_guest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'system_scope'),\n            },\n            team_guest: {\n                ...this.props.roles.team_guest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_guest: {\n                ...this.props.roles.channel_guest,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    restoreExcludedPermissions = (roles) => {\n        for (const permission of this.props.roles.system_user.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.system_user.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.team_user.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.team_user.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.channel_user.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.channel_user.permissions.push(permission);\n            }\n        }\n        return roles;\n    }\n\n    restoreGuestPermissions = (roles) => {\n        for (const permission of this.props.roles.system_guest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.system_guest.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.team_guest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.team_guest.permissions.push(permission);\n            }\n        }\n        for (const permission of this.props.roles.channel_guest.permissions) {\n            if (!GUEST_INCLUDED_PERMISSIONS.includes(permission)) {\n                roles.channel_guest.permissions.push(permission);\n            }\n        }\n        return roles;\n    }\n\n    handleSubmit = async () => {\n        const teamAdminPromise = this.props.actions.editRole(this.state.roles.team_admin);\n        const channelAdminPromise = this.props.actions.editRole(this.state.roles.channel_admin);\n        const roles = this.restoreExcludedPermissions(this.deriveRolesFromAllUsers(this.state.roles.all_users));\n        const guestRoles = this.restoreGuestPermissions(this.deriveRolesFromGuests(this.state.roles.guests));\n        const systemUserPromise = this.props.actions.editRole(roles.system_user);\n        const teamUserPromise = this.props.actions.editRole(roles.team_user);\n        const channelUserPromise = this.props.actions.editRole(roles.channel_user);\n\n        const promises = [teamAdminPromise, channelAdminPromise, systemUserPromise, teamUserPromise, channelUserPromise];\n\n        if (this.haveGuestAccountsPermissions()) {\n            const systemGuestPromise = this.props.actions.editRole(guestRoles.system_guest);\n            const teamGuestPromise = this.props.actions.editRole(guestRoles.team_guest);\n            const channelGuestPromise = this.props.actions.editRole(guestRoles.channel_guest);\n            promises.push(systemGuestPromise, teamGuestPromise, channelGuestPromise);\n        }\n\n        this.setState({saving: true});\n\n        const results = await Promise.all(promises);\n        let serverError = null;\n        let saveNeeded = false;\n        for (const result of results) {\n            if (result.error) {\n                serverError = result.error.message;\n                saveNeeded = true;\n                break;\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        this.props.actions.setNavigationBlocked(saveNeeded);\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.state.roles};\n        const role = {...roles[roleId]};\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        roles[roleId] = role;\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    resetDefaults = () => {\n        const newRolesState = JSON.parse(JSON.stringify({...this.state.roles}));\n\n        Object.entries(DefaultRolePermissions).forEach(([roleName, permissions]) => {\n            newRolesState[roleName].permissions = permissions;\n        });\n\n        this.setState({roles: newRolesState, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    haveGuestAccountsPermissions = () => {\n        return this.props.license.GuestAccountsPermissions === 'true';\n    }\n\n    render = () => {\n        if (!this.state.loaded) {\n            return <LoadingScreen/>;\n        }\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/permissions'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme'\n                            defaultMessage='System Scheme'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className={'banner info'}>\n                            <div className='banner__content'>\n                                <span>\n                                    <FormattedMarkdownMessage\n                                        id='admin.permissions.systemScheme.introBanner'\n                                        defaultMessage='Configure the default permissions for Team Admins, Channel Admins and other members. This scheme is inherited by all teams unless a [Team Override Scheme](!https://about.mattermost.com/default-team-override-scheme) is applied in specific teams.'\n                                    />\n                                </span>\n                            </div>\n                        </div>\n\n                        {this.props.license && this.props.config.EnableGuestAccounts === 'true' &&\n                            <AdminPanelTogglable\n                                className='permissions-block'\n                                open={this.state.openRoles.guests}\n                                id='all_users'\n                                onToggle={() => this.toggleRole('guests')}\n                                titleId={t('admin.permissions.systemScheme.GuestsTitle')}\n                                titleDefault='Guests'\n                                subtitleId={t('admin.permissions.systemScheme.GuestsDescription')}\n                                subtitleDefault='Permissions granted to guest users.'\n                            >\n                                <GuestPermissionsTree\n                                    selected={this.state.selectedPermission}\n                                    role={this.state.roles.guests}\n                                    scope={'system_scope'}\n                                    onToggle={this.togglePermission}\n                                    selectRow={this.selectRow}\n                                    readOnly={!this.haveGuestAccountsPermissions()}\n                                />\n                            </AdminPanelTogglable>}\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.all_users}\n                            id='all_users'\n                            onToggle={() => this.toggleRole('all_users')}\n                            titleId={t('admin.permissions.systemScheme.allMembersTitle')}\n                            titleDefault='All Members'\n                            subtitleId={t('admin.permissions.systemScheme.allMembersDescription')}\n                            subtitleDefault='Permissions granted to all members, including administrators and newly created users.'\n                        >\n                            <PermissionsTree\n                                selected={this.state.selectedPermission}\n                                role={this.state.roles.all_users}\n                                scope={'system_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.channel_admin}\n                            onToggle={() => this.toggleRole('channel_admin')}\n                            titleId={t('admin.permissions.systemScheme.channelAdminsTitle')}\n                            titleDefault='Channel Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.channelAdminsDescription')}\n                            subtitleDefault='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                        >\n                            <PermissionsTree\n                                parentRole={this.state.roles.all_users}\n                                role={this.state.roles.channel_admin}\n                                scope={'channel_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.team_admin}\n                            onToggle={() => this.toggleRole('team_admin')}\n                            titleId={t('admin.permissions.systemScheme.teamAdminsTitle')}\n                            titleDefault='Team Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.teamAdminsDescription')}\n                            subtitleDefault='Permissions granted to team creators and any users promoted to Team Administrator.'\n                        >\n                            <PermissionsTree\n                                parentRole={this.state.roles.all_users}\n                                role={this.state.roles.team_admin}\n                                scope={'team_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block'\n                            open={this.state.openRoles.system_admin}\n                            onToggle={() => this.toggleRole('system_admin')}\n                            titleId={t('admin.permissions.systemScheme.systemAdminsTitle')}\n                            titleDefault='System Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.systemAdminsDescription')}\n                            subtitleDefault='Full permissions granted to System Administrators.'\n                        >\n                            <PermissionsTree\n                                readOnly={true}\n                                role={this.state.roles.system_admin}\n                                scope={'system_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n                    </div>\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/user_management/permissions'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <a\n                        onClick={() => this.setState({showResetDefaultModal: true})}\n                        className='cancel-button reset-defaults-btn'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButton'\n                            defaultMessage='Reset to Defaults'\n                        />\n                    </a>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n\n                <ConfirmModal\n                    show={this.state.showResetDefaultModal}\n                    title={\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButtonModalTitle'\n                            defaultMessage='Reset to Default?'\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsButtonModalBody'\n                            defaultMessage='This will reset all selections on this page to their default settings. Are you sure you want to reset?'\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='admin.permissions.systemScheme.resetDefaultsConfirmationButton'\n                            defaultMessage='Yes, Reset'\n                        />\n                    }\n                    onConfirm={() => {\n                        this.resetDefaults();\n                        this.setState({showResetDefaultModal: false});\n                    }}\n                    onCancel={() => this.setState({showResetDefaultModal: false})}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {getLicense, getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionSystemSchemeSettings from './permission_system_scheme_settings.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        config: getConfig(state),\n        license: getLicense(state),\n        roles: getRoles(state),\n        rolesRequest: state.requests.roles.getRolesByNames,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            editRole,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PermissionSystemSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants, {ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {imageURLForTeam} from 'utils/utils';\n\nconst TEAMS_PER_PAGE = 50;\n\nexport default class TeamSelectorModal extends React.Component {\n    static propTypes = {\n        currentSchemeId: PropTypes.string,\n        alreadySelected: PropTypes.array,\n        searchTerm: PropTypes.string.isRequired,\n        teams: PropTypes.array.isRequired,\n        onModalDismissed: PropTypes.func,\n        onTeamsSelected: PropTypes.func,\n        modalID: PropTypes.string,\n        actions: PropTypes.shape({\n            loadTeams: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            searchTeams: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            loadingTeams: true,\n            confirmAddModal: false,\n            confirmAddTeam: null,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.loadTeams(0, TEAMS_PER_PAGE + 1).then(() => {\n            this.setTeamsLoadingState(false);\n        });\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        if (this.props.searchTerm !== nextProps.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = nextProps.searchTerm;\n            if (searchTerm === '') {\n                return;\n            }\n\n            this.searchTimeoutId = setTimeout(\n                async () => {\n                    this.setTeamsLoadingState(true);\n                    await this.props.actions.searchTeams(searchTerm);\n                    this.setTeamsLoadingState(false);\n                },\n                Constants.SEARCH_TIMEOUT_MILLISECONDS\n            );\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.state.values.length === 0) {\n            return;\n        }\n\n        this.props.onTeamsSelected(this.state.values);\n        this.handleHide();\n    }\n\n    addValue = (value, confirmed = false) => {\n        if (this.props.modalID === ModalIdentifiers.ADD_TEAMS_TO_SCHEME && value.scheme_id !== null && value.scheme_id !== '' && !confirmed) {\n            this.setState({confirmAddModal: true, confirmAddTeam: value});\n            return;\n        }\n        const values = Object.assign([], this.state.values);\n        const teamIds = values.map((v) => v.id);\n        if (value && value.id && teamIds.indexOf(value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values, confirmAddModal: false, confirmAddTeam: null});\n    }\n\n    setTeamsLoadingState = (loadingState) => {\n        this.setState({\n            loadingTeams: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setTeamsLoadingState(true);\n            this.props.actions.loadTeams(page, TEAMS_PER_PAGE + 1).then(() => {\n                this.setTeamsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term, multiselectComponent) => {\n        if (multiselectComponent.state.page !== 0) {\n            multiselectComponent.setState({page: 0});\n        }\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd, onMouseMove) {\n        var rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <div\n                    className='more-modal__details'\n                >\n                    <div className='team-info-block'>\n                        <TeamIcon\n                            name={option.display_name}\n                            url={imageURLForTeam(option)}\n                        />\n                        <div className='team-data'>\n                            <div className='title'>{option.display_name}</div>\n                        </div>\n                    </div>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.display_name;\n    }\n\n    renderConfirmModal(show, team) {\n        const title = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.title'\n                defaultMessage='Team Override Scheme Change?'\n            />\n        );\n        const message = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.message'\n                defaultMessage='This team is already selected in another team scheme, are you sure you want to move it to this team scheme?'\n            />\n        );\n        const confirmButtonText = (\n            <FormattedMessage\n                id='add_teams_to_scheme.confirmation.accept'\n                defaultMessage='Yes, Move Team'\n            />\n        );\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButtonText}\n                onCancel={() => this.setState({confirmAddModal: false, confirmAddTeam: null})}\n                onConfirm={() => this.addValue(team, true)}\n            />\n        );\n    }\n\n    render() {\n        const confirmModal = this.renderConfirmModal(this.state.confirmAddModal, this.state.confirmAddTeam);\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.selectTeams'\n                defaultMessage='Use ↑↓ to browse, ↵ to select.'\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n\n        let teams = [];\n        if (this.props.teams) {\n            teams = this.props.teams.filter((team) => team.delete_at === 0);\n            teams = teams.filter((team) => team.scheme_id !== this.currentSchemeId);\n            teams = teams.filter((team) => this.props.alreadySelected.indexOf(team.id) === -1);\n            teams.sort((a, b) => {\n                const aName = a.display_name.toUpperCase();\n                const bName = b.display_name.toUpperCase();\n                if (aName === bName) {\n                    return 0;\n                }\n                if (aName > bName) {\n                    return 1;\n                }\n                return -1;\n            });\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal more-modal more-direct-channels team-selector-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='teamSelectorModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='teamSelectorModalLabel'\n                    >\n                        <FormattedMarkdownMessage\n                            id='add_teams_to_scheme.title'\n                            defaultMessage='Add Teams To **Team Selection** List'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {confirmModal}\n                    <MultiSelect\n                        key='addTeamsToSchemeKey'\n                        options={teams}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={TEAMS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        saving={false}\n                        loading={this.state.loadingTeams}\n                        placeholderText={localizeMessage('multiselect.addTeamsPlaceholder', 'Search and add teams')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getTeams as loadTeams, searchTeams} from 'mattermost-redux/actions/teams';\nimport {getTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport TeamSelectorModal from './team_selector_modal.jsx';\n\nfunction mapStateToProps(state) {\n    const searchTerm = state.views.search.modalSearch;\n\n    const teams = Object.values(getTeams(state) || {}).filter((team) => {\n        return team.display_name.toLowerCase().startsWith(searchTerm.toLowerCase()) ||\n               team.description.toLowerCase().startsWith(searchTerm.toLowerCase());\n    });\n\n    return {\n        searchTerm,\n        teams,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeams,\n            setModalSearchTerm,\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamSelectorModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport AdminPanel from './admin_panel';\n\ntype Props = {\n    children?: React.ReactNode;\n    className: string;\n    id?: string;\n    titleId: string;\n    titleDefault: string;\n    subtitleId: string;\n    subtitleDefault: string;\n    onButtonClick?: React.EventHandler<React.MouseEvent>;\n    disabled?: boolean;\n    buttonTextId?: string;\n    buttonTextDefault?: string;\n}\n\nconst AdminPanelWithButton: React.FC<Props> = (props: Props) => {\n    let button;\n    if (props.onButtonClick && props.buttonTextId) {\n        button = (\n            <a\n                className='btn btn-primary'\n                onClick={props.disabled ? (e) => e.preventDefault() : props.onButtonClick}\n            >\n                <FormattedMessage\n                    id={props.buttonTextId}\n                    defaultMessage={props.buttonTextDefault}\n                />\n            </a>\n        );\n    }\n\n    return (\n        <AdminPanel\n            className={'AdminPanelWithButton ' + props.className}\n            id={props.id}\n            titleId={props.titleId}\n            titleDefault={props.titleDefault}\n            subtitleId={props.subtitleId}\n            subtitleDefault={props.subtitleDefault}\n            button={button}\n        >\n            {props.children}\n        </AdminPanel>\n    );\n};\n\nAdminPanelWithButton.defaultProps = {\n    className: '',\n};\n\nexport default AdminPanelWithButton;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport {imageURLForTeam} from 'utils/utils';\n\nexport default class TeamInList extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onRemoveTeam: PropTypes.func,\n    }\n\n    render() {\n        const team = this.props.team;\n        return (\n            <div\n                className='team'\n                key={team.id}\n            >\n                <div className='team-info-block'>\n                    <TeamIcon\n                        name={team.display_name}\n                        url={imageURLForTeam(team)}\n                    />\n                    <div className='team-data'>\n                        <div className='title'>{team.display_name}</div>\n                    </div>\n                </div>\n                <a\n                    className='remove'\n                    onClick={() => this.props.onRemoveTeam(team.id)}\n                >\n                    <FormattedMessage\n                        id='admin.permissions.teamScheme.removeTeam'\n                        defaultMessage='Remove'\n                    />\n                </a>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeamStats as loadTeamStats} from 'mattermost-redux/actions/teams';\n\nimport {getTeamStats} from 'mattermost-redux/selectors/entities/teams';\n\nimport TeamInList from './team_in_list.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        stats: getTeamStats(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadTeamStats,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamInList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport Permissions from 'mattermost-redux/constants/permissions';\n\nimport {PermissionsScope, ModalIdentifiers} from 'utils/constants';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport SaveButton from 'components/save_button';\nimport LoadingScreen from 'components/loading_screen';\nimport FormError from 'components/form_error';\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport AdminPanelTogglable from 'components/widgets/admin_console/admin_panel_togglable';\nimport AdminPanelWithButton from 'components/widgets/admin_console/admin_panel_with_button';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport PermissionsTree from '../permissions_tree';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\n\nimport TeamInList from './team_in_list';\n\nconst EXCLUDED_PERMISSIONS = [\n    Permissions.VIEW_MEMBERS,\n    Permissions.JOIN_PUBLIC_TEAMS,\n    Permissions.LIST_PUBLIC_TEAMS,\n    Permissions.JOIN_PRIVATE_TEAMS,\n    Permissions.LIST_PRIVATE_TEAMS,\n];\n\nexport default class PermissionTeamSchemeSettings extends React.Component {\n    static propTypes = {\n        schemeId: PropTypes.string,\n        scheme: PropTypes.object,\n        roles: PropTypes.object,\n        teams: PropTypes.array,\n        actions: PropTypes.shape({\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            loadScheme: PropTypes.func.isRequired,\n            loadSchemeTeams: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            patchScheme: PropTypes.func.isRequired,\n            createScheme: PropTypes.func.isRequired,\n            updateTeamScheme: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            saving: false,\n            saveNeeded: false,\n            serverError: null,\n            roles: null,\n            teams: null,\n            addTeamOpen: false,\n            selectedPermission: null,\n            openRoles: {\n                all_users: true,\n                team_admin: true,\n                channel_admin: true,\n            },\n        };\n    }\n\n    static defaultProps = {\n        scheme: null,\n    }\n\n    componentDidMount() {\n        this.props.actions.loadRolesIfNeeded(['team_admin', 'team_user', 'channel_admin', 'channel_user']);\n        if (this.props.schemeId) {\n            this.props.actions.loadScheme(this.props.schemeId).then((result) => {\n                this.props.actions.loadRolesIfNeeded([\n                    result.data.default_team_user_role,\n                    result.data.default_team_admin_role,\n                    result.data.default_channel_user_role,\n                    result.data.default_channel_admin_role,\n                ]);\n            });\n            this.props.actions.loadSchemeTeams(this.props.schemeId);\n        }\n    }\n\n    isLoaded = (props) => {\n        if (props.schemeId) {\n            if (props.scheme !== null &&\n                props.teams !== null &&\n                props.roles[props.scheme.default_team_user_role] &&\n                props.roles[props.scheme.default_team_admin_role] &&\n                props.roles[props.scheme.default_channel_user_role] &&\n                props.roles[props.scheme.default_channel_admin_role]) {\n                return true;\n            }\n            return false;\n        } else if (props.roles.team_user &&\n            props.roles.team_admin &&\n            props.roles.channel_user &&\n            props.roles.channel_admin) {\n            return true;\n        }\n        return false;\n    }\n\n    goToSelectedRow = () => {\n        const selected = document.querySelector('.permission-row.selected,.permission-group-row.selected');\n        if (selected) {\n            if (this.state.openRoles.all_users) {\n                selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n            } else {\n                this.toggleRole('all_users');\n\n                // Give it time to open and show everything\n                setTimeout(() => {\n                    selected.scrollIntoView({behavior: 'smooth', block: 'center'});\n                }, 300);\n            }\n            return true;\n        }\n        return false;\n    }\n\n    selectRow = (permission) => {\n        this.setState({selectedPermission: permission});\n\n        // Wait until next render\n        setTimeout(this.goToSelectedRow);\n\n        // Remove selection after animation\n        setTimeout(() => {\n            this.setState({selectedPermission: null});\n        }, 3000);\n    }\n\n    getStateRoles = () => {\n        if (this.state.roles !== null) {\n            return this.state.roles;\n        }\n\n        let teamUser = null;\n        let teamAdmin = null;\n        let channelUser = null;\n        let channelAdmin = null;\n\n        if (this.props.schemeId) {\n            if (this.isLoaded(this.props)) {\n                teamUser = this.props.roles[this.props.scheme.default_team_user_role];\n                teamAdmin = this.props.roles[this.props.scheme.default_team_admin_role];\n                channelUser = this.props.roles[this.props.scheme.default_channel_user_role];\n                channelAdmin = this.props.roles[this.props.scheme.default_channel_admin_role];\n            }\n        } else if (this.isLoaded(this.props)) {\n            teamUser = this.props.roles.team_user;\n            teamAdmin = this.props.roles.team_admin;\n            channelUser = this.props.roles.channel_user;\n            channelAdmin = this.props.roles.channel_admin;\n        } else {\n            return null;\n        }\n        return {\n            team_admin: teamAdmin,\n            channel_admin: channelAdmin,\n            all_users: {\n                name: 'all_users',\n                displayName: 'All members',\n                permissions: teamUser.permissions.concat(channelUser.permissions),\n            },\n        };\n    }\n\n    deriveRolesFromAllUsers = (baseTeam, baseChannel, role) => {\n        return {\n            team_user: {\n                ...baseTeam,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'team_scope'),\n            },\n            channel_user: {\n                ...baseChannel,\n                permissions: role.permissions.filter((p) => PermissionsScope[p] === 'channel_scope'),\n            },\n        };\n    }\n\n    restoreExcludedPermissions = (baseTeam, baseChannel, roles) => {\n        for (const permission of baseTeam.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.team_user.permissions.push(permission);\n            }\n        }\n        for (const permission of baseChannel.permissions) {\n            if (EXCLUDED_PERMISSIONS.includes(permission)) {\n                roles.channel_user.permissions.push(permission);\n            }\n        }\n        return roles;\n    }\n\n    handleNameChange = (e) => {\n        this.setState({schemeName: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleDescriptionChange = (e) => {\n        this.setState({schemeDescription: e.target.value, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    handleSubmit = async () => {\n        const roles = this.getStateRoles();\n        let teamAdmin = roles.team_admin;\n        let channelAdmin = roles.channel_admin;\n        const allUsers = roles.all_users;\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        let teamUser = null;\n        let channelUser = null;\n        let schemeId = null;\n\n        this.setState({saving: true});\n        if (this.props.schemeId) {\n            let derived = this.deriveRolesFromAllUsers(\n                this.props.roles[this.props.scheme.default_team_user_role],\n                this.props.roles[this.props.scheme.default_channel_user_role],\n                allUsers\n            );\n            derived = this.restoreExcludedPermissions(\n                this.props.roles[this.props.scheme.default_team_user_role],\n                this.props.roles[this.props.scheme.default_channel_user_role],\n                derived\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            await this.props.actions.patchScheme(this.props.schemeId, {\n                display_name: schemeName,\n                description: schemeDescription,\n            });\n            schemeId = this.props.schemeId;\n        } else {\n            let derived = this.deriveRolesFromAllUsers(\n                this.props.roles.team_user,\n                this.props.roles.channel_user,\n                allUsers\n            );\n            derived = this.restoreExcludedPermissions(\n                this.props.roles.team_user,\n                this.props.roles.channel_user,\n                derived\n            );\n            teamUser = derived.team_user;\n            channelUser = derived.channel_user;\n            const result = await this.props.actions.createScheme({\n                display_name: schemeName,\n                description: schemeDescription,\n                scope: 'team',\n            });\n            if (result.error) {\n                this.setState({serverError: result.error.message, saving: false, saveNeeded: true});\n                this.props.actions.setNavigationBlocked(true);\n                return;\n            }\n            const newScheme = result.data;\n            schemeId = newScheme.id;\n            await this.props.actions.loadRolesIfNeeded([\n                newScheme.default_team_user_role,\n                newScheme.default_team_admin_role,\n                newScheme.default_channel_user_role,\n                newScheme.default_channel_admin_role,\n            ]);\n            teamUser = {...teamUser, id: this.props.roles[newScheme.default_team_user_role].id};\n            teamAdmin = {...teamAdmin, id: this.props.roles[newScheme.default_team_admin_role].id};\n            channelUser = {...channelUser, id: this.props.roles[newScheme.default_channel_user_role].id};\n            channelAdmin = {...channelAdmin, id: this.props.roles[newScheme.default_channel_admin_role].id};\n        }\n\n        const teamAdminPromise = this.props.actions.editRole(teamAdmin);\n        const channelAdminPromise = this.props.actions.editRole(channelAdmin);\n        const teamUserPromise = this.props.actions.editRole(teamUser);\n        const channelUserPromise = this.props.actions.editRole(channelUser);\n\n        const teamEditPromises = [];\n\n        const currentTeams = new Set((this.state.teams || this.props.teams || []).map((team) => team.id));\n        const serverTeams = new Set((this.props.teams || []).map((team) => team.id));\n\n        // Difference of sets (currentTeams - serverTeams)\n        const addedTeams = new Set([...currentTeams].filter((team) => !serverTeams.has(team)));\n\n        // Difference of sets (serverTeams - currentTeams)\n        const removedTeams = new Set([...serverTeams].filter((team) => !currentTeams.has(team)));\n\n        for (const teamId of addedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, schemeId));\n        }\n\n        for (const teamId of removedTeams) {\n            teamEditPromises.push(this.props.actions.updateTeamScheme(teamId, ''));\n        }\n\n        const results = await Promise.all([teamAdminPromise, channelAdminPromise, teamUserPromise, channelUserPromise, ...teamEditPromises]);\n\n        let serverError = null;\n        let saveNeeded = false;\n        for (const result of results) {\n            if (result.error) {\n                serverError = result.error.message;\n                saveNeeded = true;\n                break;\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        this.props.actions.setNavigationBlocked(saveNeeded);\n        this.props.history.push('/admin_console/user_management/permissions');\n    }\n\n    toggleRole = (roleId) => {\n        const newOpenRoles = {...this.state.openRoles};\n        newOpenRoles[roleId] = !newOpenRoles[roleId];\n        this.setState({openRoles: newOpenRoles});\n    }\n\n    togglePermission = (roleId, permissions) => {\n        const roles = {...this.getStateRoles()};\n        let role = null;\n        if (roles.team_admin.name === roleId) {\n            role = {...roles.team_admin};\n        } else if (roles.channel_admin.name === roleId) {\n            role = {...roles.channel_admin};\n        } else if (roles.all_users.name === roleId) {\n            role = {...roles.all_users};\n        }\n        const newPermissions = [...role.permissions];\n        for (const permission of permissions) {\n            if (newPermissions.indexOf(permission) === -1) {\n                newPermissions.push(permission);\n            } else {\n                newPermissions.splice(newPermissions.indexOf(permission), 1);\n            }\n        }\n        role.permissions = newPermissions;\n        if (roles.team_admin.name === roleId) {\n            roles.team_admin = role;\n        } else if (roles.channel_admin.name === roleId) {\n            roles.channel_admin = role;\n        } else if (roles.all_users.name === roleId) {\n            roles.all_users = role;\n        }\n\n        this.setState({roles, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    removeTeam = (teamId) => {\n        const teams = (this.state.teams || this.props.teams).filter((team) => team.id !== teamId);\n        this.setState({teams, saveNeeded: true});\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    addTeams = (teams) => {\n        const currentTeams = this.state.teams || this.props.teams || [];\n        this.setState({\n            teams: [...currentTeams, ...teams],\n            saveNeeded: true,\n        });\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    render = () => {\n        if (!this.isLoaded(this.props)) {\n            return <LoadingScreen/>;\n        }\n        const roles = this.getStateRoles();\n        const teams = this.state.teams || this.props.teams || [];\n        const schemeName = this.state.schemeName || (this.props.scheme && this.props.scheme.display_name) || '';\n        const schemeDescription = this.state.schemeDescription || (this.props.scheme && this.props.scheme.description) || '';\n        return (\n            <div className='wrapper--fixed'>\n                {this.state.addTeamOpen &&\n                    <TeamSelectorModal\n                        modalID={ModalIdentifiers.ADD_TEAMS_TO_SCHEME}\n                        onModalDismissed={this.closeAddTeam}\n                        onTeamsSelected={this.addTeams}\n                        currentSchemeId={this.props.schemeId}\n                        alreadySelected={teams.map((team) => team.id)}\n                    />\n                }\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/permissions'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.permissions.teamScheme'\n                            defaultMessage='Team Scheme'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className={'banner info'}>\n                            <div className='banner__content'>\n                                <span>\n                                    <FormattedMarkdownMessage\n                                        id='admin.permissions.teamScheme.introBanner'\n                                        defaultMessage='[Team Override Schemes](!https://about.mattermost.com/default-team-override-scheme) set the permissions for Team Admins, Channel Admins and other members in specific teams. Use a Team Override Scheme when specific teams need permission exceptions to the [System Scheme](!https://about.mattermost.com/default-system-scheme).'\n                                    />\n                                </span>\n                            </div>\n                        </div>\n\n                        <AdminPanel\n                            titleId={t('admin.permissions.teamScheme.schemeDetailsTitle')}\n                            titleDefault='Scheme Details'\n                            subtitleId={t('admin.permissions.teamScheme.schemeDetailsDescription')}\n                            subtitleDefault='Set the name and description for this scheme.'\n                        >\n                            <div className='team-scheme-details'>\n                                <div className='form-group'>\n                                    <label\n                                        className='control-label'\n                                        htmlFor='scheme-name'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.permissions.teamScheme.schemeNameLabel'\n                                            defaultMessage='Scheme Name:'\n                                        />\n                                    </label>\n                                    <LocalizedInput\n                                        id='scheme-name'\n                                        className='form-control'\n                                        type='text'\n                                        value={schemeName}\n                                        placeholder={{id: t('admin.permissions.teamScheme.schemeNamePlaceholder'), defaultMessage: 'Scheme Name'}}\n                                        onChange={this.handleNameChange}\n                                    />\n                                </div>\n                                <div className='form-group'>\n                                    <label\n                                        className='control-label'\n                                        htmlFor='scheme-description'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.permissions.teamScheme.schemeDescriptionLabel'\n                                            defaultMessage='Scheme Description:'\n                                        />\n                                    </label>\n                                    <textarea\n                                        id='scheme-description'\n                                        className='form-control'\n                                        rows='5'\n                                        value={schemeDescription}\n                                        placeholder={localizeMessage('admin.permissions.teamScheme.schemeDescriptionPlaceholder', 'Scheme Description')}\n                                        onChange={this.handleDescriptionChange}\n                                    />\n                                </div>\n                            </div>\n                        </AdminPanel>\n\n                        <AdminPanelWithButton\n                            className='permissions-block'\n                            titleId={t('admin.permissions.teamScheme.selectTeamsTitle')}\n                            titleDefault='Select teams to override permissions'\n                            subtitleId={t('admin.permissions.teamScheme.selectTeamsDescription')}\n                            subtitleDefault='Select teams where permission exceptions are required.'\n                            onButtonClick={this.openAddTeam}\n                            buttonTextId={t('admin.permissions.teamScheme.addTeams')}\n                            buttonTextDefault='Add Teams'\n                        >\n                            <div className='teams-list'>\n                                {teams.length === 0 &&\n                                    <div className='no-team-schemes'>\n                                        <FormattedMessage\n                                            id='admin.permissions.teamScheme.noTeams'\n                                            defaultMessage='No team selected. Please add teams to this list.'\n                                        />\n                                    </div>}\n                                {teams.map((team) => (\n                                    <TeamInList\n                                        key={team.id}\n                                        team={team}\n                                        onRemoveTeam={this.removeTeam}\n                                    />\n                                ))}\n                            </div>\n                        </AdminPanelWithButton>\n\n                        <AdminPanelTogglable\n                            className='permissions-block all_users'\n                            open={this.state.openRoles.all_users}\n                            id='all_users'\n                            onToggle={() => this.toggleRole('all_users')}\n                            titleId={t('admin.permissions.systemScheme.allMembersTitle')}\n                            titleDefault='All Members'\n                            subtitleId={t('admin.permissions.systemScheme.allMembersDescription')}\n                            subtitleDefault='Permissions granted to all members, including administrators and newly created users.'\n                        >\n                            <PermissionsTree\n                                selected={this.state.selectedPermission}\n                                role={roles.all_users}\n                                scope={'team_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block channel_admin'\n                            open={this.state.openRoles.channel_admin}\n                            onToggle={() => this.toggleRole('channel_admin')}\n                            titleId={t('admin.permissions.systemScheme.channelAdminsTitle')}\n                            titleDefault='Channel Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.channelAdminsDescription')}\n                            subtitleDefault='Permissions granted to channel creators and any users promoted to Channel Administrator.'\n                        >\n                            <PermissionsTree\n                                parentRole={roles.all_users}\n                                role={roles.channel_admin}\n                                scope={'channel_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n\n                        <AdminPanelTogglable\n                            className='permissions-block team_admin'\n                            open={this.state.openRoles.team_admin}\n                            onToggle={() => this.toggleRole('team_admin')}\n                            titleId={t('admin.permissions.systemScheme.teamAdminsTitle')}\n                            titleDefault='Team Administrators'\n                            subtitleId={t('admin.permissions.systemScheme.teamAdminsDescription')}\n                            subtitleDefault='Permissions granted to team creators and any users promoted to Team Administrator.'\n                        >\n                            <PermissionsTree\n                                parentRole={roles.all_users}\n                                role={roles.team_admin}\n                                scope={'team_scope'}\n                                onToggle={this.togglePermission}\n                                selectRow={this.selectRow}\n                            />\n                        </AdminPanelTogglable>\n                    </div>\n                </div>\n\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <BlockableLink\n                        className='cancel-button'\n                        to='/admin_console/user_management/permissions'\n                    >\n                        <FormattedMessage\n                            id='admin.permissions.permissionSchemes.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </BlockableLink>\n                    <div className='error-message'>\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\n\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {getScheme, makeGetSchemeTeams} from 'mattermost-redux/selectors/entities/schemes';\n\nimport {getScheme as loadScheme, patchScheme, createScheme, getSchemeTeams as loadSchemeTeams} from 'mattermost-redux/actions/schemes';\n\nimport {updateTeamScheme} from 'mattermost-redux/actions/teams';\n\nimport {setNavigationBlocked} from 'actions/admin_actions.jsx';\n\nimport PermissionTeamSchemeSettings from './permission_team_scheme_settings.jsx';\n\nfunction makeMapStateToProps() {\n    const getSchemeTeams = makeGetSchemeTeams();\n\n    return (state, ownProps) => {\n        const schemeId = ownProps.match.params.scheme_id;\n        return {\n            schemeId,\n            scheme: schemeId ? getScheme(state, schemeId) : null,\n            teams: schemeId ? getSchemeTeams(state, {schemeId}) : null,\n            roles: getRoles(state),\n            rolesRequest: state.requests.roles.getRolesByNames,\n        };\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadRolesIfNeeded,\n            loadScheme,\n            loadSchemeTeams,\n            editRole,\n            patchScheme,\n            updateTeamScheme,\n            createScheme,\n            setNavigationBlocked,\n        }, dispatch),\n    };\n}\n\nexport default connect(makeMapStateToProps, mapDispatchToProps)(PermissionTeamSchemeSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport {UserSearchOptions, UserListOptions, UserFilters} from 'utils/constants';\n\n// userSelectorOptionsFromFilter will convert a string UI filter to an options object\n// for selecting users out of redux state\n// Note: this is currently the same as getUserOptionsFromFilter but wrapped to be clear\n// that there are separate purposes (this can be used with both getProfiles and searchProfiles\n// selectors)\nexport function userSelectorOptionsFromFilter(filter) {\n    return getUserOptionsFromFilter(filter);\n}\n\n// getUserOptionsFromFilter will convert a string UI filter to an options objects\n// for an API request to the get users endpoint\nexport function getUserOptionsFromFilter(filter) {\n    const options = {};\n    if (filter === UserFilters.SYSTEM_ADMIN) {\n        options[UserListOptions.ROLE] = UserFilters.SYSTEM_ADMIN;\n    } else if (filter === UserFilters.SYSTEM_GUEST) {\n        options[UserListOptions.ROLE] = UserFilters.SYSTEM_GUEST;\n    } else if (filter === UserFilters.INACTIVE) {\n        options[UserListOptions.INACTIVE] = true;\n    }\n    return options;\n}\n\n// searchUserOptionsFromFilter will convert a string UI filter to an options objects\n// for an API request to the search users endpoint\nexport function searchUserOptionsFromFilter(filter) {\n    const options = {};\n    if (filter === UserFilters.SYSTEM_ADMIN) {\n        options[UserSearchOptions.ROLE] = UserFilters.SYSTEM_ADMIN;\n    } else if (filter === UserFilters.SYSTEM_GUEST) {\n        options[UserSearchOptions.ROLE] = UserFilters.SYSTEM_GUEST;\n    } else if (filter === UserFilters.INACTIVE) {\n        options[UserSearchOptions.ALLOW_INACTIVE] = true;\n    }\n    return options;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport {General} from 'mattermost-redux/constants';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport BotBadge from 'components/widgets/badges/bot_badge';\nimport Avatar from 'components/widgets/users/avatar';\n\nfunction getStateFromProps(props) {\n    const roles = props.user && props.user.roles ? props.user.roles : '';\n\n    return {\n        user: props.user,\n        error: null,\n        hasPostAllRole: UserUtils.hasPostAllRole(roles),\n        hasPostAllPublicRole: UserUtils.hasPostAllPublicRole(roles),\n        hasUserAccessTokenRole: UserUtils.hasUserAccessTokenRole(roles),\n        isSystemAdmin: UserUtils.isSystemAdmin(roles),\n    };\n}\n\nexport default class ManageRolesModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * Set if user access tokens are enabled\n         */\n        userAccessTokensEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to update a user's roles\n             */\n            updateUserRoles: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = getStateFromProps(props);\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const prevUser = prevState.user || {};\n        const user = nextProps.user || {};\n\n        if (prevUser.id !== user.id) {\n            return getStateFromProps(nextProps);\n        }\n        return null;\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    handleSystemAdminChange = (e) => {\n        if (e.target.name === 'systemadmin') {\n            this.setState({isSystemAdmin: true});\n        } else if (e.target.name === 'systemmember') {\n            this.setState({isSystemAdmin: false});\n        }\n    };\n\n    handleUserAccessTokenChange = (e) => {\n        this.setState({\n            hasUserAccessTokenRole: e.target.checked,\n        });\n    };\n\n    handlePostAllChange = (e) => {\n        this.setState({\n            hasPostAllRole: e.target.checked,\n        });\n    };\n\n    handlePostAllPublicChange = (e) => {\n        this.setState({\n            hasPostAllPublicRole: e.target.checked,\n        });\n    };\n\n    trackRoleChanges = (roles, oldRoles) => {\n        if (UserUtils.hasUserAccessTokenRole(roles) && !UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        } else if (!UserUtils.hasUserAccessTokenRole(roles) && UserUtils.hasUserAccessTokenRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_USER_ACCESS_TOKEN_ROLE});\n        }\n\n        if (UserUtils.hasPostAllRole(roles) && !UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        } else if (!UserUtils.hasPostAllRole(roles) && UserUtils.hasPostAllRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_ROLE});\n        }\n\n        if (UserUtils.hasPostAllPublicRole(roles) && !UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'add_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        } else if (!UserUtils.hasPostAllPublicRole(roles) && UserUtils.hasPostAllPublicRole(oldRoles)) {\n            trackEvent('actions', 'remove_roles', {role: General.SYSTEM_POST_ALL_PUBLIC_ROLE});\n        }\n    }\n\n    handleSave = async () => {\n        this.setState({error: null});\n\n        let roles = General.SYSTEM_USER_ROLE;\n\n        if (this.state.isSystemAdmin) {\n            roles += ' ' + General.SYSTEM_ADMIN_ROLE;\n        } else if (this.state.hasUserAccessTokenRole) {\n            roles += ' ' + General.SYSTEM_USER_ACCESS_TOKEN_ROLE;\n            if (this.state.hasPostAllRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_ROLE;\n            } else if (this.state.hasPostAllPublicRole) {\n                roles += ' ' + General.SYSTEM_POST_ALL_PUBLIC_ROLE;\n            }\n        }\n\n        const {data} = await this.props.actions.updateUserRoles(this.props.user.id, roles);\n\n        this.trackRoleChanges(roles, this.props.user.roles);\n\n        if (data) {\n            this.props.onModalDismissed();\n        } else {\n            this.handleError(\n                <FormattedMessage\n                    id='admin.manage_roles.saveError'\n                    defaultMessage='Unable to save roles.'\n                />\n            );\n        }\n    }\n\n    renderContents = () => {\n        const {user} = this.props;\n\n        if (user == null) {\n            return <div/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let additionalRoles;\n        if (this.state.hasUserAccessTokenRole || this.state.isSystemAdmin || user.is_bot) {\n            additionalRoles = (\n                <div>\n                    <p>\n                        <FormattedMarkdownMessage\n                            id='admin.manage_roles.additionalRoles'\n                            defaultMessage='Select additional permissions for the account. [Read more about roles and permissions](!https://about.mattermost.com/default-permissions).'\n                        />\n                    </p>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postall'\n                                checked={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.isSystemAdmin}\n                                onChange={this.handlePostAllChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllRoleTitle'\n                                    defaultMessage='post:all'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllRole'\n                                defaultMessage='Access to post to all Mattermost channels including direct messages.'\n                            />\n                        </label>\n                    </div>\n                    <div className='checkbox'>\n                        <label>\n                            <input\n                                type='checkbox'\n                                ref='postallpublic'\n                                checked={this.state.hasPostAllPublicRole || this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                disabled={this.state.hasPostAllRole || this.state.isSystemAdmin}\n                                onChange={this.handlePostAllPublicChange}\n                            />\n                            <strong>\n                                <FormattedMessage\n                                    id='admin.manage_roles.postAllPublicRoleTitle'\n                                    defaultMessage='post:channels'\n                                />\n                            </strong>\n                            <FormattedMessage\n                                id='admin.manage_roles.postAllPublicRole'\n                                defaultMessage='Access to post to all Mattermost public channels.'\n                            />\n                        </label>\n                    </div>\n                </div>\n            );\n        }\n\n        let userAccessTokenContent;\n        if (this.props.userAccessTokensEnabled) {\n            if (user.is_bot) {\n                userAccessTokenContent = (\n                    <div>\n                        <div className='member-row--padded member-row-lone-padding'>\n                            {additionalRoles}\n                        </div>\n                    </div>\n                );\n            } else {\n                userAccessTokenContent = (\n                    <div>\n                        <div className='checkbox'>\n                            <label>\n                                <input\n                                    type='checkbox'\n                                    ref='postall'\n                                    checked={this.state.hasUserAccessTokenRole || this.state.isSystemAdmin}\n                                    disabled={this.state.isSystemAdmin}\n                                    onChange={this.handleUserAccessTokenChange}\n                                />\n                                <FormattedMarkdownMessage\n                                    id='admin.manage_roles.allowUserAccessTokens'\n                                    defaultMessage='Allow this account to generate [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                                />\n                                <span className='d-block padding-top padding-bottom light'>\n                                    <FormattedHTMLMessage\n                                        id='admin.manage_roles.allowUserAccessTokensDesc'\n                                        defaultMessage=\"Removing this permission doesn't delete existing tokens. To delete them, go to the user's Manage Tokens menu.\"\n                                    />\n                                </span>\n                            </label>\n                        </div>\n                        <div className='member-row--padded'>\n                            {additionalRoles}\n                        </div>\n                    </div>\n                );\n            }\n        }\n\n        let email = user.email;\n        if (user.is_bot) {\n            email = '';\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <Avatar\n                        size='lg'\n                        username={user.username}\n                        url={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                            <BotBadge\n                                show={Boolean(user.is_bot)}\n                                className='badge-admin'\n                            />\n                        </div>\n                        <div className='manage-teams__email'>\n                            {email}\n                        </div>\n                    </div>\n                </div>\n                <div>\n                    <div className='manage-row--inner'>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemadmin'\n                                    type='radio'\n                                    checked={this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemAdmin'\n                                    defaultMessage='System Admin'\n                                />\n                            </label>\n                        </div>\n                        <div className='radio-inline'>\n                            <label>\n                                <input\n                                    name='systemmember'\n                                    type='radio'\n                                    checked={!this.state.isSystemAdmin}\n                                    onChange={this.handleSystemAdminChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.manage_roles.systemMember'\n                                    defaultMessage='Member'\n                                />\n                            </label>\n                        </div>\n                    </div>\n                    {userAccessTokenContent}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='a11y__modal manage-teams'\n                role='dialog'\n                aria-labelledby='manageRolesModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='manageRolesModalLabel'\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.manageRolesTitle'\n                            defaultMessage='Manage Roles'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        type='button'\n                        className='btn btn-link'\n                        onClick={this.props.onModalDismissed}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.cancel'\n                            defaultMessage='Cancel'\n                        />\n                    </button>\n                    <button\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.handleSave}\n                    >\n                        <FormattedMessage\n                            id='admin.manage_roles.save'\n                            defaultMessage='Save'\n                        />\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {updateUserRoles} from 'mattermost-redux/actions/users';\n\nimport ManageRolesModal from './manage_roles_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        userAccessTokensEnabled: state.entities.admin.config.ServiceSettings.EnableUserAccessTokens,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateUserRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageRolesModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class ManageTeamsDropdown extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        user: PropTypes.object.isRequired,\n        teamMember: PropTypes.object.isRequired,\n        onError: PropTypes.func.isRequired,\n        onMemberChange: PropTypes.func.isRequired,\n        updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n        handleRemoveUserFromTeam: PropTypes.func.isRequired,\n    };\n\n    makeTeamAdmin = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, true);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.props.onMemberChange(this.props.teamMember.team_id);\n        }\n    };\n\n    makeMember = async () => {\n        const {error} = await this.props.updateTeamMemberSchemeRoles(this.props.teamMember.team_id, this.props.user.id, true, false);\n        if (error) {\n            this.props.onError(error.message);\n        } else {\n            this.props.onMemberChange(this.props.teamMember.team_id);\n        }\n    };\n\n    removeFromTeam = () => {\n        this.props.handleRemoveUserFromTeam(this.props.teamMember.team_id);\n    }\n\n    render() {\n        const isTeamAdmin = Utils.isAdmin(this.props.teamMember.roles) || this.props.teamMember.scheme_admin;\n        const isSysAdmin = Utils.isSystemAdmin(this.props.user.roles);\n        const isGuest = Utils.isGuest(this.props.user);\n\n        const {team} = this.props;\n        let title;\n        if (isSysAdmin) {\n            title = Utils.localizeMessage('admin.user_item.sysAdmin', 'System Admin');\n        } else if (isTeamAdmin) {\n            title = Utils.localizeMessage('admin.user_item.teamAdmin', 'Team Admin');\n        } else if (isGuest) {\n            title = Utils.localizeMessage('admin.user_item.guest', 'Guest');\n        } else {\n            title = Utils.localizeMessage('admin.user_item.teamMember', 'Team Member');\n        }\n\n        return (\n            <MenuWrapper>\n                <a>\n                    <span>{title} </span>\n                    <span className='caret'/>\n                </a>\n                <Menu\n                    openLeft={true}\n                    ariaLabel={Utils.localizeMessage('team_members_dropdown.menuAriaLabel', 'Team member role change')}\n                >\n                    <Menu.ItemAction\n                        show={!isTeamAdmin && !isGuest}\n                        onClick={this.makeTeamAdmin}\n                        text={Utils.localizeMessage('admin.user_item.makeTeamAdmin', 'Make Team Admin')}\n                    />\n                    <Menu.ItemAction\n                        show={isTeamAdmin}\n                        onClick={this.makeMember}\n                        text={Utils.localizeMessage('admin.user_item.makeMember', 'Make Team Member')}\n                    />\n                    <Menu.ItemAction\n                        show={!team.group_constrained}\n                        onClick={this.removeFromTeam}\n                        text={Utils.localizeMessage('team_members_dropdown.leave_team', 'Remove from Team')}\n                    />\n                </Menu>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class RemoveFromTeamButton extends React.PureComponent {\n    static propTypes = {\n        teamId: PropTypes.string.isRequired,\n        handleRemoveUserFromTeam: PropTypes.func.isRequired,\n    };\n\n    handleClick = (e) => {\n        e.preventDefault();\n        this.props.handleRemoveUserFromTeam(this.props.teamId);\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='team_members_dropdown.leave_team'\n                    defaultMessage='Remove from Team'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport LoadingScreen from 'components/loading_screen';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport ManageTeamsDropdown from './manage_teams_dropdown.jsx';\nimport RemoveFromTeamButton from './remove_from_team_button.jsx';\n\nexport default class ManageTeamsModal extends React.Component {\n    static propTypes = {\n        locale: PropTypes.string.isRequired,\n        onModalDismissed: PropTypes.func.isRequired,\n        show: PropTypes.bool.isRequired,\n        user: PropTypes.object,\n        actions: PropTypes.shape({\n            getTeamMembersForUser: PropTypes.func.isRequired,\n            getTeamsForUser: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n            removeUserFromTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n            teams: null,\n            teamMembers: null,\n        };\n    }\n\n    componentDidMount() {\n        if (this.props.user) {\n            this.loadTeamsAndTeamMembers();\n        }\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) { // eslint-disable-line camelcase\n        const userId = this.props.user ? this.props.user.id : '';\n        const nextUserId = nextProps.user ? nextProps.user.id : '';\n\n        if (userId !== nextUserId) {\n            this.setState({\n                teams: null,\n                teamMembers: null,\n            });\n\n            if (nextProps.user) {\n                this.loadTeamsAndTeamMembers(nextProps.user);\n            }\n        }\n    }\n\n    loadTeamsAndTeamMembers = async (user = this.props.user) => {\n        this.getTeamMembers(user.id);\n        const {data} = await this.props.actions.getTeamsForUser(user.id);\n        this.setState({\n            teams: filterAndSortTeamsByDisplayName(data, this.props.locale),\n        });\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    getTeamMembers = async (userId = this.props.user.id) => {\n        const {data} = await this.props.actions.getTeamMembersForUser(userId);\n        if (data) {\n            this.setState({\n                teamMembers: data,\n            });\n        }\n    }\n\n    handleMemberRemove = (teamId) => {\n        this.setState({\n            teams: this.state.teams.filter((team) => team.id !== teamId),\n            teamMembers: this.state.teamMembers.filter((teamMember) => teamMember.team_id !== teamId),\n        });\n    }\n\n    handleRemoveUserFromTeam = async (teamId) => {\n        const {actions, user} = this.props;\n\n        const {data, error} = await actions.removeUserFromTeam(teamId, user.id);\n        if (data) {\n            this.handleMemberRemove(teamId);\n        } else if (error) {\n            this.handleError(error.message);\n        }\n    }\n\n    handleMemberChange = () => {\n        this.getTeamMembers(this.props.user.id);\n    };\n\n    renderContents = () => {\n        const {user} = this.props;\n        const {teams, teamMembers} = this.state;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        const isSystemAdmin = Utils.isAdmin(user.roles);\n\n        let name = Utils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let teamList;\n        if (teams && teamMembers) {\n            teamList = teams.map((team) => {\n                const teamMember = teamMembers.find((member) => member.team_id === team.id);\n                if (!teamMember) {\n                    return null;\n                }\n\n                let action;\n                if (isSystemAdmin) {\n                    action = (\n                        <RemoveFromTeamButton\n                            teamId={team.id}\n                            handleRemoveUserFromTeam={this.handleRemoveUserFromTeam}\n                        />\n                    );\n                } else {\n                    action = (\n                        <ManageTeamsDropdown\n                            user={user}\n                            team={team}\n                            teamMember={teamMember}\n                            onError={this.handleError}\n                            onMemberChange={this.handleMemberChange}\n                            updateTeamMemberSchemeRoles={this.props.actions.updateTeamMemberSchemeRoles}\n                            handleRemoveUserFromTeam={this.handleRemoveUserFromTeam}\n                        />\n                    );\n                }\n\n                return (\n                    <div\n                        key={team.id}\n                        className='manage-teams__team'\n                    >\n                        <div className='manage-teams__team-name'>\n                            {team.display_name}\n                        </div>\n                        <div className='manage-teams__team-actions'>\n                            {action}\n                        </div>\n                    </div>\n                );\n            });\n        } else {\n            teamList = <LoadingScreen/>;\n        }\n\n        let systemAdminIndicator = null;\n        if (isSystemAdmin) {\n            systemAdminIndicator = (\n                <div className='manage-teams__system-admin'>\n                    <FormattedMessage\n                        id='admin.user_item.sysAdmin'\n                        defaultMessage='System Admin'\n                    />\n                </div>\n            );\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <Avatar\n                        username={user.username}\n                        url={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                        size='lg'\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                    {systemAdminIndicator}\n                </div>\n                <div className='manage-teams__teams'>\n                    {teamList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='a11y__modal manage-teams modal--overflow-visible'\n                role='dialog'\n                aria-labelledby='manageTeamsModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='manageTeamsModalLabel'\n                    >\n                        <FormattedMessage\n                            id='admin.user_item.manageTeams'\n                            defaultMessage='Manage Teams'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {updateTeamMemberSchemeRoles, getTeamMembersForUser, getTeamsForUser, removeUserFromTeam} from 'mattermost-redux/actions/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport ManageTeamsModal from './manage_teams_modal';\n\nfunction mapStateToProps(state) {\n    return {\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeamMembersForUser,\n            getTeamsForUser,\n            updateTeamMemberSchemeRoles,\n            removeUserFromTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTeamsModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nexport default class RevokeTokenButton extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Token id to revoke\n         */\n        tokenId: PropTypes.string.isRequired,\n\n        /*\n         * Function to call on error\n         */\n        onError: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to revoke a user access token\n             */\n            revokeUserAccessToken: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    handleClick = async (e) => {\n        e.preventDefault();\n\n        const {error} = await this.props.actions.revokeUserAccessToken(this.props.tokenId);\n        trackEvent('system_console', 'revoke_user_access_token');\n\n        if (error) {\n            this.props.onError(error.message);\n        }\n    }\n\n    render() {\n        return (\n            <button\n                className='btn btn-danger'\n                onClick={this.handleClick}\n            >\n                <FormattedMessage\n                    id='admin.revoke_token_button.delete'\n                    defaultMessage='Delete'\n                />\n            </button>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {revokeUserAccessToken} from 'mattermost-redux/actions/users';\n\nimport RevokeTokenButton from './revoke_token_button.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            revokeUserAccessToken,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(RevokeTokenButton);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\n\nimport RevokeTokenButton from 'components/admin_console/revoke_token_button';\nimport LoadingScreen from 'components/loading_screen';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class ManageTokensModal extends React.PureComponent {\n    static propTypes = {\n\n        /**\n         * Set to render the modal\n         */\n        show: PropTypes.bool.isRequired,\n\n        /**\n         * The user the roles are being managed for\n         */\n        user: PropTypes.object,\n\n        /**\n         * The personal access tokens for a user, object with token ids as keys\n         */\n        userAccessTokens: PropTypes.object,\n\n        /**\n         * Function called when modal is dismissed\n         */\n        onModalDismissed: PropTypes.func.isRequired,\n\n        actions: PropTypes.shape({\n\n            /**\n             * Function to get a user's access tokens\n             */\n            getUserAccessTokensForUser: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {error: null};\n    }\n\n    componentDidUpdate(prevProps) {\n        const userId = this.props.user ? this.props.user.id : null;\n        const prevUserId = prevProps.user ? prevProps.user.id : null;\n        if (userId && prevUserId !== userId) {\n            this.props.actions.getUserAccessTokensForUser(userId, 0, 200);\n        }\n    }\n\n    handleError = (error) => {\n        this.setState({\n            error,\n        });\n    }\n\n    renderContents = () => {\n        const {user, userAccessTokens} = this.props;\n\n        if (!user) {\n            return <LoadingScreen/>;\n        }\n\n        let name = UserUtils.getFullName(user);\n        if (name) {\n            name += ` (@${user.username})`;\n        } else {\n            name = `@${user.username}`;\n        }\n\n        let tokenList;\n        if (userAccessTokens) {\n            const userAccessTokensList = Object.values(userAccessTokens);\n\n            if (userAccessTokensList.length === 0) {\n                tokenList = (\n                    <div className='manage-row__empty'>\n                        <FormattedMessage\n                            id='admin.manage_tokens.userAccessTokensNone'\n                            defaultMessage='No personal access tokens.'\n                        />\n                    </div>\n                );\n            } else {\n                tokenList = userAccessTokensList.map((token) => {\n                    return (\n                        <div\n                            key={token.id}\n                            className='manage-teams__team'\n                        >\n                            <div className='manage-teams__team-name'>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensNameLabel'\n                                        defaultMessage='Token Description: '\n                                    />\n                                    {token.description}\n                                </div>\n                                <div className='whitespace--nowrap overflow--ellipsis'>\n                                    <FormattedMessage\n                                        id='admin.manage_tokens.userAccessTokensIdLabel'\n                                        defaultMessage='Token ID: '\n                                    />\n                                    {token.id}\n                                </div>\n                            </div>\n                            <div className='manage-teams__team-actions'>\n                                <RevokeTokenButton\n                                    tokenId={token.id}\n                                    onError={this.handleError}\n                                />\n                            </div>\n                        </div>\n                    );\n                });\n            }\n        } else {\n            tokenList = <LoadingScreen/>;\n        }\n\n        return (\n            <div>\n                <div className='manage-teams__user'>\n                    <Avatar\n                        username={user.username}\n                        url={Client4.getProfilePictureUrl(user.id, user.last_picture_update)}\n                        size='lg'\n                    />\n                    <div className='manage-teams__info'>\n                        <div className='manage-teams__name'>\n                            {name}\n                        </div>\n                        <div className='manage-teams__email'>\n                            {user.email}\n                        </div>\n                    </div>\n                </div>\n                <div className='padding-top x2'>\n                    <FormattedMarkdownMessage\n                        id='admin.manage_tokens.userAccessTokensDescription'\n                        defaultMessage='Personal access tokens function similarly to session tokens and can be used by integrations to [interact with this Mattermost server](!https://about.mattermost.com/default-api-authentication). Tokens are disabled if the user is deactivated. Learn more about [personal access tokens](!https://about.mattermost.com/default-user-access-tokens).'\n                    />\n                </div>\n                <div className='manage-teams__teams'>\n                    {tokenList}\n                </div>\n            </div>\n        );\n    }\n\n    render() {\n        return (\n            <Modal\n                show={this.props.show}\n                onHide={this.props.onModalDismissed}\n                dialogClassName='a11y__modal manage-teams'\n                role='dialog'\n                aria-labelledby='manageTokensModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='manageTokensModalLabel'\n                    >\n                        <FormattedMessage\n                            id='admin.manage_tokens.manageTokensTitle'\n                            defaultMessage='Manage Personal Access Tokens'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    {this.renderContents()}\n                    {this.state.error}\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getUserAccessTokensForUser} from 'mattermost-redux/actions/users';\n\nimport ManageTokensModal from './manage_tokens_modal.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const userId = ownProps.user ? ownProps.user.id : '';\n\n    return {\n        userAccessTokens: state.entities.admin.userAccessTokensByUser[userId],\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUserAccessTokensForUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ManageTokensModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {ActionResult} from 'mattermost-redux/types/actions';\n\nimport * as Utils from 'utils/utils.jsx';\n\ninterface Error {\n    message: string;\n}\n\ninterface PasswordConfig {\n    minimumLength: number;\n    requireLowercase: boolean;\n    requireNumber: boolean;\n    requireSymbol: boolean;\n    requireUppercase: boolean;\n}\n\ntype State = {\n    serverErrorNewPass: JSX.Element|null;\n    serverErrorCurrentPass: JSX.Element|string|null;\n}\n\ntype Props = {\n    user?: UserProfile;\n    currentUserId: string;\n    show: boolean;\n    onModalSubmit: (user?: UserProfile) => void;\n    onModalDismissed: () => void;\n    passwordConfig: PasswordConfig;\n    actions: {\n        updateUserPassword: (userId: string, currentPassword: string, password: string) => ActionResult;\n    };\n}\n\nexport default class ResetPasswordModal extends React.Component<Props, State> {\n    public static defaultProps: Partial<Props> = {\n        show: false,\n    };\n\n    public constructor(props: Props) {\n        super(props);\n\n        this.state = {\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        };\n    }\n\n    public componentWillUnmount(): void {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n    }\n\n    private doSubmit = async (e: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n        e.preventDefault();\n        if (!this.props.user) {\n            return;\n        }\n\n        let currentPassword = '';\n        if (this.refs.currentPassword) {\n            currentPassword = (this.refs.currentPassword as HTMLInputElement).value;\n            if (currentPassword === '') {\n                const errorMsg = (\n                    <FormattedMessage\n                        id='admin.reset_password.missing_current'\n                        defaultMessage='Please enter your current password.'\n                    />\n                );\n                this.setState({serverErrorCurrentPass: errorMsg});\n                return;\n            }\n        }\n\n        const password = (this.refs.password as HTMLInputElement).value;\n\n        const {valid, error} = Utils.isValidPassword(password, this.props.passwordConfig);\n        if (!valid && error) {\n            this.setState({serverErrorNewPass: error});\n            return;\n        }\n\n        this.setState({serverErrorNewPass: null});\n\n        const result = await this.props.actions.updateUserPassword(this.props.user.id, currentPassword, password);\n        if ('error' in result) {\n            this.setState({serverErrorCurrentPass: result.error.message});\n            return;\n        }\n        this.props.onModalSubmit(this.props.user);\n    }\n\n    private doCancel = (): void => {\n        this.setState({\n            serverErrorNewPass: null,\n            serverErrorCurrentPass: null,\n        });\n        this.props.onModalDismissed();\n    }\n\n    public render(): JSX.Element {\n        const user = this.props.user;\n        if (user == null) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let serverErrorNewPass = null;\n\n        if (this.state.serverErrorNewPass) {\n            urlClass += ' has-error';\n            serverErrorNewPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorNewPass}</p></div>;\n        }\n\n        let title;\n        if (user.auth_service) {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleSwitch'\n                    defaultMessage='Switch Account to Email/Password'\n                />\n            );\n        } else {\n            title = (\n                <FormattedMessage\n                    id='admin.reset_password.titleReset'\n                    defaultMessage='Reset Password'\n                />\n            );\n        }\n\n        let currentPassword = null;\n        let serverErrorCurrentPass = null;\n        let newPasswordFocus = true;\n        if (this.props.currentUserId === user.id) {\n            newPasswordFocus = false;\n            let urlClassCurrentPass = 'input-group input-group--limit';\n            if (this.state.serverErrorCurrentPass) {\n                urlClassCurrentPass += ' has-error';\n                serverErrorCurrentPass = <div className='has-error'><p className='input__help error'>{this.state.serverErrorCurrentPass}</p></div>;\n            }\n            currentPassword = (\n                <div className='col-sm-10 password__group-addon-space'>\n                    <div className={urlClassCurrentPass}>\n                        <span\n                            data-toggle='tooltip'\n                            title='Current Password'\n                            className='input-group-addon password__group-addon'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.curentPassword'\n                                defaultMessage='Current Password'\n                            />\n                        </span>\n                        <input\n                            type='password'\n                            ref='currentPassword'\n                            className='form-control'\n                            autoFocus={true}\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.doCancel}\n                role='dialog'\n                aria-labelledby='resetPasswordModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='resetPasswordModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            {currentPassword}\n                            <div className='col-sm-10'>\n                                <div className={urlClass}>\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Password'\n                                        className='input-group-addon password__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_password.newPassword'\n                                            defaultMessage='New Password'\n                                        />\n                                    </span>\n                                    <input\n                                        type='password'\n                                        ref='password'\n                                        className='form-control'\n                                        autoFocus={newPasswordFocus}\n                                    />\n                                </div>\n                                {serverErrorNewPass}\n                                {serverErrorCurrentPass}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_password.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {bindActionCreators, Dispatch, ActionCreatorsMapObject} from 'redux';\nimport {GlobalState} from 'mattermost-redux/types/store';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {updateUserPassword} from 'mattermost-redux/actions/users';\n\nimport {getPasswordConfig} from 'utils/utils.jsx';\n\nimport ResetPasswordModal from './reset_password_modal';\n\ntype Actions = {\n    updateUserPassword: (userId: string, currentPassword: string, password: string) => ActionResult;\n}\n\nfunction mapStateToProps(state: GlobalState) {\n    const config = getConfig(state);\n\n    return {\n        currentUserId: getCurrentUserId(state),\n        passwordConfig: getPasswordConfig(config),\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch) {\n    return {\n        actions: bindActionCreators<ActionCreatorsMapObject<ActionFunc>, Actions>({\n            updateUserPassword,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ResetPasswordModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {adminResetEmail} from 'actions/admin_actions.jsx';\n\nexport default class ResetEmailModal extends React.Component {\n    static propTypes = {\n        user: PropTypes.object,\n        show: PropTypes.bool.isRequired,\n        onModalSubmit: PropTypes.func,\n        onModalDismissed: PropTypes.func,\n        passwordConfig: PropTypes.object,\n    };\n\n    static defaultProps = {\n        show: false,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            error: null,\n        };\n    }\n\n    doSubmit = (e) => {\n        e.preventDefault();\n\n        if (this.refs.email) {\n            const email = this.refs.email.value;\n            if (!isEmail(email)) {\n                const errMsg = (\n                    <FormattedMessage\n                        id='user.settings.general.validEmail'\n                        defaultMessage='Please enter a valid email address.'\n                    />\n                );\n                this.setState({error: errMsg});\n                return;\n            }\n        }\n\n        const user = Object.assign({}, this.props.user);\n        const email = this.refs.email.value.trim().toLowerCase();\n        user.email = email;\n\n        this.setState({error: null});\n\n        adminResetEmail(\n            user,\n            () => {\n                this.props.onModalSubmit(this.props.user);\n            },\n            (err) => {\n                const serverError = err.message ? err.message : err;\n                this.setState({error: serverError});\n            }\n        );\n    }\n\n    doCancel = () => {\n        this.setState({error: null});\n        this.props.onModalDismissed();\n    }\n\n    render() {\n        if (!this.props.user) {\n            return <div/>;\n        }\n\n        let urlClass = 'input-group input-group--limit';\n        let errorMsg = null;\n        if (this.state.error) {\n            urlClass += ' has-error';\n            errorMsg = <div className='has-error'><p className='input__help error'>{this.state.error}</p></div>;\n        }\n\n        const title = (\n            <FormattedMessage\n                id='admin.reset_email.titleReset'\n                defaultMessage='Update Email'\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal'\n                show={this.props.show}\n                onHide={this.doCancel}\n                role='dialog'\n                aria-labelledby='resetEmailModalLabel'\n                data-testid='resetEmailModal'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='resetEmailModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <form\n                    role='form'\n                    className='form-horizontal'\n                >\n                    <Modal.Body>\n                        <div className='form-group'>\n                            <div className='col-sm-10'>\n                                <div\n                                    className={urlClass}\n                                    data-testid='resetEmailForm'\n                                >\n                                    <span\n                                        data-toggle='tooltip'\n                                        title='New Email'\n                                        className='input-group-addon email__group-addon'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.reset_email.newEmail'\n                                            defaultMessage='New Email'\n                                        />\n                                    </span>\n                                    <input\n                                        type='email'\n                                        ref='email'\n                                        className='form-control'\n                                        maxLength='128'\n                                        autoFocus={true}\n                                    />\n                                </div>\n                                {errorMsg}\n                            </div>\n                        </div>\n                    </Modal.Body>\n                    <Modal.Footer>\n                        <button\n                            type='button'\n                            className='btn btn-link'\n                            onClick={this.doCancel}\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.cancel'\n                                defaultMessage='Cancel'\n                            />\n                        </button>\n                        <button\n                            onClick={this.doSubmit}\n                            type='submit'\n                            className='btn btn-primary'\n                            data-testid='resetEmailButton'\n                        >\n                            <FormattedMessage\n                                id='admin.reset_email.reset'\n                                defaultMessage='Reset'\n                            />\n                        </button>\n                    </Modal.Footer>\n                </form>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Link} from 'react-router-dom';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\nimport ProfilePicture from 'components/profile_picture';\nimport BotBadge from 'components/widgets/badges/bot_badge';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport default class UserListRowWithError extends React.Component {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        status: PropTypes.string,\n        extraInfo: PropTypes.array,\n        actions: PropTypes.arrayOf(PropTypes.func),\n        actionProps: PropTypes.object,\n        actionUserProps: PropTypes.object,\n        index: PropTypes.number,\n        totalUsers: PropTypes.number,\n        userCount: PropTypes.number,\n    };\n\n    static defaultProps = {\n        extraInfo: [],\n        actions: [],\n        actionProps: {},\n        actionUserProps: {},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n\n    onError = (errorObj) => {\n        this.setState({\n            error: errorObj,\n        });\n    }\n\n    render() {\n        let buttons = null;\n        if (this.props.actions) {\n            buttons = this.props.actions.map((Action, index) => {\n                return (\n                    <Action\n                        key={index.toString()}\n                        user={this.props.user}\n                        index={this.props.index}\n                        totalUsers={this.props.totalUsers}\n                        {...this.props.actionProps}\n                        {...this.props.actionUserProps}\n                        onError={this.onError}\n                    />\n                );\n            });\n        }\n\n        // QUICK HACK, NEEDS A PROP FOR TOGGLING STATUS\n        let email = this.props.user.email;\n        let emailStyle = 'more-modal__description';\n        let status;\n        if (this.props.user.is_bot) {\n            email = null;\n        } else if (this.props.extraInfo && this.props.extraInfo.length > 0) {\n            email = (\n                <FormattedMarkdownMessage\n                    id='admin.user_item.emailTitle'\n                    defaultMessage='**Email:** {email}'\n                    values={{\n                        email: this.props.user.email,\n                    }}\n                />\n            );\n            emailStyle = '';\n        } else if (this.props.user.status) {\n            status = this.props.user.status;\n        } else {\n            status = this.props.status;\n        }\n\n        if (this.props.user.is_bot) {\n            status = null;\n        }\n\n        let userCountID = null;\n        let userCountEmail = null;\n        if (this.props.userCount >= 0) {\n            userCountID = Utils.createSafeId('userListRowName' + this.props.userCount);\n            userCountEmail = Utils.createSafeId('userListRowEmail' + this.props.userCount);\n        }\n\n        let error = null;\n        if (this.state.error) {\n            error = (\n                <div className='has-error'>\n                    <label className='has-error control-label'>{this.state.error.message}</label>\n                </div>\n            );\n        }\n\n        return (\n            <div\n                data-testid='userListRow'\n                key={this.props.user.id}\n                className='more-modal__row'\n            >\n                <ProfilePicture\n                    src={Client4.getProfilePictureUrl(this.props.user.id, this.props.user.last_picture_update)}\n                    status={status}\n                    size='md'\n                />\n                <div className='more-modal__right'>\n                    <div className='more-modal__top'>\n                        <div className='more-modal__details'>\n                            <div\n                                id={userCountID}\n                                className='more-modal__name'\n                            >\n                                <Link to={'/admin_console/user_management/user/' + this.props.user.id}>{Utils.displayEntireNameForUser(this.props.user)}</Link>\n                                <BotBadge\n                                    className='badge-admin'\n                                    show={Boolean(this.props.user.is_bot)}\n                                />\n                            </div>\n                            <div\n                                id={userCountEmail}\n                                className={emailStyle}\n                            >\n                                {email}\n                            </div>\n                            {this.props.extraInfo}\n                        </div>\n                        <div\n                            className='more-modal__actions'\n                        >\n                            {buttons}\n                        </div>\n                    </div>\n                    <div\n                        className='more-modal__bottom'\n                    >\n                        {error}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {getStatusForUserId} from 'mattermost-redux/selectors/entities/users';\n\nimport UserListRow from './user_list_row_with_error.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const user = ownProps.user || {};\n    return {\n        status: getStatusForUserId(state, user.id),\n    };\n}\n\nexport default connect(mapStateToProps)(UserListRow);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport * as UserUtils from 'mattermost-redux/utils/user_utils';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {adminResetMfa} from 'actions/admin_actions.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\nimport {getSiteURL} from 'utils/url';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\n\nconst ROWS_FROM_BOTTOM_TO_OPEN_UP = 5;\n\nexport default class SystemUsersDropdown extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * User to manage with dropdown\n         */\n        user: PropTypes.object.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * The license is installed\n         */\n        isLicensed: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        /*\n         * Function to open password reset, takes user as an argument\n         */\n        doPasswordReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open email reset, takes user as an argument\n         */\n        doEmailReset: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage teams, takes user as an argument\n         */\n        doManageTeams: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage roles, takes user as an argument\n         */\n        doManageRoles: PropTypes.func.isRequired,\n\n        /*\n         * Function to open manage tokens, takes user as an argument\n         */\n        doManageTokens: PropTypes.func.isRequired,\n\n        /*\n         * The function to call when an error occurs\n         */\n        onError: PropTypes.func.isRequired,\n        currentUser: PropTypes.object.isRequired,\n        index: PropTypes.number.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            updateUserActive: PropTypes.func.isRequired,\n            revokeAllSessionsForUser: PropTypes.func.isRequired,\n            promoteGuestToUser: PropTypes.func.isRequired,\n            demoteUserToGuest: PropTypes.func.isRequired,\n            loadBots: PropTypes.func.isRequired,\n        }).isRequired,\n        config: PropTypes.object.isRequired,\n        bots: PropTypes.object.isRequired,\n\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showDeactivateMemberModal: false,\n            showRevokeSessionsModal: false,\n            showPromoteToUserModal: false,\n            showDemoteToGuestModal: false,\n            user: null,\n            role: null,\n        };\n    }\n\n    handleMakeActive = (e) => {\n        e.preventDefault();\n        this.props.actions.updateUserActive(this.props.user.id, true).\n            then(this.onUpdateActiveResult);\n    }\n\n    handleManageTeams = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTeams(this.props.user);\n    }\n\n    handleManageRoles = (e) => {\n        e.preventDefault();\n\n        this.props.doManageRoles(this.props.user);\n    }\n\n    handleManageTokens = (e) => {\n        e.preventDefault();\n\n        this.props.doManageTokens(this.props.user);\n    }\n\n    handleResetPassword = (e) => {\n        e.preventDefault();\n        this.props.doPasswordReset(this.props.user);\n    }\n\n    handleResetEmail = (e) => {\n        e.preventDefault();\n        this.props.doEmailReset(this.props.user);\n    }\n\n    handleResetMfa = (e) => {\n        e.preventDefault();\n        adminResetMfa(this.props.user.id, null, this.props.onError);\n    }\n\n    handleShowDeactivateMemberModal = async (e) => {\n        e.preventDefault();\n        if (this.shouldDisableBotsWhenOwnerIsDeactivated()) {\n            await this.props.actions.loadBots(\n                Constants.Integrations.START_PAGE_NUM,\n                Constants.Integrations.PAGE_SIZE,\n            );\n        }\n        this.setState({showDeactivateMemberModal: true});\n    }\n\n    handleDeactivateMember = () => {\n        this.props.actions.updateUserActive(this.props.user.id, false).\n            then(this.onUpdateActiveResult);\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    onUpdateActiveResult = ({error}) => {\n        if (error) {\n            this.props.onError({id: error.server_error_id, ...error});\n        }\n    }\n\n    handleDeactivateCancel = () => {\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    renderDeactivateMemberModal = () => {\n        const user = this.props.user;\n        const title = (\n            <FormattedMessage\n                id='deactivate_member_modal.title'\n                defaultMessage='Deactivate {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const defaultMessage = (\n            <FormattedMarkdownMessage\n                id='deactivate_member_modal.desc'\n                defaultMessage='This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system.\\n'\n                values={{\n                    username: user.username,\n                }}\n            />);\n\n        let warning;\n        if (user.auth_service !== '' && user.auth_service !== Constants.EMAIL_SERVICE) {\n            warning = (\n                <strong>\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='deactivate_member_modal.sso_warning'\n                        defaultMessage='You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync.'\n                    />\n                </strong>\n            );\n        }\n\n        const confirmationMessage = (\n            <FormattedMarkdownMessage\n                id='deactivate_member_modal.desc.confirm'\n                defaultMessage='Are you sure you want to deactivate {username}?'\n                values={{\n                    username: user.username,\n                }}\n            />);\n        let messageForUsersWithBotAccounts;\n        if (this.shouldDisableBotsWhenOwnerIsDeactivated()) {\n            for (const bot of Object.values(this.props.bots)) {\n                if ((bot.owner_id === user.id) && this.state.showDeactivateMemberModal && (bot.delete_at === 0)) {\n                    messageForUsersWithBotAccounts = (\n                        <FormattedMarkdownMessage\n                            id='deactivate_member_modal.desc.for_users_with_bot_accounts'\n                            defaultMessage='This action deactivates {username}.\\n \\n * They will be logged out and not have access to any teams or channels on this system.\\n * Bot accounts they manage will be disabled along with their integrations. To enable them again, go to [Integrations > Bot Accounts]({siteURL}/_redirect/integrations/bots). [Learn more about bot accounts](!https://mattermost.com/pl/default-bot-accounts).\\n \\n \\n'\n                            values={{\n                                username: user.username,\n                                siteURL: getSiteURL(),\n                            }}\n                        />);\n                    break;\n                }\n            }\n        }\n\n        const message = (\n            <div>\n                {messageForUsersWithBotAccounts || defaultMessage}\n                {confirmationMessage}\n                {warning}\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const deactivateMemberButton = (\n            <FormattedMessage\n                id='deactivate_member_modal.deactivate'\n                defaultMessage='Deactivate'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDeactivateMemberModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={deactivateMemberButton}\n                onConfirm={this.handleDeactivateMember}\n                onCancel={this.handleDeactivateCancel}\n            />\n        );\n    }\n\n    shouldDisableBotsWhenOwnerIsDeactivated() {\n        return this.props.config &&\n            this.props.config.ServiceSettings &&\n            this.props.config.ServiceSettings.DisableBotsWhenOwnerIsDeactivated;\n    }\n\n    handleShowRevokeSessionsModal = (e) => {\n        e.preventDefault();\n        this.setState({showRevokeSessionsModal: true});\n    }\n\n    handleRevokeSessions = async () => {\n        const me = this.props.currentUser;\n\n        const {data, error} = await this.props.actions.revokeAllSessionsForUser(this.props.user.id);\n        if (data && this.props.user.id === me.id) {\n            emitUserLoggedOutEvent();\n        } else if (error) {\n            this.props.onError(error);\n        }\n\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    handleRevokeSessionsCancel = () => {\n        this.setState({showRevokeSessionsModal: false});\n    }\n\n    handlePromoteToUser = () => {\n        this.setState({showPromoteToUserModal: true});\n    }\n\n    handlePromoteToUserConfirm = async () => {\n        const {error} = await this.props.actions.promoteGuestToUser(this.props.user.id);\n        if (error) {\n            this.props.onError(error);\n        }\n\n        this.setState({showPromoteToUserModal: false});\n    }\n\n    handlePromoteToUserCancel = () => {\n        this.setState({showPromoteToUserModal: false});\n    }\n\n    handleDemoteToGuest = () => {\n        this.setState({showDemoteToGuestModal: true});\n    }\n\n    handleDemoteToGuestConfirm = async () => {\n        const {error} = await this.props.actions.demoteUserToGuest(this.props.user.id);\n        if (error) {\n            this.props.onError(error);\n        }\n        this.setState({showDemoteToGuestModal: false});\n    }\n\n    handleDemoteToGuestCancel = () => {\n        this.setState({showDemoteToGuestModal: false});\n    }\n\n    renderPromoteToUserModal = () => {\n        const title = (\n            <FormattedMessage\n                id='promote_to_user_modal.title'\n                defaultMessage='Promote guest {username} to user'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='promote_to_user_modal.desc'\n                defaultMessage='This action promotes the guest {username} to a member. It will allow the user to join public channels and interact with users outside of the channels they are currently members of. Are you sure you want to promote guest {username} to user?'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const promoteUserButton = (\n            <FormattedMessage\n                id='promote_to_user_modal.promote'\n                defaultMessage='Promote'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showPromoteToUserModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={promoteUserButton}\n                onConfirm={this.handlePromoteToUserConfirm}\n                onCancel={this.handlePromoteToUserCancel}\n            />\n        );\n    }\n\n    renderDemoteToGuestModal = () => {\n        const title = (\n            <FormattedMessage\n                id='demote_to_user_modal.title'\n                defaultMessage='Demote user {username} to guest'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='demote_to_user_modal.desc'\n                defaultMessage={'This action demotes the user {username} to a guest. It will restrict the user\\'s ability to join public channels and interact with users outside of the channels they are currently members of. Are you sure you want to demote user {username} to guest?'}\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const demoteGuestButton = (\n            <FormattedMessage\n                id='demote_to_user_modal.demote'\n                defaultMessage='Demote'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDemoteToGuestModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={demoteGuestButton}\n                onConfirm={this.handleDemoteToGuestConfirm}\n                onCancel={this.handleDemoteToGuestCancel}\n            />\n        );\n    }\n\n    renderRevokeSessionsModal = () => {\n        const title = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.title'\n                defaultMessage='Revoke Sessions for {username}'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.desc'\n                defaultMessage='This action revokes all sessions for {username}. They will be logged out from all devices. Are you sure you want to revoke all sessions for {username}?'\n                values={{\n                    username: this.props.user.username,\n                }}\n            />\n        );\n\n        const revokeUserButtonButton = (\n            <FormattedMessage\n                id='revoke_user_sessions_modal.revoke'\n                defaultMessage='Revoke'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showRevokeSessionsModal}\n                title={title}\n                message={message}\n                confirmButtonClass='btn btn-danger'\n                confirmButtonText={revokeUserButtonButton}\n                onConfirm={this.handleRevokeSessions}\n                onCancel={this.handleRevokeSessionsCancel}\n            />\n        );\n    }\n\n    renderAccessToken = () => {\n        const userAccessTokensEnabled = this.props.enableUserAccessTokens;\n        if (!userAccessTokensEnabled) {\n            return null;\n        }\n\n        const user = this.props.user;\n        const hasPostAllRole = UserUtils.hasPostAllRole(user.roles);\n        const hasPostAllPublicRole = UserUtils.hasPostAllPublicRole(user.roles);\n        const hasUserAccessTokenRole = UserUtils.hasUserAccessTokenRole(user.roles);\n        const isSystemAdmin = UserUtils.isSystemAdmin(user.roles);\n\n        let messageId = '';\n        if (hasUserAccessTokenRole || isSystemAdmin) {\n            if (hasPostAllRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAll');\n            } else if (hasPostAllPublicRole) {\n                messageId = t('admin.user_item.userAccessTokenPostAllPublic');\n            } else {\n                messageId = t('admin.user_item.userAccessTokenYes');\n            }\n        }\n\n        if (!messageId) {\n            return null;\n        }\n\n        return (\n            <div className='light margin-top half'>\n                <FormattedMessage\n                    key='admin.user_item.userAccessToken'\n                    id={messageId}\n                />\n            </div>\n        );\n    }\n\n    render() {\n        const {currentUser, user, isLicensed} = this.props;\n        const isGuest = Utils.isGuest(user);\n        if (!user) {\n            return <div/>;\n        }\n\n        let currentRoles = (\n            <FormattedMessage\n                id='admin.user_item.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (isGuest) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.guest'\n                    defaultMessage='Guest'\n                />\n            );\n        }\n\n        if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n            currentRoles = (\n                <FormattedMessage\n                    id='team_members_dropdown.systemAdmin'\n                    defaultMessage='System Admin'\n                />\n            );\n        }\n\n        let showMakeActive = false;\n        let showMakeNotActive = !Utils.isSystemAdmin(user.roles);\n        let showManageTeams = true;\n        let showRevokeSessions = true;\n        const showMfaReset = this.props.mfaEnabled && Boolean(user.mfa_active);\n\n        if (user.delete_at > 0) {\n            currentRoles = (\n                <FormattedMessage\n                    id='admin.user_item.inactive'\n                    defaultMessage='Inactive'\n                />\n            );\n            showMakeActive = true;\n            showMakeNotActive = false;\n            showManageTeams = false;\n            showRevokeSessions = false;\n        }\n\n        let disableActivationToggle = false;\n        if (user.auth_service === Constants.LDAP_SERVICE) {\n            disableActivationToggle = true;\n        }\n\n        const deactivateMemberModal = this.renderDeactivateMemberModal();\n        const revokeSessionsModal = this.renderRevokeSessionsModal();\n        const promoteToUserModal = this.renderPromoteToUserModal();\n        const demoteToGuestModal = this.renderDemoteToGuestModal();\n\n        const {index, totalUsers} = this.props;\n        let openUp = false;\n        if (totalUsers > ROWS_FROM_BOTTOM_TO_OPEN_UP && totalUsers - index <= ROWS_FROM_BOTTOM_TO_OPEN_UP) {\n            openUp = true;\n        }\n\n        return (\n            <React.Fragment>\n                {deactivateMemberModal}\n                {revokeSessionsModal}\n                {promoteToUserModal}\n                {demoteToGuestModal}\n                <MenuWrapper>\n                    <div className='text-right'>\n                        <a>\n                            <span>{currentRoles} </span>\n                            <span className='caret'/>\n                        </a>\n                        {this.renderAccessToken()}\n                    </div>\n                    <Menu\n                        openLeft={true}\n                        openUp={openUp}\n                        ariaLabel={Utils.localizeMessage('admin.user_item.menuAriaLabel', 'User Actions Menu')}\n                    >\n                        <Menu.ItemAction\n                            show={showMakeActive}\n                            onClick={this.handleMakeActive}\n                            text={Utils.localizeMessage('admin.user_item.makeActive', 'Activate')}\n                            disabled={disableActivationToggle}\n                        />\n                        <Menu.ItemAction\n                            show={showMakeNotActive}\n                            onClick={this.handleShowDeactivateMemberModal}\n                            text={Utils.localizeMessage('admin.user_item.makeInactive', 'Deactivate')}\n                            disabled={disableActivationToggle}\n                        />\n                        <Menu.ItemAction\n                            show={!isGuest}\n                            onClick={this.handleManageRoles}\n                            text={Utils.localizeMessage('admin.user_item.manageRoles', 'Manage Roles')}\n                        />\n                        <Menu.ItemAction\n                            show={showManageTeams}\n                            onClick={this.handleManageTeams}\n                            text={Utils.localizeMessage('admin.user_item.manageTeams', 'Manage Teams')}\n                        />\n                        <Menu.ItemAction\n                            show={this.props.enableUserAccessTokens}\n                            onClick={this.handleManageTokens}\n                            text={Utils.localizeMessage('admin.user_item.manageTokens', 'Manage Tokens')}\n                        />\n                        <Menu.ItemAction\n                            show={showMfaReset}\n                            onClick={this.handleResetMfa}\n                            text={Utils.localizeMessage('admin.user_item.resetMfa', 'Remove MFA')}\n                        />\n                        <Menu.ItemAction\n                            show={Boolean(user.auth_service) && this.props.experimentalEnableAuthenticationTransfer}\n                            onClick={this.handleResetPassword}\n                            text={Utils.localizeMessage('admin.user_item.switchToEmail', 'Switch to Email/Password')}\n                        />\n                        <Menu.ItemAction\n                            show={!user.auth_service}\n                            onClick={this.handleResetPassword}\n                            text={Utils.localizeMessage('admin.user_item.resetPwd', 'Reset Password')}\n                        />\n                        <Menu.ItemAction\n                            show={!user.auth_service && user.id !== currentUser.id}\n                            onClick={this.handleResetEmail}\n                            text={Utils.localizeMessage('admin.user_item.resetEmail', 'Update Email')}\n                        />\n                        <Menu.ItemAction\n                            show={isGuest}\n                            onClick={this.handlePromoteToUser}\n                            text={Utils.localizeMessage('admin.user_item.promoteToUser', 'Promote to User')}\n                        />\n                        <Menu.ItemAction\n                            show={!isGuest && user.id !== currentUser.id && isLicensed}\n                            onClick={this.handleDemoteToGuest}\n                            text={Utils.localizeMessage('admin.user_item.demoteToGuest', 'Demote to Guest')}\n                        />\n                        <SystemPermissionGate permissions={[Permissions.REVOKE_USER_ACCESS_TOKEN]}>\n                            <Menu.ItemAction\n                                show={showRevokeSessions}\n                                onClick={this.handleShowRevokeSessionsModal}\n                                text={Utils.localizeMessage('admin.user_item.revokeSessions', 'Revoke Sessions')}\n                            />\n                        </SystemPermissionGate>\n                    </Menu>\n                </MenuWrapper>\n            </React.Fragment>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {updateUserActive, revokeAllSessionsForUser, promoteGuestToUser, demoteUserToGuest} from 'mattermost-redux/actions/users';\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\nimport {getBotAccounts} from 'mattermost-redux/selectors/entities/bots';\nimport {loadBots} from 'mattermost-redux/actions/bots';\nimport {getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport SystemUsersDropdown from './system_users_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    const bots = getBotAccounts(state);\n    const license = getLicense(state);\n    return {\n        isLicensed: license && license.IsLicensed === 'true',\n        config: Selectors.getConfig(state),\n        currentUser: getCurrentUser(state),\n        bots,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            updateUserActive,\n            revokeAllSessionsForUser,\n            promoteGuestToUser,\n            demoteUserToGuest,\n            loadBots,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsersDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport ManageRolesModal from 'components/admin_console/manage_roles_modal';\nimport ManageTeamsModal from 'components/admin_console/manage_teams_modal';\nimport ManageTokensModal from 'components/admin_console/manage_tokens_modal';\nimport ResetPasswordModal from 'components/admin_console/reset_password_modal';\nimport ResetEmailModal from 'components/admin_console/reset_email_modal/reset_email_modal.jsx';\nimport SearchableUserList from 'components/searchable_user_list/searchable_user_list.jsx';\nimport UserListRowWithError from 'components/user_list_row_with_error';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport SystemUsersDropdown from '../system_users_dropdown';\n\nexport default class SystemUsersList extends React.Component {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object),\n        usersPerPage: PropTypes.number,\n        total: PropTypes.number,\n        nextPage: PropTypes.func,\n        search: PropTypes.func.isRequired,\n        focusOnMount: PropTypes.bool,\n        renderFilterRow: PropTypes.func,\n\n        teamId: PropTypes.string.isRequired,\n        filter: PropTypes.string.isRequired,\n        term: PropTypes.string.isRequired,\n        onTermChange: PropTypes.func.isRequired,\n\n        /**\n         * Whether MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            getUser: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            page: 0,\n\n            filter: props.filter,\n            teamId: props.teamId,\n            showManageTeamsModal: false,\n            showManageRolesModal: false,\n            showManageTokensModal: false,\n            showPasswordModal: false,\n            showEmailModal: false,\n            user: null,\n        };\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (prevState.teamId !== nextProps.teamId || prevState.filter !== nextProps.filter) {\n            return {\n                page: 0,\n                teamId: nextProps.teamId,\n                filter: nextProps.filter,\n            };\n        }\n        return null;\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n\n        this.props.nextPage(this.state.page + 1);\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    search = (term) => {\n        this.props.search(term);\n\n        if (term !== '') {\n            this.setState({page: 0});\n        }\n    }\n\n    doManageTeams = (user) => {\n        this.setState({\n            showManageTeamsModal: true,\n            user,\n        });\n    }\n\n    doManageRoles = (user) => {\n        this.setState({\n            showManageRolesModal: true,\n            user,\n        });\n    }\n\n    doManageTokens = (user) => {\n        this.setState({\n            showManageTokensModal: true,\n            user,\n        });\n    }\n\n    doManageTeamsDismiss = () => {\n        this.setState({\n            showManageTeamsModal: false,\n            user: null,\n        });\n    }\n\n    doManageRolesDismiss = () => {\n        this.setState({\n            showManageRolesModal: false,\n            user: null,\n        });\n    }\n\n    doManageTokensDismiss = () => {\n        this.setState({\n            showManageTokensModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordReset = (user) => {\n        this.setState({\n            showPasswordModal: true,\n            user,\n        });\n    }\n\n    doPasswordResetDismiss = () => {\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doPasswordResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showPasswordModal: false,\n            user: null,\n        });\n    }\n\n    doEmailReset = (user) => {\n        this.setState({\n            showEmailModal: true,\n            user,\n        });\n    }\n\n    doEmailResetDismiss = () => {\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    doEmailResetSubmit = (user) => {\n        this.props.actions.getUser(user.id);\n\n        this.setState({\n            showEmailModal: false,\n            user: null,\n        });\n    }\n\n    getInfoForUser(user) {\n        const info = [];\n\n        if (user.auth_service) {\n            let service;\n            if (user.auth_service === Constants.LDAP_SERVICE || user.auth_service === Constants.SAML_SERVICE) {\n                service = user.auth_service.toUpperCase();\n            } else {\n                service = Utils.toTitleCase(user.auth_service);\n            }\n\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceNotEmail'\n                    id='admin.user_item.authServiceNotEmail'\n                    defaultMessage='**Sign-in Method:** {service}'\n                    values={{\n                        service,\n                    }}\n                />\n            );\n        } else {\n            info.push(\n                <FormattedMarkdownMessage\n                    key='admin.user_item.authServiceEmail'\n                    id='admin.user_item.authServiceEmail'\n                    defaultMessage='**Sign-in Method:** Email'\n                />\n            );\n        }\n\n        info.push(', ');\n        const userID = user.id;\n        info.push(\n            <FormattedMarkdownMessage\n                key='admin.user_item.user_id'\n                id='admin.user_item.user_id'\n                defaultMessage='**User ID:** {userID}'\n                values={{\n                    userID,\n                }}\n            />\n        );\n\n        if (this.props.mfaEnabled) {\n            info.push(', ');\n\n            if (user.mfa_active) {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaYes'\n                        id='admin.user_item.mfaYes'\n                        defaultMessage='**MFA**: Yes'\n                    />\n                );\n            } else {\n                info.push(\n                    <FormattedMarkdownMessage\n                        key='admin.user_item.mfaNo'\n                        id='admin.user_item.mfaNo'\n                        defaultMessage='**MFA**: No'\n                    />\n                );\n            }\n        }\n\n        return info;\n    }\n\n    renderCount(count, total, startCount, endCount, isSearch) {\n        if (total) {\n            if (isSearch) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countSearch'\n                        defaultMessage='{count, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            total,\n                        }}\n                    />\n                );\n            } else if (startCount !== 0 || endCount !== total) {\n                return (\n                    <FormattedMessage\n                        id='system_users_list.countPage'\n                        defaultMessage='{startCount, number} - {endCount, number} {count, plural, one {user} other {users}} of {total, number} total'\n                        values={{\n                            count,\n                            startCount: startCount + 1,\n                            endCount,\n                            total,\n                        }}\n                    />\n                );\n            }\n\n            return (\n                <FormattedMessage\n                    id='system_users_list.count'\n                    defaultMessage='{count, number} {count, plural, one {user} other {users}}'\n                    values={{\n                        count,\n                    }}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    render() {\n        const extraInfo = {};\n        if (this.props.users) {\n            for (const user of this.props.users) {\n                extraInfo[user.id] = this.getInfoForUser(user);\n            }\n        }\n\n        return (\n            <div>\n                <SearchableUserList\n                    {...this.props}\n                    renderCount={this.renderCount}\n                    extraInfo={extraInfo}\n                    actions={[SystemUsersDropdown]}\n                    actionProps={{\n                        mfaEnabled: this.props.mfaEnabled,\n                        enableUserAccessTokens: this.props.enableUserAccessTokens,\n                        experimentalEnableAuthenticationTransfer: this.props.experimentalEnableAuthenticationTransfer,\n                        doPasswordReset: this.doPasswordReset,\n                        doEmailReset: this.doEmailReset,\n                        doManageTeams: this.doManageTeams,\n                        doManageRoles: this.doManageRoles,\n                        doManageTokens: this.doManageTokens,\n                    }}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    search={this.search}\n                    page={this.state.page}\n                    term={this.props.term}\n                    onTermChange={this.props.onTermChange}\n                    rowComponentType={UserListRowWithError}\n                />\n                <ManageTeamsModal\n                    user={this.state.user}\n                    show={this.state.showManageTeamsModal}\n                    onModalDismissed={this.doManageTeamsDismiss}\n                />\n                <ManageRolesModal\n                    user={this.state.user}\n                    show={this.state.showManageRolesModal}\n                    onModalDismissed={this.doManageRolesDismiss}\n                />\n                <ManageTokensModal\n                    user={this.state.user}\n                    show={this.state.showManageTokensModal}\n                    onModalDismissed={this.doManageTokensDismiss}\n                />\n                <ResetPasswordModal\n                    user={this.state.user}\n                    show={this.state.showPasswordModal}\n                    onModalSubmit={this.doPasswordResetSubmit}\n                    onModalDismissed={this.doPasswordResetDismiss}\n                />\n                <ResetEmailModal\n                    user={this.state.user}\n                    show={this.state.showEmailModal}\n                    onModalSubmit={this.doEmailResetSubmit}\n                    onModalDismissed={this.doEmailResetDismiss}\n                />\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getUser, getProfiles, getProfilesInTeam, getProfilesWithoutTeam, searchProfiles, searchProfilesInTeam} from 'mattermost-redux/selectors/entities/users';\n\nimport {userSelectorOptionsFromFilter} from 'utils/filter_users';\n\nconst ALL_USERS = '';\nconst NO_TEAM = 'no_team';\nconst USER_ID_LENGTH = 26;\n\nexport function getUsers(state, loading, teamId, term, filter) {\n    if (loading) {\n        // Show no users while loading.\n        return [];\n    }\n    const filters = userSelectorOptionsFromFilter(filter);\n    if (term) {\n        let users = [];\n        if (teamId) {\n            users = searchProfilesInTeam(state, teamId, term, false, filters);\n        } else {\n            users = searchProfiles(state, term, false, filters);\n        }\n\n        if (users.length === 0 && term.length === USER_ID_LENGTH) {\n            const user = getUser(state, term);\n            if (user) {\n                users = [user];\n            }\n        }\n\n        return users;\n    }\n\n    if (teamId === ALL_USERS) {\n        return getProfiles(state, filters);\n    } else if (teamId === NO_TEAM) {\n        return getProfilesWithoutTeam(state, filters);\n    }\n\n    return getProfilesInTeam(state, teamId, filters);\n}\n\nexport function getNonBotUsers(state, loading, teamId, term, filter) {\n    return getUsers(state, loading, teamId, term, filter).filter((user) => {\n        return !user.is_bot;\n    });\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getUser} from 'mattermost-redux/actions/users';\n\nimport SystemUsersList from './system_users_list.jsx';\nimport {getNonBotUsers} from './selectors.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const users = getNonBotUsers(state, ownProps.loading, ownProps.teamId, ownProps.term, ownProps.filter);\n    return {\n        users,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUser,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsersList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport {debounce} from 'mattermost-redux/actions/helpers';\nimport {Permissions} from 'mattermost-redux/constants';\n\nimport {getStandardAnalytics} from 'actions/admin_actions.jsx';\nimport {Constants, UserSearchOptions, SearchUserTeamFilter, UserFilters} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n.jsx';\nimport {getUserOptionsFromFilter, searchUserOptionsFromFilter} from 'utils/filter_users';\n\nimport LocalizedInput from 'components/localized_input/localized_input';\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport SystemPermissionGate from 'components/permissions_gates/system_permission_gate';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport {emitUserLoggedOutEvent} from 'actions/global_actions.jsx';\n\nimport SystemUsersList from './list';\n\nconst USER_ID_LENGTH = 26;\nconst USERS_PER_PAGE = 50;\n\nexport default class SystemUsers extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of team objects\n         */\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        /**\n         * Title of the app or site.\n         */\n        siteName: PropTypes.string,\n\n        /**\n         * Whether or not MFA is licensed and enabled.\n         */\n        mfaEnabled: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not user access tokens are enabled.\n         */\n        enableUserAccessTokens: PropTypes.bool.isRequired,\n\n        /**\n         * Whether or not the experimental authentication transfer is enabled.\n         */\n        experimentalEnableAuthenticationTransfer: PropTypes.bool.isRequired,\n        totalUsers: PropTypes.number.isRequired,\n        searchTerm: PropTypes.string.isRequired,\n        teamId: PropTypes.string.isRequired,\n        filter: PropTypes.string.isRequired,\n        users: PropTypes.object.isRequired,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get teams\n             */\n            getTeams: PropTypes.func.isRequired,\n\n            /*\n             * Function to get statistics for a team\n             */\n            getTeamStats: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user\n             */\n            getUser: PropTypes.func.isRequired,\n\n            /*\n             * Function to get a user access token\n             */\n            getUserAccessToken: PropTypes.func.isRequired,\n            loadProfilesAndTeamMembers: PropTypes.func.isRequired,\n            loadProfilesWithoutTeam: PropTypes.func.isRequired,\n            getProfiles: PropTypes.func.isRequired,\n            setSystemUsersSearch: PropTypes.func.isRequired,\n            searchProfiles: PropTypes.func.isRequired,\n\n            /*\n             * Function to revoke all sessions in the system\n             */\n            revokeSessionsForAllUsers: PropTypes.func.isRequired,\n\n            /*\n            *  Function to log errors\n            */\n            logError: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            loading: true,\n            searching: false,\n            showRevokeAllSessionsModal: false,\n        };\n    }\n\n    componentDidMount() {\n        this.loadDataForTeam(this.props.teamId, this.props.filter);\n        this.props.actions.getTeams(0, 1000);\n    }\n\n    componentWillUnmount() {\n        this.props.actions.setSystemUsersSearch('', '', '');\n    }\n\n    loadDataForTeam = async (teamId, filter) => {\n        const {\n            getProfiles,\n            loadProfilesWithoutTeam,\n            loadProfilesAndTeamMembers,\n            getTeamStats,\n        } = this.props.actions;\n\n        if (this.props.searchTerm) {\n            this.doSearch(this.props.searchTerm, teamId, filter);\n            return;\n        }\n\n        const options = getUserOptionsFromFilter(filter);\n\n        if (teamId === SearchUserTeamFilter.ALL_USERS) {\n            await Promise.all([\n                getProfiles(0, Constants.PROFILE_CHUNK_SIZE, options),\n                getStandardAnalytics(),\n            ]);\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            await loadProfilesWithoutTeam(0, Constants.PROFILE_CHUNK_SIZE, options);\n        } else {\n            await Promise.all([\n                loadProfilesAndTeamMembers(0, Constants.PROFILE_CHUNK_SIZE, teamId, options),\n                getTeamStats(teamId),\n            ]);\n        }\n\n        this.setState({loading: false});\n    }\n\n    handleTeamChange = (e) => {\n        const teamId = e.target.value;\n        this.loadDataForTeam(teamId, this.props.filter);\n        this.props.actions.setSystemUsersSearch(this.props.searchTerm, teamId, this.props.filter);\n    }\n\n    handleFilterChange = (e) => {\n        const filter = e.target.value;\n        this.loadDataForTeam(this.props.teamId, filter);\n        this.props.actions.setSystemUsersSearch(this.props.searchTerm, this.props.teamId, filter);\n    }\n\n    handleTermChange = (term) => {\n        this.props.actions.setSystemUsersSearch(term, this.props.teamId, this.props.filter);\n    }\n    handleRevokeAllSessions = async () => {\n        const {data} = await this.props.actions.revokeSessionsForAllUsers();\n        if (data) {\n            emitUserLoggedOutEvent();\n        } else {\n            this.props.actions.logError({type: 'critical', message: 'Can\\'t revoke all sessions'});\n        }\n    }\n    handleRevokeAllSessionsCancel = () => {\n        this.setState({showRevokeAllSessionsModal: false});\n    }\n    handleShowRevokeAllSessionsModal = () => {\n        this.setState({showRevokeAllSessionsModal: true});\n    }\n\n    nextPage = async (page) => {\n        const {teamId, filter} = this.props;\n\n        // Paging isn't supported while searching\n        const {\n            getProfiles,\n            loadProfilesWithoutTeam,\n            loadProfilesAndTeamMembers,\n        } = this.props.actions;\n\n        const options = getUserOptionsFromFilter(filter);\n\n        if (teamId === SearchUserTeamFilter.ALL_USERS) {\n            await getProfiles(page + 1, USERS_PER_PAGE, options);\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            await loadProfilesWithoutTeam(page + 1, USERS_PER_PAGE, options);\n        } else {\n            await loadProfilesAndTeamMembers(page + 1, USERS_PER_PAGE, teamId, options);\n        }\n        this.setState({loading: false});\n    }\n\n    doSearch = debounce(async (term, teamId = this.props.teamId, filter = this.props.filter) => {\n        if (!term) {\n            return;\n        }\n\n        this.setState({loading: true});\n\n        const options = {\n            ...searchUserOptionsFromFilter(filter),\n            ...teamId && {team_id: teamId},\n            ...teamId === SearchUserTeamFilter.NO_TEAM && {\n                [UserSearchOptions.WITHOUT_TEAM]: true,\n            },\n            allow_inactive: true,\n        };\n\n        const {data: profiles} = await this.props.actions.searchProfiles(term, options);\n        if (profiles.length === 0 && term.length === USER_ID_LENGTH) {\n            await this.getUserByTokenOrId(term);\n        }\n\n        this.setState({loading: false});\n    }, Constants.SEARCH_TIMEOUT_MILLISECONDS);\n\n    getUserById = async (id) => {\n        if (this.props.users[id]) {\n            this.setState({loading: false});\n            return;\n        }\n\n        await this.props.actions.getUser(id);\n        this.setState({loading: false});\n    }\n\n    getUserByTokenOrId = async (id) => {\n        if (this.props.enableUserAccessTokens) {\n            const {data} = await this.props.actions.getUserAccessToken(id);\n\n            if (data) {\n                this.setState({term: data.user_id});\n                this.getUserById(data.user_id);\n                return;\n            }\n        }\n\n        this.getUserById(id);\n    }\n\n    renderRevokeAllUsersModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.system_users.revoke_all_sessions_modal_title'\n                defaultMessage='Revoke all sessions in the system'\n            />\n        );\n\n        const message = (\n            <div>\n                <FormattedMarkdownMessage\n                    id='admin.system_users.revoke_all_sessions_modal_message'\n                    defaultMessage='This action revokes all sessions in the system. All users will be logged out from all devices. Are you sure you want to revoke all sessions?'\n                />\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const revokeAllButton = (\n            <FormattedMessage\n                id='admin.system_users.revoke_all_sessions_button'\n                defaultMessage='Revoke All Sessions'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showRevokeAllSessionsModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={revokeAllButton}\n                onConfirm={this.handleRevokeAllSessions}\n                onCancel={this.handleRevokeAllSessionsCancel}\n            />\n        );\n    }\n\n    renderFilterRow = (doSearch) => {\n        const teams = this.props.teams.map((team) => (\n            <option\n                key={team.id}\n                value={team.id}\n            >\n                {team.display_name}\n            </option>\n        ));\n\n        return (\n            <div className='system-users__filter-row'>\n                <div className='system-users__filter'>\n                    <LocalizedInput\n                        id='searchUsers'\n                        className='form-control filter-textbox'\n                        placeholder={{id: t('filtered_user_list.search'), defaultMessage: 'Search users'}}\n                        onInput={doSearch}\n                    />\n                </div>\n                <label>\n                    <span className='system-users__team-filter-label'>\n                        <FormattedMessage\n                            id='filtered_user_list.team'\n                            defaultMessage='Team:'\n                        />\n                    </span>\n                    <select\n                        className='form-control system-users__team-filter'\n                        onChange={this.handleTeamChange}\n                        value={this.props.teamId}\n                    >\n                        <option value={SearchUserTeamFilter.ALL_USERS}>{Utils.localizeMessage('admin.system_users.allUsers', 'All Users')}</option>\n                        <option value={SearchUserTeamFilter.NO_TEAM}>{Utils.localizeMessage('admin.system_users.noTeams', 'No Teams')}</option>\n                        {teams}\n                    </select>\n                </label>\n                <label>\n                    <span className='system-users__filter-label'>\n                        <FormattedMessage\n                            id='filtered_user_list.userStatus'\n                            defaultMessage='User Status:'\n                        />\n                    </span>\n                    <select\n                        id='selectUserStatus'\n                        className='form-control system-users__filter'\n                        value={this.props.filter}\n                        onChange={this.handleFilterChange}\n                    >\n                        <option value=''>{Utils.localizeMessage('admin.system_users.allUsers', 'All Users')}</option>\n                        <option value={UserFilters.SYSTEM_ADMIN}>{Utils.localizeMessage('admin.system_users.system_admin', 'System Admin')}</option>\n                        <option value={UserFilters.SYSTEM_GUEST}>{Utils.localizeMessage('admin.system_users.guest', 'Guest')}</option>\n                        <option value={UserFilters.INACTIVE}>{Utils.localizeMessage('admin.system_users.inactive', 'Inactive')}</option>\n                    </select>\n                </label>\n            </div>\n        );\n    }\n\n    render() {\n        const revokeAllUsersModal = this.renderRevokeAllUsersModal();\n\n        return (\n            <div className='wrapper--fixed'>\n                <FormattedAdminHeader\n                    id='admin.system_users.title'\n                    defaultMessage='{siteName} Users'\n                    values={{\n                        siteName: this.props.siteName,\n                    }}\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className='more-modal__list member-list-holder'>\n                            <SystemUsersList\n                                loading={this.state.loading}\n                                renderFilterRow={this.renderFilterRow}\n                                search={this.doSearch}\n                                nextPage={this.nextPage}\n                                usersPerPage={USERS_PER_PAGE}\n                                total={this.props.totalUsers}\n                                teams={this.props.teams}\n                                teamId={this.props.teamId}\n                                filter={this.props.filter}\n                                term={this.props.searchTerm}\n                                onTermChange={this.handleTermChange}\n                                mfaEnabled={this.props.mfaEnabled}\n                                enableUserAccessTokens={this.props.enableUserAccessTokens}\n                                experimentalEnableAuthenticationTransfer={this.props.experimentalEnableAuthenticationTransfer}\n                            />\n                        </div>\n                        <SystemPermissionGate permissions={[Permissions.REVOKE_USER_ACCESS_TOKEN]}>\n                            {revokeAllUsersModal}\n                            <div className='padding-top padding-bottom x2'>\n                                <button\n                                    id='revoke-all-users'\n                                    className='btn btn-default'\n                                    onClick={() => this.handleShowRevokeAllSessionsModal()}\n                                >\n                                    <FormattedMessage\n                                        id='admin.system_users.revokeAllSessions'\n                                        defaultMessage='Revoke All Sessions'\n                                    />\n                                </button>\n                            </div>\n                        </SystemPermissionGate>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTeams, getTeamStats} from 'mattermost-redux/actions/teams';\nimport {\n    getUser,\n    getUserAccessToken,\n    getProfiles,\n    searchProfiles,\n    revokeSessionsForAllUsers,\n} from 'mattermost-redux/actions/users';\nimport {logError} from 'mattermost-redux/actions/errors';\nimport {getTeamsList} from 'mattermost-redux/selectors/entities/teams';\nimport {getUsers} from 'mattermost-redux/selectors/entities/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {Stats} from 'mattermost-redux/constants';\n\nimport {loadProfilesAndTeamMembers, loadProfilesWithoutTeam} from 'actions/user_actions.jsx';\n\nimport {setSystemUsersSearch} from 'actions/views/search';\nimport {SearchUserTeamFilter} from 'utils/constants';\n\nimport SystemUsers from './system_users.jsx';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n\n    const siteName = config.SiteName;\n    const mfaEnabled = config.EnableMultifactorAuthentication === 'true';\n    const enableUserAccessTokens = config.EnableUserAccessTokens === 'true';\n    const experimentalEnableAuthenticationTransfer = config.ExperimentalEnableAuthenticationTransfer === 'true';\n\n    const search = state.views.search.systemUsersSearch;\n    let totalUsers = 0;\n    let searchTerm = '';\n    let teamId = '';\n    let filter = '';\n    if (search) {\n        searchTerm = search.term || '';\n        teamId = search.team || '';\n        filter = search.filter || '';\n\n        if (!teamId || teamId === SearchUserTeamFilter.ALL_USERS) {\n            const stats = state.entities.admin.analytics || {[Stats.TOTAL_USERS]: 0, [Stats.TOTAL_INACTIVE_USERS]: 0};\n            totalUsers = stats[Stats.TOTAL_USERS] + stats[Stats.TOTAL_INACTIVE_USERS];\n        } else if (teamId === SearchUserTeamFilter.NO_TEAM) {\n            totalUsers = 0;\n        } else {\n            const stats = state.entities.teams.stats[teamId] || {total_member_count: 0};\n            totalUsers = stats.total_member_count;\n        }\n    }\n\n    return {\n        teams: getTeamsList(state),\n        siteName,\n        mfaEnabled,\n        totalUsers,\n        searchTerm,\n        teamId,\n        filter,\n        enableUserAccessTokens,\n        users: getUsers(state),\n        experimentalEnableAuthenticationTransfer,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeams,\n            getTeamStats,\n            getUser,\n            getUserAccessToken,\n            loadProfilesAndTeamMembers,\n            setSystemUsersSearch,\n            loadProfilesWithoutTeam,\n            getProfiles,\n            searchProfiles,\n            revokeSessionsForAllUsers,\n            logError,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUsers);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport './admin_button_outline.scss';\n\nexport default class AdminButtonOutline extends React.Component {\n    static propTypes = {\n        onClick: PropTypes.func.isRequired,\n        children: PropTypes.string.isRequired,\n    }\n    render() {\n        return (\n            <button\n                onClick={this.props.onClick}\n                className={'AdminButtonOutline btn btn-primary'}\n            >\n                {this.props.children}\n            </button>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Client4} from 'mattermost-redux/client';\n\nimport ProfilePicture from 'components/profile_picture';\nimport * as Utils from 'utils/utils.jsx';\n\nimport './admin_user_card.scss';\n\nconst Bullet = (props) => {\n    if ((props.user.first_name || props.user.last_name) && props.user.nickname) {\n        return (<span>{' • '}</span>);\n    }\n    return null;\n};\n\nconst AdminUserCard = (props) => (\n    <div className='AdminUserCard'>\n        <div className='AdminUserCard__header'>\n            <ProfilePicture\n                src={Client4.getProfilePictureUrl(props.user.id, props.user.last_picture_update)}\n                size='xxl'\n                wrapperClass='admin-user-card'\n                userId={props.user.id}\n            />\n            <div className='AdminUserCard__user-info'>\n                <span>{props.user.first_name} {props.user.last_name}</span>\n                <Bullet user={props.user}/>\n                <span className='AdminUserCard__user-nickname'>{props.user.nickname}</span>\n            </div>\n            <div className='AdminUserCard__user-id'>\n                {Utils.localizeMessage('admin.userManagement.userDetail.userId', 'User ID:')} {props.user.id}\n            </div>\n        </div>\n        <div className='AdminUserCard__body'>\n            {props.body}\n        </div>\n        <div className='AdminUserCard__footer'>\n            {props.footer}\n        </div>\n    </div>\n);\n\nBullet.propTypes = {\n    user: PropTypes.shape({\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        nickname: PropTypes.string,\n        last_picture_update: PropTypes.number,\n    }),\n};\n\nAdminUserCard.propTypes = {\n    user: PropTypes.shape({\n        first_name: PropTypes.string,\n        last_name: PropTypes.string,\n        nickname: PropTypes.string,\n        last_picture_update: PropTypes.number,\n        id: PropTypes.string,\n    }),\n    body: PropTypes.element,\n    footer: PropTypes.element,\n};\n\nexport default AdminUserCard;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nimport './abstract_list.scss';\n\nconst PAGE_SIZE = 10;\n\nexport default class AbstractList extends React.PureComponent {\n    static propTypes = {\n        userId: PropTypes.string.isRequired,\n        headerLabels: PropTypes.array.isRequired,\n        data: PropTypes.arrayOf(PropTypes.object),\n        onPageChangedCallback: PropTypes.func,\n        total: PropTypes.number.isRequired,\n        renderRow: PropTypes.func.isRequired,\n        emptyListTextId: PropTypes.string.isRequired,\n        emptyListTextDefaultMessage: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            getTeamsData: PropTypes.func.isRequired,\n            removeGroup: PropTypes.func,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        data: [],\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            page: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.performSearch(this.state.page);\n    }\n\n    previousPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page, loading: true});\n        this.performSearch(page);\n    }\n\n    nextPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page + 1;\n        this.setState({page, loading: true});\n        this.performSearch(page);\n    }\n\n    performSearch = () => {\n        const newState = {...this.state};\n        const userId = this.props.userId;\n        delete newState.page;\n\n        newState.loading = true;\n        this.setState(newState);\n\n        this.props.actions.getTeamsData(userId).then(() => {\n            if (this.props.onPageChangedCallback) {\n                this.props.onPageChangedCallback(this.getPaging());\n            }\n            this.setState({loading: false});\n        });\n    }\n\n    getPaging() {\n        const startCount = (this.state.page * PAGE_SIZE) + 1;\n        let endCount = (this.state.page * PAGE_SIZE) + PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        return {startCount, endCount, total};\n    }\n\n    renderHeaderLabels = () => {\n        return (\n            <React.Fragment>\n                {this.props.headerLabels.map((headerLabel, id) => (\n                    <div\n                        key={id}\n                        className='AbstractList__header-label'\n                        style={headerLabel.style}\n                    >{headerLabel.default}</div>\n                ))}\n            </React.Fragment>\n        );\n    }\n\n    renderRows = () => {\n        if (this.state.loading) {\n            return (\n                <div className='AbstractList__loading'>\n                    <i className='fa fa-spinner fa-pulse fa-2x'/>\n                </div>\n            );\n        }\n        if (this.props.data.length === 0) {\n            return (\n                <div className='AbstractList__empty'>\n                    <FormattedMessage\n                        id={this.props.emptyListTextId}\n                        defaultMessage={this.props.emptyListTextDefaultMessage}\n                    />\n                </div>\n            );\n        }\n        const pageStart = this.state.page < 1 ? 0 : (this.state.page * PAGE_SIZE); // ie 0, 10, 20, etc.\n        const pageEnd = this.state.page < 1 ? PAGE_SIZE : (this.state.page + 1) * PAGE_SIZE; // ie 10, 20, 30, etc.\n        const pageData = this.props.data.slice(pageStart, pageEnd).map(this.props.renderRow); // ie 0-10, 10-20, etc.\n        return pageData;\n    }\n\n    render = () => {\n        const {startCount, endCount, total} = this.getPaging();\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n        return (\n            <div className='AbstractList'>\n                <div className='AbstractList__header'>\n                    {this.renderHeaderLabels()}\n                </div>\n                <div className='AbstractList__body'>\n                    {this.renderRows()}\n                </div>\n                {total > 0 &&\n                    <div className='AbstractList__footer'>\n                        <div className='counter'>\n                            <FormattedMessage\n                                id='admin.team_channel_settings.list.paginatorCount'\n                                defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                                values={{\n                                    startCount,\n                                    endCount,\n                                    total,\n                                }}\n                            />\n                        </div>\n                        <button\n                            className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                            onClick={firstPage ? null : this.previousPage}\n                            disabled={firstPage}\n                        >\n                            <PreviousIcon/>\n                        </button>\n                        <button\n                            className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                            onClick={lastPage ? null : this.nextPage}\n                            disabled={lastPage}\n                        >\n                            <NextIcon/>\n                        </button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nexport default class EllipsisHorizontalIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <FormattedMessage\n                    id='generic_icons.elipsisHorizontalIcon'\n                    defaultMessage='Ellipsis Horizontal Icon'\n                >\n                    {(ariaLabel) => (\n                        <svg\n                            width='24px'\n                            height='24px'\n                            viewBox='0 0 24 24'\n                            role='img'\n                            aria-label={ariaLabel}\n                        >\n                            <path d='M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z'/>\n                        </svg>\n                    )}\n                </FormattedMessage>\n            </span>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {localizeMessage} from 'utils/utils.jsx';\nimport EllipsisHorizontalIcon from 'components/widgets/icons/ellipsis_h_icon';\n\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nexport default class TeamListDropdown extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        doRemoveUserFromTeam: PropTypes.func.isRequired,\n        doMakeUserTeamAdmin: PropTypes.func.isRequired,\n        doMakeUserTeamMember: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            serverError: null,\n        };\n    }\n\n    render() {\n        const {team} = this.props;\n        const isAdmin = team.scheme_admin;\n        const isMember = team.scheme_user && !team.scheme_admin;\n        const isGuest = team.scheme_guest;\n        const showMakeTeamAdmin = !isAdmin && !isGuest;\n        const showMakeTeamMember = !isMember && !isGuest;\n\n        return (\n            <MenuWrapper>\n                <button\n                    id={`teamListDropdown_${team.id}`}\n                    className='dropdown-toggle theme color--link style--none'\n                    type='button'\n                    aria-expanded='true'\n                >\n                    <span className='SystemUserDetail__actions-menu-icon'><EllipsisHorizontalIcon/></span>\n                </button>\n                <div>\n                    <Menu\n                        openLeft={true}\n                        openUp={false}\n                        ariaLabel={localizeMessage('team_members_dropdown.menuAriaLabel', 'Team member role change')}\n                    >\n                        <Menu.ItemAction\n                            id='makeTeamAdmin'\n                            show={showMakeTeamAdmin}\n                            onClick={() => this.props.doMakeUserTeamAdmin(team.id)}\n                            text={localizeMessage('team_members_dropdown.makeAdmin', 'Make Team Admin')}\n                        />\n                        <Menu.ItemAction\n                            show={showMakeTeamMember}\n                            onClick={() => this.props.doMakeUserTeamMember(team.id)}\n                            text={localizeMessage('team_members_dropdown.makeMember', 'Make Team Member')}\n                        />\n                        <Menu.ItemAction\n                            id='removeFromTeam'\n                            show={true}\n                            onClick={() => this.props.doRemoveUserFromTeam(team.id)}\n                            text={localizeMessage('team_members_dropdown.leave_team', 'Remove from Team')}\n                            buttonClass='SystemUserDetail__action-remove-team'\n                        />\n                    </Menu>\n                </div>\n            </MenuWrapper>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils';\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nimport './team_row.scss';\nimport TeamListDropdown from './team_list_dropdown';\n\nexport default class TeamRow extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        doRemoveUserFromTeam: PropTypes.func.isRequired,\n        doMakeUserTeamAdmin: PropTypes.func.isRequired,\n        doMakeUserTeamMember: PropTypes.func.isRequired,\n    };\n    renderTeamType = (team) => {\n        if (team.group_constrained) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamType.groupSync'}\n                    defaultMessage={'Group sync'}\n                />\n            );\n        }\n        if (team.allow_open_invite) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamType.anyoneCanJoin'}\n                    defaultMessage={'Anyone can join'}\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id={'admin.systemUserDetail.teamList.teamType.inviteOnly'}\n                defaultMessage={'Invite only'}\n            />\n        );\n    }\n    renderTeamRole = (team) => {\n        if (team.scheme_guest) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamRole.guest'}\n                    defaultMessage={'Guest'}\n                />\n            );\n        }\n        if (team.scheme_admin && !team.scheme_guest) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamRole.admin'}\n                    defaultMessage={'Team Admin'}\n                />\n            );\n        }\n        if (team.scheme_user && !team.scheme_guest && !team.scheme_admin) {\n            return (\n                <FormattedMessage\n                    id={'admin.systemUserDetail.teamList.teamRole.member'}\n                    defaultMessage={'Team Member'}\n                />\n            );\n        }\n        return null;\n    }\n    render = () => {\n        const {team} = this.props;\n        const teamIconUrl = Utils.imageURLForTeam(team);\n        return (\n            <div className={'TeamRow'}>\n                <div className='TeamRow__row'>\n                    <div className='TeamRow__team-name'>\n                        <div className='col-sm-auto'>\n                            <TeamIcon\n                                size='sm'\n                                url={teamIconUrl}\n                                name={team.display_name}\n                            />\n                        </div>\n                        <div className='col-md-auto'>\n                            <b>{team.display_name}</b>\n                            {team.description && (\n                                <div className='overflow--ellipsis text-nowrap TeamRow__team-description'>\n                                    {team.description}\n                                </div>)}\n                        </div>\n\n                    </div>\n\n                    <span className='TeamRow__description'>\n                        {this.renderTeamType(team)}\n                    </span>\n\n                    <span className='TeamRow__description'>\n                        {this.renderTeamRole(team)}\n                    </span>\n\n                    <span className='TeamRow__actions'>\n                        <TeamListDropdown\n                            team={team}\n                            doRemoveUserFromTeam={this.props.doRemoveUserFromTeam}\n                            doMakeUserTeamAdmin={this.props.doMakeUserTeamAdmin}\n                            doMakeUserTeamMember={this.props.doMakeUserTeamMember}\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n    };\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AbstractList from './abstract_list.jsx';\nimport TeamRow from './team_row.jsx';\n\nconst headerLabels = [\n    {\n        id: t('admin.systemUserDetail.teamList.header.name'),\n        default: 'Name',\n        style: {\n            flexGrow: 1,\n            minWidth: '284px',\n            marginLeft: '16px',\n        },\n    },\n    {\n        id: t('admin.systemUserDetail.teamList.header.type'),\n        default: 'Type',\n        style: {\n            width: '150px',\n        },\n    },\n    {\n        id: t('admin.systemUserDetail.teamList.header.role'),\n        default: 'Role',\n        style: {\n            width: '150px',\n        },\n    },\n    {\n        style: {\n            width: '150px',\n        },\n    },\n];\n\nexport default class TeamList extends React.Component {\n    static propTypes = {\n        userId: PropTypes.string.isRequired,\n        locale: PropTypes.string.isRequired,\n        emptyListTextId: PropTypes.string.isRequired,\n        emptyListTextDefaultMessage: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            getTeamsData: PropTypes.func.isRequired,\n            getTeamMembersForUser: PropTypes.func.isRequired,\n            removeUserFromTeam: PropTypes.func.isRequired,\n            updateTeamMemberSchemeRoles: PropTypes.func.isRequired,\n        }).isRequired,\n        userDetailCallback: PropTypes.func.isRequired,\n        refreshTeams: PropTypes.bool.isRequired,\n    }\n\n    static defaultProps = {\n        emptyListTextId: t('admin.team_settings.team_list.no_teams_found'),\n        emptyListTextDefaultMessage: 'No teams found',\n        refreshTeams: false,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            teamsWithMemberships: [],\n            serverError: null,\n        };\n    }\n\n    componentDidMount() {\n        this.getTeamsAndMemberships();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.refreshTeams !== this.props.refreshTeams) {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    getTeamsAndMemberships = async (userId = this.props.userId) => {\n        const teams = await this.props.actions.getTeamsData(userId);\n        const memberships = await this.props.actions.getTeamMembersForUser(userId);\n        return Promise.all([teams, memberships]).\n            then(this.mergeTeamsWithMemberships).\n            then((teamsWithMemberships) => {\n                this.setState({teamsWithMemberships});\n                this.props.userDetailCallback(teamsWithMemberships);\n            });\n    }\n\n    mergeTeamsWithMemberships = (data) => {\n        const teams = data[0].data;\n        const memberships = data[1].data;\n        let teamsWithMemberships = teams.map((object) => {\n            const results = memberships.filter((team) => team.team_id === object.id);\n            const team = {...object, ...results[0]};\n            return team;\n        });\n        teamsWithMemberships = filterAndSortTeamsByDisplayName(teamsWithMemberships, this.props.locale);\n        return teamsWithMemberships;\n    }\n\n    doRemoveUserFromTeam = async (teamId) => {\n        const {error} = await this.props.actions.removeUserFromTeam(teamId, this.props.userId);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    doMakeUserTeamAdmin = async (teamId) => {\n        const {error} = await this.props.actions.updateTeamMemberSchemeRoles(teamId, this.props.userId, true, true);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    doMakeUserTeamMember = async (teamId) => {\n        const {error} = await this.props.actions.updateTeamMemberSchemeRoles(teamId, this.props.userId, true, false);\n        if (error) {\n            this.setState({serverError: error.message});\n        } else {\n            this.getTeamsAndMemberships();\n        }\n    }\n\n    render() {\n        let serverError = null;\n        if (this.state.serverError) {\n            serverError = (\n                <div className='SystemUserDetail__error has-error'>\n                    <label className='has-error control-label'>{this.state.serverError}</label>\n                </div>\n            );\n        }\n        return (\n            <React.Fragment>\n                <div>{serverError}</div>\n                <AbstractList\n                    headerLabels={headerLabels}\n                    renderRow={this.renderRow}\n                    total={this.state.teamsWithMemberships.length}\n                    data={this.state.teamsWithMemberships}\n                    actions={this.props.actions}\n                    emptyListTextId={this.props.emptyListTextId}\n                    emptyListTextDefaultMessage={this.props.emptyListTextDefaultMessage}\n                    userId={this.props.userId}\n                />\n            </React.Fragment>\n        );\n    }\n\n    renderRow = (item) => {\n        return (\n            <TeamRow\n                key={item.id}\n                team={item}\n                doRemoveUserFromTeam={this.doRemoveUserFromTeam}\n                doMakeUserTeamAdmin={this.doMakeUserTeamAdmin}\n                doMakeUserTeamMember={this.doMakeUserTeamMember}\n            />\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    getTeamsForUser,\n    getTeamMembersForUser,\n    removeUserFromTeam,\n    updateTeamMemberSchemeRoles,\n} from 'mattermost-redux/actions/teams';\n\nimport {getCurrentLocale} from 'selectors/i18n';\n\nimport TeamList from './team_list.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        locale: getCurrentLocale(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeamsData: getTeamsForUser,\n            getTeamMembersForUser,\n            removeUserFromTeam,\n            updateTeamMemberSchemeRoles,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamList);","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class EmailIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='0 0 24 24'\n                >\n                    <path\n                        fill='inherit'\n                        d='M22 6C22 4.9 21.1 4 20 4H4C2.9 4 2 4.9 2 6V18C2 19.1 2.9 20 4 20H20C21.1 20 22 19.1 22 18V6M20 6L12 11L4 6H20M20 18H4V8L12 13L20 8V18Z'\n                    />\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class AtIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='0 0 24 24'\n                >\n                    <path\n                        fill='inherit'\n                        d='M12,15C12.81,15 13.5,14.7 14.11,14.11C14.7,13.5 15,12.81 15,12C15,11.19 14.7,10.5 14.11,9.89C13.5,9.3 12.81,9 12,9C11.19,9 10.5,9.3 9.89,9.89C9.3,10.5 9,11.19 9,12C9,12.81 9.3,13.5 9.89,14.11C10.5,14.7 11.19,15 12,15M12,2C14.75,2 17.1,3 19.05,4.95C21,6.9 22,9.25 22,12V13.45C22,14.45 21.65,15.3 21,16C20.3,16.67 19.5,17 18.5,17C17.3,17 16.31,16.5 15.56,15.5C14.56,16.5 13.38,17 12,17C10.63,17 9.45,16.5 8.46,15.54C7.5,14.55 7,13.38 7,12C7,10.63 7.5,9.45 8.46,8.46C9.45,7.5 10.63,7 12,7C13.38,7 14.55,7.5 15.54,8.46C16.5,9.45 17,10.63 17,12V13.45C17,13.86 17.16,14.22 17.46,14.53C17.76,14.84 18.11,15 18.5,15C18.92,15 19.27,14.84 19.57,14.53C19.87,14.22 20,13.86 20,13.45V12C20,9.81 19.23,7.93 17.65,6.35C16.07,4.77 14.19,4 12,4C9.81,4 7.93,4.77 6.35,6.35C4.77,7.93 4,9.81 4,12C4,14.19 4.77,16.07 6.35,17.65C7.93,19.23 9.81,20 12,20H17V22H12C9.25,22 6.9,21 4.95,19.05C3,17.1 2,14.75 2,12C2,9.25 3,6.9 4.95,4.95C6.9,3 9.25,2 12,2Z'\n                    />\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nexport default class ShieldOutlineIcon extends React.PureComponent {\n    render() {\n        return (\n            <span {...this.props}>\n                <svg\n                    width='100%'\n                    height='100%'\n                    viewBox='0 0 24 24'\n                >\n                    <path\n                        fill='inherit'\n                        d='M21,11C21,16.55 17.16,21.74 12,23C6.84,21.74 3,16.55 3,11V5L12,1L21,5V11M12,21C15.75,20 19,15.54 19,11.22V6.3L12,3.18L5,6.3V11.22C5,15.54 8.25,20 12,21Z'\n                    />\n                </svg>\n            </span>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Redirect} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\nimport {Overlay, Tooltip} from 'react-bootstrap';\n\nimport {isEmail} from 'mattermost-redux/utils/helpers';\n\nimport {adminResetMfa, adminResetEmail} from 'actions/admin_actions.jsx';\n\nimport {Constants} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport ResetPasswordModal from 'components/admin_console/reset_password_modal';\nimport AdminButtonOutline from 'components/admin_console/admin_button_outline/admin_button_outline';\nimport AdminUserCard from 'components/admin_console/admin_user_card/admin_user_card';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport SaveButton from 'components/save_button';\nimport FormError from 'components/form_error';\nimport TeamSelectorModal from 'components/team_selector_modal';\n\nimport TeamList from 'components/admin_console/system_user_detail/team_list';\nimport EmailIcon from 'components/widgets/icons/email_icon.jsx';\nimport AtIcon from 'components/widgets/icons/at_icon.jsx';\nimport SheidOutlineIcon from 'components/widgets/icons/shield_outline_icon.jsx';\n\nimport './system_user_detail.scss';\n\nexport default class SystemUserDetail extends React.PureComponent {\n    static propTypes = {\n        user: PropTypes.object.isRequired,\n        mfaEnabled: PropTypes.bool.isRequired,\n        actions: PropTypes.shape({\n            updateUserActive: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n            addUserToTeam: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        user: {\n            email: null,\n        },\n        mfaEnabled: false,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            teams: null,\n            teamIds: null,\n            loading: false,\n            searching: false,\n            showPasswordModal: false,\n            showDeactivateMemberModal: false,\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n            customComponentWrapperClass: '',\n            user: {\n                email: this.props.user.email,\n            },\n            addTeamOpen: false,\n            refreshTeams: true,\n        };\n    }\n\n    setTeamsData = (teams) => {\n        const teamIds = teams.map((team) => team.team_id);\n        this.setState({teams});\n        this.setState({teamIds});\n        this.setState({refreshTeams: false});\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    addTeams = (teams) => {\n        const promises = [];\n        for (const team of teams) {\n            promises.push(this.props.actions.addUserToTeam(team.id, this.props.user.id));\n        }\n        Promise.all(promises).finally(this.setState({refreshTeams: true}));\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    doPasswordReset = (user) => {\n        this.setState({\n            showPasswordModal: true,\n            user,\n        });\n    }\n\n    doPasswordResetDismiss = () => {\n        this.setState({\n            showPasswordModal: false,\n        });\n    }\n\n    doPasswordResetSubmit = () => {\n        this.setState({\n            showPasswordModal: false,\n        });\n    }\n\n    handleMakeActive = (e) => {\n        e.preventDefault();\n        this.props.actions.updateUserActive(this.props.user.id, true).\n            then(this.onUpdateActiveResult);\n    }\n\n    handleShowDeactivateMemberModal = (e) => {\n        e.preventDefault();\n        this.setState({showDeactivateMemberModal: true});\n    }\n\n    handleDeactivateMember = () => {\n        this.props.actions.updateUserActive(this.props.user.id, false).\n            then(this.onUpdateActiveResult);\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    onUpdateActiveResult = ({error}) => {\n        if (error) {\n            this.setState({error});\n        }\n    }\n\n    handleDeactivateCancel = () => {\n        this.setState({showDeactivateMemberModal: false});\n    }\n\n    // TODO: add error handler function\n    handleResetMfa = (e) => {\n        e.preventDefault();\n        adminResetMfa(this.props.user.id, null, null);\n    }\n\n    handleEmailChange = (e) => {\n        const emailChanged = e.target.value !== this.props.user.email;\n        this.setState({\n            user: {\n                email: e.target.value,\n            },\n            saveNeeded: emailChanged,\n        });\n        this.props.actions.setNavigationBlocked(emailChanged);\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n        if (this.state.user.email !== this.props.user.email) {\n            if (!isEmail(this.state.user.email)) {\n                this.setState({serverError: 'Invalid Email address'});\n                return;\n            }\n            const user = Object.assign({}, this.props.user);\n            const email = this.state.user.email.trim().toLowerCase();\n            user.email = email;\n\n            this.setState({serverError: null});\n\n            adminResetEmail(\n                user,\n                () => {\n                    this.props.history.push('/admin_console/user_management/users');\n                },\n                (err) => {\n                    const serverError = err.message ? err.message : err;\n                    this.setState({serverError});\n                }\n            );\n\n            this.setState({\n                saving: false,\n                saveNeeded: false,\n                serverError: null,\n            });\n            this.props.actions.setNavigationBlocked(false);\n        }\n    }\n\n    renderDeactivateMemberModal = (user) => {\n        const title = (\n            <FormattedMessage\n                id='deactivate_member_modal.title'\n                defaultMessage='Deactivate {username}'\n                values={{\n                    username: user.username,\n                }}\n            />\n        );\n\n        let warning;\n        if (user.auth_service !== '' && user.auth_service !== Constants.EMAIL_SERVICE) {\n            warning = (\n                <strong>\n                    <br/>\n                    <br/>\n                    <FormattedMessage\n                        id='deactivate_member_modal.sso_warning'\n                        defaultMessage='You must also deactivate this user in the SSO provider or they will be reactivated on next login or sync.'\n                    />\n                </strong>\n            );\n        }\n\n        const message = (\n            <div>\n                <FormattedMessage\n                    id='deactivate_member_modal.desc'\n                    defaultMessage='This action deactivates {username}. They will be logged out and not have access to any teams or channels on this system. Are you sure you want to deactivate {username}?'\n                    values={{\n                        username: user.username,\n                    }}\n                />\n                {warning}\n            </div>\n        );\n\n        const confirmButtonClass = 'btn btn-danger';\n        const deactivateMemberButton = (\n            <FormattedMessage\n                id='deactivate_member_modal.deactivate'\n                defaultMessage='Deactivate'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showDeactivateMemberModal}\n                title={title}\n                message={message}\n                confirmButtonClass={confirmButtonClass}\n                confirmButtonText={deactivateMemberButton}\n                onConfirm={this.handleDeactivateMember}\n                onCancel={this.handleDeactivateCancel}\n            />\n        );\n    }\n\n    renderActivateDeactivate = () => {\n        if (this.props.user.delete_at > 0) {\n            return (\n                <AdminButtonOutline\n                    onClick={this.handleMakeActive}\n                    className='admin-btn-default'\n                >\n                    {Utils.localizeMessage('admin.user_item.makeActive', 'Activate')}\n                </AdminButtonOutline>\n            );\n        }\n        return (\n            <AdminButtonOutline\n                onClick={this.handleShowDeactivateMemberModal}\n                className='admin-btn-default'\n            >\n                {Utils.localizeMessage('admin.user_item.makeInactive', 'Deactivate')}\n            </AdminButtonOutline>\n        );\n    }\n\n    renderRemoveMFA = () => {\n        if (this.props.user.mfa_active) {\n            return (\n                <AdminButtonOutline\n                    onClick={this.handleResetMfa}\n                    className='admin-btn-default'\n                >\n                    {'Remove MFA'}\n                </AdminButtonOutline>\n            );\n        }\n        return null;\n    }\n\n    getAuthenticationText() {\n        const {user, mfaEnabled} = this.props;\n        let authLine;\n\n        if (user.auth_service) {\n            let service;\n            if (user.auth_service === Constants.LDAP_SERVICE || user.auth_service === Constants.SAML_SERVICE) {\n                service = user.auth_service.toUpperCase();\n            } else {\n                service = Utils.toTitleCase(user.auth_service);\n            }\n            authLine = service;\n        } else {\n            authLine = Utils.localizeMessage('admin.userManagement.userDetail.email', 'Email');\n        }\n        if (mfaEnabled) {\n            if (user.mfa_active) {\n                authLine += ', ';\n                authLine += Utils.localizeMessage('admin.userManagement.userDetail.mfa', 'MFA');\n            }\n        }\n        return authLine;\n    }\n\n    render() {\n        const {user} = this.props;\n        let deactivateMemberModal;\n        let currentRoles = (\n            <FormattedMessage\n                id='admin.user_item.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (!user.id) {\n            return (\n                <Redirect to={{pathname: '/admin_console/user_management/users'}}/>\n            );\n        }\n\n        if (user.id) {\n            deactivateMemberModal = this.renderDeactivateMemberModal(user);\n            if (user.delete_at > 0) {\n                currentRoles = (\n                    <FormattedMessage\n                        id='admin.user_item.inactive'\n                        defaultMessage='Inactive'\n                    />\n                );\n            }\n            if (user.roles.length > 0 && Utils.isSystemAdmin(user.roles)) {\n                currentRoles = (\n                    <FormattedMessage\n                        id='team_members_dropdown.systemAdmin'\n                        defaultMessage='System Admin'\n                    />\n                );\n            }\n            if (user.roles.length > 0 && Utils.isGuest(user)) {\n                currentRoles = (\n                    <FormattedMessage\n                        id='team_members_dropdown.guest'\n                        defaultMessage='Guest'\n                    />\n                );\n            }\n        }\n\n        return (\n            <div className='SystemUserDetail wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/users'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.systemUserDetail.title'\n                            defaultMessage='User Configuration'\n                        />\n                    </div>\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <AdminUserCard\n                            user={user}\n                            body={\n                                <React.Fragment>\n                                    <span className='SystemUserDetail__position'>{user.position}</span>\n                                    <span className='SystemUserDetail__field-label'>{Utils.localizeMessage('admin.userManagement.userDetail.email', 'Email')}</span>\n                                    <div>\n                                        <EmailIcon className='SystemUserDetail__field-icon'/>\n                                        <input\n                                            className='SystemUserDetail__input form-control'\n                                            type='text'\n                                            value={this.state.user.email}\n                                            onChange={this.handleEmailChange}\n                                        />\n                                    </div>\n                                    <span className='SystemUserDetail__field-label'>{Utils.localizeMessage('admin.userManagement.userDetail.username', 'Username')}</span>\n                                    <div>\n                                        <AtIcon className='SystemUserDetail__field-icon'/>\n                                        <span className='SystemUserDetail__field-text'>{user.username}</span>\n                                    </div>\n                                    <span className='SystemUserDetail__field-label'>{Utils.localizeMessage('admin.userManagement.userDetail.authenticationMethod', 'Authentication Method')}</span>\n                                    <div className='SystemUserDetail__field-text'>\n                                        <SheidOutlineIcon className='SystemUserDetail__field-icon'/>\n                                        <span className='SystemUserDetail__field-text'>{this.getAuthenticationText()}</span>\n                                    </div>\n\n                                    <span className='SystemUserDetail__field-label'>{Utils.localizeMessage('admin.userManagement.userDetail.role', 'Role')}</span>\n                                    <p>{currentRoles}</p>\n                                </React.Fragment>\n                            }\n                            footer={\n                                <React.Fragment>\n                                    <AdminButtonOutline\n                                        onClick={this.doPasswordReset}\n                                        className='admin-btn-default'\n                                    >\n                                        {'Reset Password'}\n                                    </AdminButtonOutline>\n                                    {this.renderActivateDeactivate()}\n                                    {this.renderRemoveMFA()}\n                                </React.Fragment>\n                            }\n                        />\n                        <AdminPanel\n                            subtitleId={t('admin.userManagement.userDetail.teamsSubtitle')}\n                            subtitleDefault={'Teams to which this user belongs'}\n                            titleId={t('admin.userManagement.userDetail.teamsTitle')}\n                            titleDefault={'Team Membership'}\n                            button={(\n                                <div className='add-team-button'>\n                                    <button\n                                        className='btn btn-primary'\n                                        onClick={this.openAddTeam}\n                                    >\n                                        <FormattedMessage\n                                            id='admin.userManagement.userDetail.addTeam'\n                                            defaultMessage='Add Team'\n                                        />\n                                    </button>\n                                </div>\n                            )}\n                        >\n                            <TeamList\n                                userId={this.props.user.id}\n                                userDetailCallback={this.setTeamsData}\n                                refreshTeams={this.state.refreshTeams}\n                            />\n                        </AdminPanel>\n                    </div>\n                </div>\n                <div className='admin-console-save'>\n                    <SaveButton\n                        saving={this.state.saving}\n                        disabled={!this.state.saveNeeded || (this.canSave && !this.canSave())}\n                        onClick={this.handleSubmit}\n                        savingMessage={Utils.localizeMessage('admin.saving', 'Saving Config...')}\n                    />\n                    <div\n                        className='error-message'\n                        ref='errorMessage'\n                        onMouseOver={this.openTooltip}\n                        onMouseOut={this.closeTooltip}\n                    >\n                        <FormError error={this.state.serverError}/>\n                    </div>\n                    <Overlay\n                        show={this.state.errorTooltip}\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='top'\n                        target={this.refs.errorMessage}\n                    >\n                        <Tooltip id='error-tooltip' >\n                            {this.state.serverError}\n                        </Tooltip>\n                    </Overlay>\n                </div>\n                <ResetPasswordModal\n                    user={user}\n                    show={this.state.showPasswordModal}\n                    onModalSubmit={this.doPasswordResetSubmit}\n                    onModalDismissed={this.doPasswordResetDismiss}\n                />\n                {deactivateMemberModal}\n                {this.state.addTeamOpen &&\n                    <TeamSelectorModal\n                        onModalDismissed={this.closeAddTeam}\n                        onTeamsSelected={this.addTeams}\n                        alreadySelected={this.state.teamIds}\n                    />\n                }\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getUser, getProfiles} from 'mattermost-redux/selectors/entities/users';\nimport {updateUserActive} from 'mattermost-redux/actions/users';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {addUserToTeam} from 'mattermost-redux/actions/teams';\n\nimport {setNavigationBlocked, deferNavigation, cancelNavigation, confirmNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked, showNavigationPrompt} from 'selectors/views/admin';\n\nimport SystemUserDetail from './system_user_detail.jsx';\n\nfunction mapStateToProps(state, ownProps) {\n    const config = getConfig(state);\n    const userId = ownProps.match.params.user_id;\n    const user = getUser(state, userId);\n    return {\n        user,\n        mfaEnabled: config.EnableMultifactorAuthentication === 'true',\n        navigationBlocked: getNavigationBlocked(state),\n        showNavigationPrompt: showNavigationPrompt(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getUser,\n            getProfiles,\n            updateUserActive,\n            setNavigationBlocked,\n            deferNavigation,\n            cancelNavigation,\n            confirmNavigation,\n            addUserToTeam,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SystemUserDetail);","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\n\nconst NEXT_BUTTON_TIMEOUT = 500;\n\nexport default class Logs extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        page: PropTypes.number.isRequired,\n        perPage: PropTypes.number.isRequired,\n        nextPage: PropTypes.func.isRequired,\n        previousPage: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.logPanel = React.createRef();\n\n        this.state = {\n            nextDisabled: false,\n        };\n    }\n\n    componentDidMount() {\n        // Scroll Down to get the latest logs\n        const node = this.logPanel.current;\n        node.scrollTop = node.scrollHeight;\n        node.focus();\n    }\n\n    componentDidUpdate() {\n        // Scroll Down to get the latest logs\n        const node = this.logPanel.current;\n        node.scrollTop = node.scrollHeight;\n    }\n\n    nextPage = (e) => {\n        e.preventDefault();\n\n        this.setState({nextDisabled: true});\n        this.nextTimeoutId = setTimeout(() => this.setState({nextDisabled: false}), NEXT_BUTTON_TIMEOUT);\n\n        this.props.nextPage();\n    }\n\n    previousPage = (e) => {\n        e.preventDefault();\n\n        this.props.previousPage();\n    }\n\n    render() {\n        let content = null;\n        let nextButton;\n        let previousButton;\n\n        if (this.props.logs.length >= this.props.perPage) {\n            nextButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__next pull-right'\n                    onClick={this.nextPage}\n                    disabled={this.state.nextDisabled}\n                >\n                    <FormattedMessage\n                        id='admin.logs.next'\n                        defaultMessage='Next'\n                    />\n                    <NextIcon additionalClassName='margin-left'/>\n                </button>\n            );\n        }\n\n        if (this.props.page > 0) {\n            previousButton = (\n                <button\n                    className='btn btn-default filter-control filter-control__prev'\n                    onClick={this.previousPage}\n                >\n                    <FormattedMessage\n                        id='generic_icons.previous'\n                        defaultMessage='Previous Icon'\n                    >\n                        {(title) => (\n                            <i\n                                className='fa fa-angle-left'\n                                title={title}\n                            />\n                        )}\n                    </FormattedMessage>\n                    <FormattedMessage\n                        id='admin.logs.prev'\n                        defaultMessage='Previous'\n                    />\n                </button>\n            );\n        }\n\n        content = [];\n\n        for (let i = 0; i < this.props.logs.length; i++) {\n            const style = {\n                whiteSpace: 'nowrap',\n                fontFamily: 'monospace',\n            };\n\n            if (this.props.logs[i].indexOf('[EROR]') > 0) {\n                style.color = 'red';\n            }\n\n            content.push(<br key={'br_' + i}/>);\n            content.push(\n                <span\n                    key={'log_' + i}\n                    style={style}\n                >\n                    {this.props.logs[i]}\n                </span>\n            );\n        }\n\n        return (\n            <div>\n                <div\n                    tabIndex='-1'\n                    ref={this.logPanel}\n                    className='log__panel'\n                >\n                    {content}\n                </div>\n                <div className='padding-top padding-bottom x2 filter-controls'>\n                    {previousButton}\n                    {nextButton}\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport LoadingScreen from 'components/loading_screen';\n\nimport FormattedAdminHeader from 'components/widgets/admin_console/formatted_admin_header';\n\nimport LogList from './log_list.jsx';\n\nexport default class Logs extends React.Component {\n    static propTypes = {\n\n        /*\n         * Array of logs to render\n         */\n        logs: PropTypes.arrayOf(PropTypes.string).isRequired,\n        nextPage: PropTypes.func,\n\n        actions: PropTypes.shape({\n\n            /*\n             * Function to fetch logs\n             */\n            getLogs: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingLogs: true,\n            page: 0,\n            perPage: 1000,\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (this.state.page !== prevState.page) {\n            this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n                () => this.setState({loadingLogs: false})\n            );\n        }\n    }\n\n    nextPage = () => {\n        this.setState({page: this.state.page + 1});\n    }\n\n    previousPage = () => {\n        this.setState({page: this.state.page - 1});\n    }\n\n    reload = () => {\n        this.setState({loadingLogs: true});\n        this.props.actions.getLogs(this.state.page, this.state.perPage).then(\n            () => this.setState({loadingLogs: false})\n        );\n    }\n\n    render() {\n        let content = null;\n\n        if (this.state.loadingLogs) {\n            content = <LoadingScreen/>;\n        } else {\n            content = (\n                <LogList\n                    {...this.props}\n                    nextPage={this.nextPage}\n                    previousPage={this.previousPage}\n                    page={this.state.page}\n                    perPage={this.state.perPage}\n                />\n            );\n        }\n\n        return (\n            <div className='wrapper--admin'>\n                <FormattedAdminHeader\n                    id='admin.logs.title'\n                    defaultMessage='Server Logs'\n                />\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className='banner'>\n                            <div className='banner__content'>\n                                <FormattedMessage\n                                    id='admin.logs.bannerDesc'\n                                    defaultMessage='To look up users by User ID or Token ID, go to Reporting > Users and paste the ID into the search filter.'\n                                />\n                            </div>\n                        </div>\n                        <button\n                            type='submit'\n                            className='btn btn-primary'\n                            onClick={this.reload}\n                        >\n                            <FormattedMessage\n                                id='admin.logs.reload'\n                                defaultMessage='Reload'\n                            />\n                        </button>\n                        {content}\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getLogs} from 'mattermost-redux/actions/admin';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\n\nimport Logs from './logs.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        logs: Selectors.getLogs(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getLogs,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Logs);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport $ from 'jquery';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Tooltip} from 'react-bootstrap';\nimport {Client4} from 'mattermost-redux/client';\n\nimport {uploadBrandImage, deleteBrandImage} from 'actions/admin_actions.jsx';\nimport {Constants} from 'utils/constants';\nimport FormError from 'components/form_error';\nimport OverlayTrigger from 'components/overlay_trigger';\n\nconst HTTP_STATUS_OK = 200;\n\nexport default class BrandImageSetting extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Set for testing purpose\n         */\n        id: PropTypes.string,\n\n        /*\n         * Set to disable the setting\n         */\n        disabled: PropTypes.bool.isRequired,\n\n        /*\n        * Set the save needed in the admin schema settings to trigger the save button to turn on\n        */\n        setSaveNeeded: PropTypes.func.isRequired,\n\n        /*\n        * Registers the function suppose to be run when the save button is pressed\n        */\n        registerSaveAction: PropTypes.func.isRequired,\n\n        /*\n        * Unregisters the function on unmount of the component suppose to be run when the save button is pressed\n        */\n        unRegisterSaveAction: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            deleteBrandImage: false,\n            brandImage: null,\n            brandImageExists: false,\n            brandImageTimestamp: Date.now(),\n            error: '',\n        };\n    }\n\n    componentDidMount() {\n        fetch(Client4.getBrandImageUrl(this.state.brandImageTimestamp)).then(\n            (resp) => {\n                if (resp.status === HTTP_STATUS_OK) {\n                    this.setState({brandImageExists: true});\n                } else {\n                    this.setState({brandImageExists: false});\n                }\n            }\n        );\n\n        this.props.registerSaveAction(this.handleSave);\n    }\n\n    componentWillUnmount() {\n        this.props.unRegisterSaveAction(this.handleSave);\n    }\n\n    componentDidUpdate() {\n        if (this.refs.image) {\n            const reader = new FileReader();\n\n            const img = this.refs.image;\n            reader.onload = (e) => {\n                $(img).attr('src', e.target.result);\n            };\n\n            reader.readAsDataURL(this.state.brandImage);\n        }\n    }\n\n    handleImageChange = () => {\n        const element = $(this.refs.fileInput);\n        if (element.prop('files').length > 0) {\n            this.props.setSaveNeeded();\n            this.setState({\n                brandImage: element.prop('files')[0],\n                deleteBrandImage: false,\n            });\n        }\n    }\n\n    handleDeleteButtonPressed = () => {\n        this.setState({deleteBrandImage: true, brandImage: null, brandImageExists: false});\n        this.props.setSaveNeeded();\n    }\n\n    handleSave = async () => {\n        this.setState({\n            error: '',\n        });\n\n        let error;\n        if (this.state.deleteBrandImage) {\n            await deleteBrandImage(\n                () => {\n                    this.setState({\n                        deleteBrandImage: false,\n                        brandImageExists: false,\n                        brandImage: null,\n                    });\n                },\n                (err) => {\n                    error = err;\n                    this.setState({\n                        error: err.message,\n                    });\n                }\n            );\n        } else if (this.state.brandImage) {\n            await uploadBrandImage(\n                this.state.brandImage,\n                () => {\n                    this.setState({\n                        brandImageExists: true,\n                        brandImage: null,\n                        brandImageTimestamp: Date.now(),\n                    });\n                },\n                (err) => {\n                    error = err;\n                    this.setState({\n                        error: err.message,\n                    });\n                }\n            );\n        }\n        return {error};\n    }\n\n    render() {\n        let letbtnDefaultClass = 'btn';\n        if (!this.props.disabled) {\n            letbtnDefaultClass += ' btn-default';\n        }\n\n        let img = null;\n        if (this.state.brandImage) {\n            img = (\n                <div className='remove-image__img margin-bottom x3'>\n                    <img\n                        ref='image'\n                        alt='brand image'\n                        src=''\n                    />\n                </div>\n            );\n        } else if (this.state.brandImageExists) {\n            let overlay;\n            if (!this.props.disabled) {\n                overlay = (\n                    <OverlayTrigger\n                        delayShow={Constants.OVERLAY_TIME_DELAY}\n                        placement='right'\n                        overlay={(\n                            <Tooltip id='removeIcon'>\n                                <div aria-hidden={true}>\n                                    <FormattedMessage\n                                        id='admin.team.removeBrandImage'\n                                        defaultMessage='Remove brand image'\n                                    />\n                                </div>\n                            </Tooltip>\n                        )}\n                    >\n                        <button\n                            className='remove-image__btn'\n                            onClick={this.handleDeleteButtonPressed}\n                        >\n                            <span aria-hidden={true}>{'×'}</span>\n                        </button>\n                    </OverlayTrigger>\n                );\n            }\n            img = (\n                <div className='remove-image__img margin-bottom x3'>\n                    <img\n                        alt='brand image'\n                        src={Client4.getBrandImageUrl(this.state.brandImageTimestamp)}\n                    />\n                    {overlay}\n                </div>\n            );\n        } else {\n            img = (\n                <p className='margin-top'>\n                    <FormattedMessage\n                        id='admin.team.noBrandImage'\n                        defaultMessage='No brand image uploaded'\n                    />\n                </p>\n            );\n        }\n\n        return (\n            <div\n                data-testid={this.props.id}\n                className='form-group'\n            >\n                <label className='control-label col-sm-4'>\n                    <FormattedMessage\n                        id='admin.team.brandImageTitle'\n                        defaultMessage='Custom Brand Image:'\n                    />\n                </label>\n                <div className='col-sm-8'>\n                    <div className='remove-image'>\n                        {img}\n                    </div>\n                </div>\n                <div className='col-sm-4'/>\n                <div className='col-sm-8'>\n                    <div className='file__upload margin-top x3'>\n                        <button\n                            className={letbtnDefaultClass}\n                            disabled={this.props.disabled}\n                        >\n                            <FormattedMessage\n                                id='admin.team.chooseImage'\n                                defaultMessage='Select Image'\n                            />\n                        </button>\n                        <input\n                            ref='fileInput'\n                            type='file'\n                            accept='.jpg,.png,.bmp'\n                            disabled={this.props.disabled}\n                            onChange={this.handleImageChange}\n                        />\n                    </div>\n                    <br/>\n                    <FormError error={this.state.error}/>\n                    <p className='help-text no-margin'>\n                        <FormattedHTMLMessage\n                            id='admin.team.uploadDesc'\n                            defaultMessage='Customize your user experience by adding a custom image to your login screen. See examples at <a href=\"http://docs.mattermost.com/administration/config-settings.html#custom-branding\" target=\"_blank\">docs.mattermost.com/administration/config-settings.html#custom-branding</a>.'\n                        />\n                    </p>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {localizeMessage} from 'utils/utils.jsx';\n\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon.jsx';\nimport LoadingSpinner from 'components/widgets/loading/loading_spinner';\n\nexport default class GroupRow extends React.Component {\n    static propTypes = {\n        primary_key: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        mattermost_group_id: PropTypes.string,\n        has_syncables: PropTypes.bool,\n        checked: PropTypes.bool,\n        failed: PropTypes.bool,\n        onCheckToggle: PropTypes.func,\n        actions: PropTypes.shape({\n            link: PropTypes.func.isRequired,\n            unlink: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: false,\n        };\n    }\n\n    onRowClick = () => {\n        this.props.onCheckToggle(this.props.primary_key);\n    }\n\n    linkHandler = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n\n        this.setState({loading: true});\n        await this.props.actions.link(this.props.primary_key);\n        this.setState({loading: false});\n    }\n\n    unlinkHandler = async (e) => {\n        e.stopPropagation();\n        e.preventDefault();\n        this.setState({loading: true});\n        await this.props.actions.unlink(this.props.primary_key);\n        this.setState({loading: false});\n    }\n\n    renderActions = () => {\n        if (!this.props.mattermost_group_id) {\n            return null;\n        }\n        if (this.props.has_syncables) {\n            return (\n                <Link\n                    to={'/admin_console/user_management/groups/' + this.props.mattermost_group_id}\n                    id={`${this.props.name}_edit`}\n                >\n                    <FormattedMessage\n                        id='admin.group_settings.group_row.edit'\n                        defaultMessage='Edit'\n                    />\n                </Link>\n            );\n        }\n        return (\n            <Link\n                to={'/admin_console/user_management/groups/' + this.props.mattermost_group_id}\n                id={`${this.props.name}_configure`}\n            >\n                <FormattedMessage\n                    id='admin.group_settings.group_row.configure'\n                    defaultMessage='Configure'\n                />\n            </Link>\n        );\n    }\n\n    renderLinked = () => {\n        if (this.state.loading) {\n            return (\n                <a href='#'>\n                    {this.props.mattermost_group_id &&\n                        <LoadingSpinner text={localizeMessage('admin.group_settings.group_row.unlinking', 'Unlinking')}/>\n                    }\n                    {!this.props.mattermost_group_id &&\n                        <LoadingSpinner text={localizeMessage('admin.group_settings.group_row.linking', 'Linking')}/>\n                    }\n                </a>\n            );\n        }\n        if (this.props.mattermost_group_id) {\n            if (this.props.failed) {\n                return (\n                    <a\n                        href='#'\n                        onClick={this.unlinkHandler}\n                        className='warning'\n                    >\n                        <i className='icon fa fa-exclamation-triangle'/>\n                        <FormattedMessage\n                            id='admin.group_settings.group_row.unlink_failed'\n                            defaultMessage='Unlink failed'\n                        />\n                    </a>\n                );\n            }\n            return (\n                <a\n                    href='#'\n                    onClick={this.unlinkHandler}\n                >\n                    <i className='icon fa fa-link'/>\n                    <FormattedMessage\n                        id='admin.group_settings.group_row.linked'\n                        defaultMessage='Linked'\n                    />\n                </a>\n            );\n        }\n        if (this.props.failed) {\n            return (\n                <a\n                    href='#'\n                    onClick={this.linkHandler}\n                    className='warning'\n                >\n                    <i className='icon fa fa-exclamation-triangle'/>\n                    <FormattedMessage\n                        id='admin.group_settings.group_row.link_failed'\n                        defaultMessage='Link failed'\n                    />\n                </a>\n            );\n        }\n        return (\n            <a\n                href='#'\n                onClick={this.linkHandler}\n            >\n                <i className='icon fa fa-unlink'/>\n                <FormattedMessage\n                    id='admin.group_settings.group_row.not_linked'\n                    defaultMessage='Not Linked'\n                />\n            </a>\n        );\n    }\n\n    render = () => {\n        return (\n            <div\n                id={`${this.props.name}_group`}\n                className={'group ' + (this.props.checked ? 'checked' : '')}\n                onClick={this.onRowClick}\n            >\n                <div className='group-row'>\n                    <div className='group-name'>\n                        <div\n                            className={'group-check ' + (this.props.checked ? 'checked' : '')}\n                        >\n                            {this.props.checked && <CheckboxCheckedIcon/>}\n                        </div>\n                        <span>\n                            {this.props.name}\n                        </span>\n                    </div>\n                    <div className='group-content'>\n                        <span className='group-description'>\n                            {this.renderLinked()}\n                        </span>\n                        <span className='group-actions'>\n                            {this.renderActions()}\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport GroupRow from 'components/admin_console/group_settings/group_row.jsx';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\nimport SearchIcon from 'components/widgets/icons/search_icon';\nimport CheckboxCheckedIcon from 'components/widgets/icons/checkbox_checked_icon.jsx';\n\nimport {Constants} from 'utils/constants';\n\nconst LDAP_GROUPS_PAGE_SIZE = 200;\n\nconst FILTER_STATE_SEARCH_KEY_MAPPING = {\n    filterIsConfigured: {filter: 'is:configured', option: {is_configured: true}},\n    filterIsUnconfigured: {filter: 'is:notconfigured', option: {is_configured: false}},\n    filterIsLinked: {filter: 'is:linked', option: {is_linked: true}},\n    filterIsUnlinked: {filter: 'is:notlinked', option: {is_linked: false}},\n};\n\nexport default class GroupsList extends React.PureComponent {\n    static propTypes = {\n        groups: PropTypes.arrayOf(PropTypes.object),\n        total: PropTypes.number,\n        actions: PropTypes.shape({\n            getLdapGroups: PropTypes.func.isRequired,\n            link: PropTypes.func.isRequired,\n            unlink: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        groups: [],\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            checked: {},\n            loading: true,\n            page: 0,\n            showFilters: false,\n            searchString: '',\n        };\n        Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([key]) => {\n            this.state[key] = false;\n        });\n    }\n\n    closeFilters = () => {\n        this.setState({showFilters: false});\n    }\n\n    componentDidMount() {\n        this.props.actions.getLdapGroups(this.state.page, LDAP_GROUPS_PAGE_SIZE).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    previousPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({checked: {}, page, loading: true});\n        this.searchGroups(page);\n    }\n\n    nextPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page + 1;\n        this.setState({checked: {}, page, loading: true});\n        this.searchGroups(page);\n    }\n\n    onCheckToggle = (key) => {\n        const newChecked = {...this.state.checked};\n        newChecked[key] = !newChecked[key];\n        this.setState({checked: newChecked});\n    }\n\n    linkSelectedGroups = () => {\n        for (const group of this.props.groups) {\n            if (this.state.checked[group.primary_key] && !group.mattermost_group_id) {\n                this.props.actions.link(group.primary_key);\n            }\n        }\n    }\n\n    unlinkSelectedGroups = () => {\n        for (const group of this.props.groups) {\n            if (this.state.checked[group.primary_key] && group.mattermost_group_id) {\n                this.props.actions.unlink(group.primary_key);\n            }\n        }\n    }\n\n    selectionActionButtonType = () => {\n        let hasSelectedLinked = false;\n        for (const group of this.props.groups) {\n            if (this.state.checked[group.primary_key]) {\n                if (!group.mattermost_group_id) {\n                    return 'link';\n                }\n                hasSelectedLinked = true;\n            }\n        }\n        if (hasSelectedLinked) {\n            return 'unlink';\n        }\n\n        return 'disabled';\n    }\n\n    renderSelectionActionButton = () => {\n        switch (this.selectionActionButtonType()) {\n        case 'link':\n            return (\n                <button\n                    className='btn btn-primary'\n                    onClick={this.linkSelectedGroups}\n                >\n                    <i className='icon fa fa-link'/>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.link_selected'\n                        defaultMessage='Link Selected Groups'\n                    />\n                </button>\n            );\n        case 'unlink':\n            return (\n                <button\n                    className='btn btn-primary'\n                    onClick={this.unlinkSelectedGroups}\n                >\n                    <i className='icon fa fa-unlink'/>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.unlink_selected'\n                        defaultMessage='Unlink Selected Groups'\n                    />\n                </button>\n            );\n        default:\n            return (\n                <button\n                    className='btn btn-inactive disabled'\n                >\n                    <i className='icon fa fa-link'/>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.link_selected'\n                        defaultMessage='Link Selected Groups'\n                    />\n                </button>\n            );\n        }\n    }\n\n    renderRows = () => {\n        if (this.state.loading) {\n            return (\n                <div className='groups-list-loading'>\n                    <i className='fa fa-spinner fa-pulse fa-2x'/>\n                </div>\n            );\n        }\n        if (this.props.groups.length === 0) {\n            return (\n                <div className='groups-list-empty'>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.no_groups_found'\n                        defaultMessage='No groups found'\n                    />\n                </div>\n            );\n        }\n        return this.props.groups.map((item) => {\n            return (\n                <GroupRow\n                    key={item.primary_key}\n                    primary_key={item.primary_key}\n                    name={item.name}\n                    mattermost_group_id={item.mattermost_group_id}\n                    has_syncables={item.has_syncables}\n                    failed={item.failed}\n                    checked={Boolean(this.state.checked[item.primary_key])}\n                    onCheckToggle={this.onCheckToggle}\n                    actions={{\n                        link: this.props.actions.link,\n                        unlink: this.props.actions.unlink,\n                    }}\n                />\n            );\n        });\n    }\n\n    regex = (str) => {\n        return new RegExp(`(${str})`, 'i');\n    }\n\n    searchGroups = (page) => {\n        let {searchString} = this.state;\n\n        const newState = {...this.state};\n        delete newState.page;\n        delete newState.checked;\n\n        let q = searchString;\n        let opts = {q: ''};\n\n        Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([key, value]) => {\n            const re = this.regex(value.filter);\n            if (re.test(searchString)) {\n                newState[key] = true;\n                q = q.replace(re, '');\n                opts = Object.assign(opts, value.option);\n            } else if (this.state[key]) {\n                searchString += ' ' + value.filter;\n            }\n        });\n\n        opts.q = q.trim();\n\n        newState.searchString = searchString;\n        newState.showFilters = false;\n        newState.loading = true;\n        newState.showFilters = false;\n        this.setState(newState);\n\n        this.props.actions.getLdapGroups(page, LDAP_GROUPS_PAGE_SIZE, opts).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    handleGroupSearchKeyUp = (e) => {\n        const {key} = e;\n        const {searchString} = this.state;\n        if (key === Constants.KeyCodes.ENTER[0]) {\n            this.setState({page: 0});\n            this.searchGroups();\n        }\n        const newState = {};\n        Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([k, value]) => {\n            if (!this.regex(value.filter).test(searchString)) {\n                newState[k] = false;\n            }\n        });\n        this.setState(newState);\n    }\n\n    newSearchString = (searchString, stateKey, checked) => {\n        let newSearchString = searchString;\n        const {filter} = FILTER_STATE_SEARCH_KEY_MAPPING[stateKey];\n        const re = this.regex(filter);\n        const stringFilterPresent = re.test(searchString);\n\n        if (stringFilterPresent && !checked) {\n            newSearchString = searchString.replace(re, '').trim();\n        }\n\n        if (!stringFilterPresent && checked) {\n            newSearchString += ' ' + filter;\n        }\n\n        return newSearchString.replace(/\\s{2,}/g, ' ');\n    }\n\n    handleFilterCheck = (updates) => {\n        let {searchString} = this.state;\n        updates.forEach((item) => {\n            searchString = this.newSearchString(searchString, item[0], item[1]);\n            this.setState({[item[0]]: item[1]});\n        });\n        this.setState({searchString});\n    }\n\n    renderSearchFilters = () => {\n        return (\n            <div\n                id='group-filters'\n                className='group-search-filters'\n                onClick={(e) => {\n                    e.nativeEvent.stopImmediatePropagation();\n                }}\n            >\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsLinked ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsLinked', !this.state.filterIsLinked], ['filterIsUnlinked', false]])}\n                    >\n                        {this.state.filterIsLinked && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isLinked'\n                            defaultMessage='Is Linked'\n                        />\n                    </span>\n                </div>\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsUnlinked ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsUnlinked', !this.state.filterIsUnlinked], ['filterIsLinked', false]])}\n                    >\n                        {this.state.filterIsUnlinked && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isUnlinked'\n                            defaultMessage='Is Not Linked'\n                        />\n                    </span>\n                </div>\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsConfigured ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsConfigured', !this.state.filterIsConfigured], ['filterIsUnconfigured', false]])}\n                    >\n                        {this.state.filterIsConfigured && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isConfigured'\n                            defaultMessage='Is Configured'\n                        />\n                    </span>\n                </div>\n                <div className='filter-row'>\n                    <span\n                        className={'filter-check ' + (this.state.filterIsUnconfigured ? 'checked' : '')}\n                        onClick={() => this.handleFilterCheck([['filterIsUnconfigured', !this.state.filterIsUnconfigured], ['filterIsConfigured', false]])}\n                    >\n                        {this.state.filterIsUnconfigured && <CheckboxCheckedIcon/>}\n                    </span>\n                    <span>\n                        <FormattedMessage\n                            id='admin.group_settings.filters.isUnconfigured'\n                            defaultMessage='Is Not Configured'\n                        />\n                    </span>\n                </div>\n                <a\n                    onClick={() => {\n                        this.setState({page: 0});\n                        this.searchGroups(0);\n                    }}\n                    className='btn btn-primary search-groups-btn'\n                >\n                    <FormattedMessage\n                        id='search_bar.search'\n                        defaultMessage='Search'\n                    />\n                </a>\n            </div>\n        );\n    }\n\n    resetFiltersAndSearch = () => {\n        const newState = {\n            showFilters: false,\n            searchString: '',\n            loading: true,\n            page: 0,\n        };\n        Object.entries(FILTER_STATE_SEARCH_KEY_MAPPING).forEach(([key]) => {\n            newState[key] = false;\n        });\n        this.setState(newState);\n        this.props.actions.getLdapGroups(this.state.page, LDAP_GROUPS_PAGE_SIZE, {q: ''}).then(() => {\n            this.setState({loading: false});\n        });\n    };\n\n    render = () => {\n        const startCount = (this.state.page * LDAP_GROUPS_PAGE_SIZE) + 1;\n        let endCount = (this.state.page * LDAP_GROUPS_PAGE_SIZE) + LDAP_GROUPS_PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n        return (\n            <div className='groups-list'>\n                <div className='groups-list--global-actions'>\n                    <div className='group-list-search'>\n                        <input\n                            type='text'\n                            placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                            onKeyUp={this.handleGroupSearchKeyUp}\n                            onChange={(e) => this.setState({searchString: e.target.value})}\n                            value={this.state.searchString}\n                        />\n                        <SearchIcon\n                            className='search__icon'\n                            aria-hidden='true'\n                        />\n                        <i\n                            className={'fa fa-times-circle group-filter-action ' + (this.state.searchString.length ? '' : 'hidden')}\n                            onClick={this.resetFiltersAndSearch}\n                        />\n                        <i\n                            className={'fa fa-caret-down group-filter-action ' + (this.state.showFilters ? 'hidden' : '')}\n                            onClick={() => {\n                                document.addEventListener('click', this.closeFilters, {once: true});\n                                this.setState({showFilters: true});\n                            }}\n                        />\n                    </div>\n                    {this.state.showFilters && this.renderSearchFilters()}\n                    <div className='group-list-link-unlink'>\n                        {this.renderSelectionActionButton()}\n                    </div>\n                </div>\n                <div className='groups-list--header'>\n                    <div className='group-name'>\n                        <FormattedMessage\n                            id='admin.group_settings.groups_list.nameHeader'\n                            defaultMessage='Name'\n                        />\n                    </div>\n                    <div className='group-content'>\n                        <div className='group-description'>\n                            <FormattedMessage\n                                id='admin.group_settings.groups_list.mappingHeader'\n                                defaultMessage='Mattermost Linking'\n                            />\n                        </div>\n                        <div className='group-actions'/>\n                    </div>\n                </div>\n                <div\n                    id='groups-list--body'\n                    className='groups-list--body'\n                >\n                    {this.renderRows()}\n                </div>\n                {total > 0 &&\n                    <div className='groups-list--footer'>\n                        <div className='counter'>\n                            <FormattedMessage\n                                id='admin.group_settings.groups_list.paginatorCount'\n                                defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                                values={{\n                                    startCount,\n                                    endCount,\n                                    total,\n                                }}\n                            />\n                        </div>\n                        <button\n                            className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                            onClick={firstPage ? null : this.previousPage}\n                            disabled={firstPage}\n                        >\n                            <PreviousIcon/>\n                        </button>\n                        <button\n                            className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                            onClick={lastPage ? null : this.nextPage}\n                            disabled={lastPage}\n                        >\n                            <NextIcon/>\n                        </button>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {linkLdapGroup, unlinkLdapGroup, getLdapGroups as fetchLdapGroups} from 'mattermost-redux/actions/admin';\nimport {getLdapGroups, getLdapGroupsCount} from 'mattermost-redux/selectors/entities/admin';\n\nimport GroupsList from './groups_list.jsx';\n\nconst getSortedListOfLdapGroups = createSelector(\n    getLdapGroups,\n    (ldapGroups) => {\n        const groups = Object.values(ldapGroups);\n        groups.sort((a, b) => a.name.localeCompare(b.name));\n        return groups;\n    }\n);\n\nfunction mapStateToProps(state) {\n    return {\n        groups: getSortedListOfLdapGroups(state),\n        total: getLdapGroupsCount(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getLdapGroups: fetchLdapGroups,\n            link: linkLdapGroup,\n            unlink: unlinkLdapGroup,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupsList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport GroupsList from 'components/admin_console/group_settings/groups_list';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {getSiteURL} from 'utils/url';\n\nexport default class GroupSettings extends React.PureComponent {\n    render = () => {\n        const siteURL = getSiteURL();\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header'>\n                    <FormattedMessage\n                        id='admin.group_settings.groupsPageTitle'\n                        defaultMessage='Groups (Beta)'\n                    />\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className={'banner info'}>\n                            <div className='banner__content'>\n                                <FormattedMarkdownMessage\n                                    id='admin.group_settings.introBanner'\n                                    defaultMessage={'Groups are a way to organize users and apply actions to all users within that group.\\nFor more information on Groups, please see [documentation](!https://www.mattermost.com/default-ad-ldap-groups).'}\n                                />\n                            </div>\n                        </div>\n\n                        <AdminPanel\n                            id='ldap_groups'\n                            titleId={t('admin.group_settings.ldapGroupsTitle')}\n                            titleDefault='AD/LDAP Groups'\n                            subtitleId={t('admin.group_settings.ldapGroupsDescription')}\n                            subtitleDefault={`Link and configure groups from your AD/LDAP to Mattermost. Please ensure you have configured a [group filter](${siteURL}/admin_console/authentication/ldap).`}\n                            subtitleValues={{siteURL}}\n                        >\n                            <GroupsList/>\n                        </AdminPanel>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nexport default class GroupProfile extends React.PureComponent {\n    static propTypes = {\n        name: PropTypes.string.isRequired,\n    };\n\n    render = () => {\n        const {name} = this.props;\n\n        return (\n            <div className='group-profile'>\n                <div className='group-profile-field'>\n                    <label>\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_profile.name'\n                            defaultMessage='Name:'\n                        />\n                    </label>\n                    <input\n                        type='text'\n                        className='form-control'\n                        value={name}\n                        disabled={true}\n                    />\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {isNil} from 'lodash';\nimport classNames from 'classnames';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\n\nexport default class GroupTeamsAndChannelsRow extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        type: PropTypes.string.isRequired,\n        name: PropTypes.string.isRequired,\n        hasChildren: PropTypes.bool,\n        collapsed: PropTypes.bool,\n        onRemoveItem: PropTypes.func.isRequired,\n        onToggleCollapse: PropTypes.func.isRequired,\n        onChangeRoles: PropTypes.func.isRequired,\n        schemeAdmin: PropTypes.bool,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            showConfirmationModal: false,\n        };\n    }\n\n    removeItem = () => {\n        this.props.onRemoveItem(this.props.id, this.props.type);\n        this.setState({showConfirmationModal: false});\n    }\n\n    changeRoles = () => {\n        this.props.onChangeRoles(this.props.id, this.props.type, !this.props.schemeAdmin);\n    }\n\n    toggleCollapse = () => {\n        this.props.onToggleCollapse(this.props.id);\n    }\n\n    displayAssignedRolesDropdown = () => {\n        const {schemeAdmin, name} = this.props;\n        const channelAdmin = (\n            <FormattedMessage\n                id='admin.group_teams_and_channels_row.channelAdmin'\n                defaultMessage='Channel Admin'\n            />\n        );\n        const teamAdmin = (\n            <FormattedMessage\n                id='admin.group_teams_and_channels_row.teamAdmin'\n                defaultMessage='Team Admin'\n            />\n        );\n        const member = (\n            <FormattedMessage\n                id='admin.group_teams_and_channels_row.member'\n                defaultMessage='Member'\n            />\n        );\n        let dropDown = null;\n        if (!isNil(schemeAdmin)) {\n            let currentRole = member;\n            let roleToBe = (this.props.type.includes('team')) ? teamAdmin : channelAdmin;\n            if (schemeAdmin) {\n                currentRole = (this.props.type.includes('team')) ? teamAdmin : channelAdmin;\n                roleToBe = member;\n            }\n            dropDown = (\n                <div >\n                    <MenuWrapper>\n                        <div data-testid={`${name}_current_role`}>\n                            <a>\n                                <span>{currentRole} </span>\n                                <span className='caret'/>\n                            </a>\n                        </div>\n                        <Menu\n                            openLeft={true}\n                            openUp={true}\n                            ariaLabel={localizeMessage('admin.team_channel_settings.group_row.memberRole', 'Member Role')}\n                        >\n                            <Menu.ItemAction\n                                testid={`${name}_role_to_be`}\n                                onClick={this.changeRoles}\n                                text={roleToBe}\n                            />\n                        </Menu>\n                    </MenuWrapper>\n                </div>\n            );\n        }\n\n        return dropDown;\n    }\n\n    render = () => {\n        let extraClasses = '';\n        let arrowIcon = null;\n        if (this.props.hasChildren) {\n            arrowIcon = (\n                <i\n                    className={'fa ' + (this.props.collapsed ? 'fa-caret-right' : 'fa-caret-down')}\n                    onClick={this.toggleCollapse}\n                />\n            );\n            extraClasses += ' has-clidren';\n        }\n\n        if (this.props.collapsed) {\n            extraClasses += ' collapsed';\n        }\n\n        let channelIcon = null;\n        let typeText = null;\n        switch (this.props.type) {\n        case 'public-team':\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.publicTeam'\n                    defaultMessage='Team'\n                />\n            );\n            break;\n        case 'private-team':\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.privateTeam'\n                    defaultMessage='Team (Private)'\n                />\n            );\n            break;\n        }\n\n        switch (this.props.type) {\n        case 'public-channel':\n            channelIcon = (\n                <span className='channel-icon'>\n                    <GlobeIcon className='icon icon__globe'/>\n                </span>\n            );\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.publicChannel'\n                    defaultMessage='Channel'\n                />\n            );\n            break;\n        case 'private-channel':\n            channelIcon = (\n                <span className='channel-icon'>\n                    <LockIcon className='icon icon__lock'/>\n                </span>\n            );\n            typeText = (\n                <FormattedMessage\n                    id='admin.group_settings.group_details.group_teams_and_channels_row.privateChannel'\n                    defaultMessage='Channel (Private)'\n                />\n            );\n            break;\n        }\n\n        const displayType = this.props.type.split('-')[1];\n\n        return (\n            <tr className={'group-teams-and-channels-row' + extraClasses}>\n                <ConfirmModal\n                    show={this.state.showConfirmationModal}\n                    title={\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_header'\n                            defaultMessage='Remove Membership from the {name} {displayType}?'\n                            values={{name: this.props.name, displayType}}\n                        />\n                    }\n                    message={\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_body'\n                            defaultMessage='Removing this membership will prevent future users in this group from being added to the {name} {displayType}.'\n                            values={{name: this.props.name, displayType}}\n                        />\n                    }\n                    confirmButtonText={\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove.confirm_button'\n                            defaultMessage='Yes, Remove'\n                        />\n                    }\n                    onConfirm={this.removeItem}\n                    onCancel={() => this.setState({showConfirmationModal: false})}\n                />\n                <td>\n                    <span className='arrow-icon'>\n                        {arrowIcon}\n                    </span>\n                    {channelIcon}\n                    <span className={classNames({'name-no-arrow': isNil(arrowIcon) && isNil(channelIcon)})}>\n                        {this.props.name}\n                    </span>\n                </td>\n                <td className='type'>\n                    {typeText}\n                </td>\n                <td>\n                    {this.displayAssignedRolesDropdown()}\n                </td>\n                <td className='text-right'>\n                    <button\n                        className='btn btn-link'\n                        onClick={() => this.setState({showConfirmationModal: true})}\n                    >\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels_row.remove'\n                            defaultMessage='Remove'\n                        />\n                    </button>\n                </td>\n            </tr>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Groups} from 'mattermost-redux/constants';\n\nimport GroupTeamsAndChannelsRow from 'components/admin_console/group_settings/group_details/group_teams_and_channels_row.jsx';\n\nexport default class GroupTeamsAndChannels extends React.PureComponent {\n    static propTypes = {\n        id: PropTypes.string.isRequired,\n        teams: PropTypes.arrayOf(PropTypes.object),\n        channels: PropTypes.arrayOf(PropTypes.object),\n        loading: PropTypes.bool.isRequired,\n        getGroupSyncables: PropTypes.func.isRequired,\n        unlink: PropTypes.func.isRequired,\n        onChangeRoles: PropTypes.func.isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            collapsed: {},\n        };\n    }\n\n    onToggleCollapse = (id) => {\n        const collapsed = {...this.state.collapsed};\n        collapsed[id] = !collapsed[id];\n        this.setState({collapsed});\n    }\n\n    onRemoveItem = async (id, type) => {\n        if (type === 'public-team' || type === 'private-team') {\n            await this.props.unlink(this.props.id, id, Groups.SYNCABLE_TYPE_TEAM);\n            await this.props.getGroupSyncables(this.props.id, Groups.SYNCABLE_TYPE_TEAM);\n            await this.props.getGroupSyncables(this.props.id, Groups.SYNCABLE_TYPE_CHANNEL);\n        } else {\n            await this.props.unlink(this.props.id, id, Groups.SYNCABLE_TYPE_CHANNEL);\n            await this.props.getGroupSyncables(this.props.id, Groups.SYNCABLE_TYPE_CHANNEL);\n        }\n    }\n\n    onChangeRoles = async (id, type, roleToBe) => {\n        this.props.onChangeRoles(id, type, roleToBe);\n    }\n\n    teamsAndChannelsToEntries = (teams, channels) => {\n        const entries = [];\n\n        const existingTeams = new Set();\n        const teamEntries = [];\n        teams.forEach((team) => {\n            existingTeams.add(team.team_id);\n            teamEntries.push({\n                type: team.team_type === 'O' ? 'public-team' : 'private-team',\n                hasChildren: channels.some((channel) => channel.team_id === team.team_id),\n                name: team.team_display_name,\n                collapsed: this.state.collapsed[team.team_id],\n                id: team.team_id,\n                schemeAdmin: team.scheme_admin,\n            });\n        });\n\n        const channelEntriesByTeam = {};\n        channels.forEach((channel) => {\n            channelEntriesByTeam[channel.team_id] = channelEntriesByTeam[channel.team_id] || [];\n            channelEntriesByTeam[channel.team_id].push({\n                type: channel.channel_type === 'O' ? 'public-channel' : 'private-channel',\n                name: channel.channel_display_name,\n                id: channel.channel_id,\n                schemeAdmin: channel.scheme_admin,\n            });\n\n            if (!existingTeams.has(channel.team_id)) {\n                existingTeams.add(channel.team_id);\n                teamEntries.push({\n                    type: channel.team_type === 'O' ? 'public-team' : 'private-team',\n                    hasChildren: true,\n                    name: channel.team_display_name,\n                    collapsed: this.state.collapsed[channel.team_id],\n                    id: channel.team_id,\n                });\n            }\n        });\n        teamEntries.sort((a, b) => ((a.name && b.name) ? a.name.localeCompare(b.name) : 0));\n        teamEntries.forEach((team) => {\n            entries.push(team);\n            if (team.hasChildren && !team.collapsed) {\n                const teamChannels = channelEntriesByTeam[team.id];\n                teamChannels.sort((a, b) => a.name.localeCompare(b.name));\n                entries.push(...teamChannels);\n            }\n        });\n\n        return entries;\n    }\n\n    render = () => {\n        const entries = this.teamsAndChannelsToEntries(this.props.teams, this.props.channels);\n\n        if (this.props.loading) {\n            return (\n                <div className='group-teams-and-channels'>\n                    <div className='group-teams-and-channels-loading'>\n                        <i className='fa fa-spinner fa-pulse fa-2x'/>\n                    </div>\n                </div>\n            );\n        }\n\n        if (entries.length === 0) {\n            return (\n                <div className='group-teams-and-channels'>\n                    <div className='group-teams-and-channels-empty'>\n                        <FormattedMessage\n                            id='admin.group_settings.group_details.group_teams_and_channels.no-teams-or-channels-speicified'\n                            defaultMessage='No teams or channels specified yet'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <div className='AdminPanel__content'>\n                <table\n                    id='team_and_channel_membership_table'\n                    className='AdminPanel__table group-teams-and-channels'\n                >\n                    <thead className='group-teams-and-channels--header'>\n                        <tr>\n                            <th width='30%'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_profile.group_teams_and_channels.name'\n                                    defaultMessage='Name'\n                                />\n                            </th>\n                            <th width='25%'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_profile.group_teams_and_channels.type'\n                                    defaultMessage='Type'\n                                />\n                            </th>\n                            <th width='25%'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_profile.group_teams_and_channels.assignedRoles'\n                                    defaultMessage='Assigned Roles'\n                                />\n                            </th>\n                            <th width='20%'/>\n                        </tr>\n                    </thead>\n                    <tbody className='group-teams-and-channels--body'>\n                        {entries.map((entry) => (\n                            <GroupTeamsAndChannelsRow\n                                key={entry.id}\n                                onRemoveItem={this.onRemoveItem}\n                                onChangeRoles={this.onChangeRoles}\n                                onToggleCollapse={this.onToggleCollapse}\n                                {...entry}\n                            />\n                        ))}\n                    </tbody>\n                </table>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'mattermost-redux/client';\n\nimport Avatar from 'components/widgets/users/avatar';\n\nexport default class GroupUsersRow extends React.PureComponent {\n    static propTypes = {\n        username: PropTypes.string.isRequired,\n        displayName: PropTypes.string.isRequired,\n        email: PropTypes.string.isRequired,\n        userId: PropTypes.string.isRequired,\n        lastPictureUpdate: PropTypes.number.isRequired,\n    };\n\n    render = () => {\n        return (\n            <div className='group-users-row'>\n                <Avatar\n                    username={this.props.username}\n                    url={Client4.getProfilePictureUrl(this.props.userId, this.props.lastPictureUpdate)}\n                    size='lg'\n                />\n                <div className='user-data'>\n                    <div className='name-row'>\n                        <span className='username'>{'@' + this.props.username}</span>\n                        {'-'}\n                        <span className='display-name'>{this.props.displayName}</span>\n                    </div>\n                    <div>\n                        <span className='email-label'>\n                            <FormattedMessage\n                                id='admin.group_settings.group_details.group_users.email'\n                                defaultMessage='Email:'\n                            />\n                        </span>\n                        <span className='email'>{this.props.email}</span>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport GroupUsersRow from 'components/admin_console/group_settings/group_details/group_users_row';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nimport {getSiteURL} from 'utils/url';\n\nconst GROUP_MEMBERS_PAGE_SIZE = 20;\n\nexport default class GroupUsers extends React.PureComponent {\n    static propTypes = {\n        groupID: PropTypes.string.isRequired,\n        members: PropTypes.arrayOf(PropTypes.object),\n        total: PropTypes.number.isRequired,\n        getMembers: PropTypes.func.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            page: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.props.getMembers(this.props.groupID, 0, GROUP_MEMBERS_PAGE_SIZE).then(() => {\n            this.setState({loading: false});\n        });\n    }\n\n    previousPage = async () => {\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page, loading: true});\n        await this.props.getMembers(this.props.groupID, page, GROUP_MEMBERS_PAGE_SIZE);\n        this.setState({loading: false});\n    }\n\n    nextPage = async () => {\n        const page = (this.state.page + 1) * GROUP_MEMBERS_PAGE_SIZE >= this.props.total ? this.state.page : this.state.page + 1;\n        this.setState({page, loading: true});\n        await this.props.getMembers(this.props.groupID, page, GROUP_MEMBERS_PAGE_SIZE);\n        this.setState({loading: false});\n    }\n\n    renderRows = () => {\n        if (this.props.members.length === 0) {\n            return (\n                <div className='group-users-empty'>\n                    <FormattedMessage\n                        id='admin.group_settings.group_details.group_users.no-users-found'\n                        defaultMessage='No users found'\n                    />\n                </div>\n            );\n        }\n        return this.props.members.map((member) => {\n            return (\n                <GroupUsersRow\n                    key={member.id}\n                    username={member.username}\n                    displayName={member.first_name + ' ' + member.last_name}\n                    email={member.email}\n                    userId={member.id}\n                    lastPictureUpdate={member.last_picture_update}\n                />\n            );\n        });\n    }\n\n    renderPagination = () => {\n        if (this.props.members.length === 0) {\n            return (<div className='group-users--footer empty'/>);\n        }\n\n        const startCount = (this.state.page * GROUP_MEMBERS_PAGE_SIZE) + 1;\n        let endCount = (this.state.page * GROUP_MEMBERS_PAGE_SIZE) + GROUP_MEMBERS_PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n\n        return (\n            <div className='group-users--footer'>\n                <div className='counter'>\n                    <FormattedMessage\n                        id='admin.group_settings.groups_list.paginatorCount'\n                        defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                        values={{\n                            startCount,\n                            endCount,\n                            total,\n                        }}\n                    />\n                </div>\n                <button\n                    className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                    onClick={this.previousPage}\n                    disabled={firstPage}\n                >\n                    <PreviousIcon/>\n                </button>\n                <button\n                    className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                    onClick={this.nextPage}\n                    disabled={lastPage}\n                >\n                    <NextIcon/>\n                </button>\n            </div>\n        );\n    }\n\n    render = () => {\n        return (\n            <div className='group-users'>\n                <div className='group-users--header'>\n                    <FormattedMarkdownMessage\n                        id='admin.group_settings.group_profile.group_users.ldapConnector'\n                        defaultMessage={'AD/LDAP Connector is configured to sync and manage this group and its users. [Click here to view]({siteURL}/admin_console/authentication/ldap)'}\n                        values={{siteURL: getSiteURL()}}\n                    />\n                </div>\n                <div className='group-users--body'>\n                    <div className={'group-users-loading ' + (this.state.loading ? 'active' : '')}>\n                        <i className='fa fa-spinner fa-pulse fa-2x'/>\n                    </div>\n                    {this.renderRows()}\n                </div>\n                {this.renderPagination()}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Modal} from 'react-bootstrap';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport {localizeMessage, compareChannels} from 'utils/utils.jsx';\n\nimport MultiSelect from 'components/multiselect/multiselect';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\n\nconst CHANNELS_PER_PAGE = 50;\n\nexport default class ChannelSelectorModal extends React.Component {\n    static propTypes = {\n        searchTerm: PropTypes.string.isRequired,\n        onModalDismissed: PropTypes.func,\n        onChannelsSelected: PropTypes.func,\n        groupID: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            loadChannels: PropTypes.func.isRequired,\n            setModalSearchTerm: PropTypes.func.isRequired,\n            searchChannels: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.searchTimeoutId = 0;\n\n        this.state = {\n            values: [],\n            show: true,\n            search: false,\n            loadingChannels: true,\n            channels: [],\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.loadChannels(0, CHANNELS_PER_PAGE + 1, this.props.groupID, true).then((response) => {\n            this.setState({channels: response.data.sort(compareChannels)});\n            this.setChannelsLoadingState(false);\n        });\n    }\n\n    componentDidUpdate(prevProps) { // eslint-disable-line camelcase\n        if (prevProps.searchTerm !== this.props.searchTerm) {\n            clearTimeout(this.searchTimeoutId);\n\n            const searchTerm = this.props.searchTerm;\n            if (searchTerm === '') {\n                this.props.actions.loadChannels(0, CHANNELS_PER_PAGE + 1, this.props.groupID, true).then((response) => {\n                    this.setState({channels: response.data.sort(compareChannels)});\n                    this.setChannelsLoadingState(false);\n                });\n            } else {\n                this.searchTimeoutId = setTimeout(\n                    async () => {\n                        this.setChannelsLoadingState(true);\n                        const response = await this.props.actions.searchChannels(searchTerm, this.props.groupID, true);\n                        this.setState({channels: response.data});\n                        this.setChannelsLoadingState(false);\n                    },\n                    Constants.SEARCH_TIMEOUT_MILLISECONDS\n                );\n            }\n        }\n    }\n\n    handleHide = () => {\n        this.props.actions.setModalSearchTerm('');\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onModalDismissed) {\n            this.props.onModalDismissed();\n        }\n    }\n\n    handleSubmit = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        if (this.state.values.length === 0) {\n            return;\n        }\n\n        this.props.onChannelsSelected(this.state.values);\n        this.handleHide();\n    }\n\n    addValue = (value) => {\n        const values = Object.assign([], this.state.values);\n        if (value && value.id && values.findIndex((v) => v.id === value.id) === -1) {\n            values.push(value);\n        }\n\n        this.setState({values});\n    }\n\n    setChannelsLoadingState = (loadingState) => {\n        this.setState({\n            loadingChannels: loadingState,\n        });\n    }\n\n    handlePageChange = (page, prevPage) => {\n        if (page > prevPage) {\n            this.setChannelsLoadingState(true);\n            this.props.actions.loadChannels(page, CHANNELS_PER_PAGE + 1, this.props.groupID, true).then((response) => {\n                const newState = [...this.state.channels];\n                const stateChannelIDs = this.state.channels.map((stateChannel) => stateChannel.id);\n                response.data.forEach((serverChannel) => {\n                    if (!stateChannelIDs.includes(serverChannel.id)) {\n                        newState.push(serverChannel);\n                    }\n                });\n                this.setState({channels: newState.sort(compareChannels)});\n                this.setChannelsLoadingState(false);\n            });\n        }\n    }\n\n    handleDelete = (values) => {\n        this.setState({values});\n    }\n\n    search = (term, multiselectComponent) => {\n        if (multiselectComponent.state.page !== 0) {\n            multiselectComponent.setState({page: 0});\n        }\n        this.props.actions.setModalSearchTerm(term);\n    }\n\n    renderOption(option, isSelected, onAdd, onMouseMove) {\n        let rowSelected = '';\n        if (isSelected) {\n            rowSelected = 'more-modal__row--selected';\n        }\n\n        return (\n            <div\n                key={option.id}\n                ref={isSelected ? 'selected' : option.id}\n                className={'more-modal__row clickable ' + rowSelected}\n                onClick={() => onAdd(option)}\n                onMouseMove={() => onMouseMove(option)}\n            >\n                <div\n                    className='more-modal__details'\n                >\n                    {option.type === 'P' &&\n                        <LockIcon className='icon icon__lock'/>}\n                    {option.type === 'O' &&\n                        <GlobeIcon className='icon icon__globe'/>}\n                    <span className='channel-name'>{option.display_name}</span>\n                    <span className='team-name'>{'(' + option.team_display_name + ')'}</span>\n                </div>\n                <div className='more-modal__actions'>\n                    <div className='more-modal__actions--round'>\n                        <i className='fa fa-plus'/>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n\n    renderValue(props) {\n        return props.data.display_name + ' (' + props.data.team_display_name + ')';\n    }\n\n    render() {\n        const numRemainingText = (\n            <FormattedMessage\n                id='multiselect.selectChannels'\n                defaultMessage='Use ↑↓ to browse, ↵ to select.'\n            />\n        );\n\n        const buttonSubmitText = localizeMessage('multiselect.add', 'Add');\n\n        return (\n            <Modal\n                dialogClassName={'a11y__modal more-modal more-direct-channels channel-selector-modal'}\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                role='dialog'\n                aria-labelledby='channelSelectorModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='channelSelectorModalLabel'\n                    >\n                        <FormattedMarkdownMessage\n                            id='add_channels_to_scheme.title'\n                            defaultMessage='Add Channels To **Channel Selection** List'\n                        />\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <MultiSelect\n                        key='addChannelsToSchemeKey'\n                        options={this.state.channels}\n                        optionRenderer={this.renderOption}\n                        values={this.state.values}\n                        valueRenderer={this.renderValue}\n                        perPage={CHANNELS_PER_PAGE}\n                        handlePageChange={this.handlePageChange}\n                        handleInput={this.search}\n                        handleDelete={this.handleDelete}\n                        handleAdd={this.addValue}\n                        handleSubmit={this.handleSubmit}\n                        numRemainingText={numRemainingText}\n                        buttonSubmitText={buttonSubmitText}\n                        saving={false}\n                        loading={this.state.loadingChannels}\n                        placeholderText={localizeMessage('multiselect.addChannelsPlaceholder', 'Search and add channels')}\n                    />\n                </Modal.Body>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getAllChannels as loadChannels, searchAllChannels} from 'mattermost-redux/actions/channels';\n\nimport {setModalSearchTerm} from 'actions/views/search';\n\nimport ChannelSelectorModal from './channel_selector_modal.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        searchTerm: state.views.search.modalSearch,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            loadChannels,\n            setModalSearchTerm,\n            searchChannels: searchAllChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelSelectorModal);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Groups} from 'mattermost-redux/constants';\n\nimport {t} from 'utils/i18n';\nimport {localizeMessage} from 'utils/utils.jsx';\nimport GroupProfile from 'components/admin_console/group_settings/group_details/group_profile';\nimport GroupTeamsAndChannels from 'components/admin_console/group_settings/group_details/group_teams_and_channels';\nimport GroupUsers from 'components/admin_console/group_settings/group_details/group_users';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport TeamSelectorModal from 'components/team_selector_modal';\nimport ChannelSelectorModal from 'components/channel_selector_modal';\nimport Menu from 'components/widgets/menu/menu';\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\n\nexport default class GroupDetails extends React.PureComponent {\n    static propTypes = {\n        groupID: PropTypes.string.isRequired,\n        group: PropTypes.object,\n        groupTeams: PropTypes.arrayOf(PropTypes.object),\n        groupChannels: PropTypes.arrayOf(PropTypes.object),\n        members: PropTypes.arrayOf(PropTypes.object),\n        memberCount: PropTypes.number.isRequired,\n        actions: PropTypes.shape({\n            getGroup: PropTypes.func.isRequired,\n            getMembers: PropTypes.func.isRequired,\n            getGroupSyncables: PropTypes.func.isRequired,\n            link: PropTypes.func.isRequired,\n            unlink: PropTypes.func.isRequired,\n            patchGroupSyncable: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        members: [],\n        groupTeams: [],\n        groupChannels: [],\n        group: {display_name: ''},\n        memberCount: 0,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loadingTeamsAndChannels: true,\n            addTeamOpen: false,\n            addChannelOpen: false,\n        };\n    }\n\n    componentDidMount() {\n        const {groupID, actions} = this.props;\n        actions.getGroup(groupID);\n        Promise.all([\n            actions.getGroupSyncables(groupID, Groups.SYNCABLE_TYPE_TEAM),\n            actions.getGroupSyncables(groupID, Groups.SYNCABLE_TYPE_CHANNEL),\n        ]).then(() => {\n            this.setState({loadingTeamsAndChannels: false});\n        });\n    }\n\n    openAddChannel = () => {\n        this.setState({addChannelOpen: true});\n    }\n\n    closeAddChannel = () => {\n        this.setState({addChannelOpen: false});\n    }\n\n    openAddTeam = () => {\n        this.setState({addTeamOpen: true});\n    }\n\n    closeAddTeam = () => {\n        this.setState({addTeamOpen: false});\n    }\n\n    addTeams = (teams) => {\n        const promises = [];\n        for (const team of teams) {\n            promises.push(this.props.actions.link(this.props.groupID, team.id, Groups.SYNCABLE_TYPE_TEAM, {auto_add: true}));\n        }\n        return Promise.all(promises).finally(() => this.props.actions.getGroupSyncables(this.props.groupID, Groups.SYNCABLE_TYPE_TEAM));\n    }\n\n    addChannels = async (channels) => {\n        const promises = [];\n        for (const channel of channels) {\n            promises.push(this.props.actions.link(this.props.groupID, channel.id, Groups.SYNCABLE_TYPE_CHANNEL, {auto_add: true}));\n        }\n        return Promise.all(promises).finally(() => {\n            this.props.actions.getGroupSyncables(this.props.groupID, Groups.SYNCABLE_TYPE_CHANNEL);\n            this.props.actions.getGroupSyncables(this.props.groupID, Groups.SYNCABLE_TYPE_TEAM);\n        });\n    }\n\n    onChangeRoles = async (id, type, roleToBe) => {\n        this.setState({loadingTeamsAndChannels: true});\n        if (type === 'public-team' || type === 'private-team') {\n            await this.props.actions.patchGroupSyncable(this.props.groupID, id, Groups.SYNCABLE_TYPE_TEAM, {scheme_admin: roleToBe});\n            await this.props.actions.getGroupSyncables(this.props.groupID, Groups.SYNCABLE_TYPE_TEAM);\n        } else {\n            await this.props.actions.patchGroupSyncable(this.props.groupID, id, Groups.SYNCABLE_TYPE_CHANNEL, {scheme_admin: roleToBe});\n            await this.props.actions.getGroupSyncables(this.props.groupID, Groups.SYNCABLE_TYPE_CHANNEL);\n        }\n        this.setState({loadingTeamsAndChannels: false});\n    }\n\n    render = () => {\n        const {group, members, groupTeams, groupChannels, memberCount} = this.props;\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/groups'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.group_settings.group_detail.group_configuration'\n                            defaultMessage='Group Configuration'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <div className='banner info'>\n                            <div className='banner__content'>\n                                <FormattedMessage\n                                    id='admin.group_settings.group_detail.introBanner'\n                                    defaultMessage='Configure default teams and channels and view users belonging to this group.'\n                                />\n                            </div>\n                        </div>\n\n                        <AdminPanel\n                            id='group_profile'\n                            titleId={t('admin.group_settings.group_detail.groupProfileTitle')}\n                            titleDefault='Group Profile'\n                            subtitleId={t('admin.group_settings.group_detail.groupProfileDescription')}\n                            subtitleDefault='The name for this group.'\n                        >\n                            <GroupProfile\n                                name={group.display_name}\n                            />\n                        </AdminPanel>\n\n                        <AdminPanel\n                            id='group_teams_and_channels'\n                            titleId={t('admin.group_settings.group_detail.groupTeamsAndChannelsTitle')}\n                            titleDefault='Team and Channel Membership'\n                            subtitleId={t('admin.group_settings.group_detail.groupTeamsAndChannelsDescription')}\n                            subtitleDefault='Set default teams and channels for group members. Teams added will include default channels, town-square, and off-topic. Adding a channel without setting the team will add the implied team to the listing below.'\n                            button={(\n                                <div className='group-profile-add-menu'>\n                                    <MenuWrapper>\n                                        <button\n                                            id='add_team_or_channel'\n                                            className='btn btn-primary'\n                                        >\n                                            <FormattedMessage\n                                                id='admin.group_settings.group_details.add_team_or_channel'\n                                                defaultMessage='Add Team or Channel'\n                                            />\n                                            <i className={'fa fa-caret-down'}/>\n                                        </button>\n                                        <Menu ariaLabel={localizeMessage('admin.group_settings.group_details.menuAriaLabel', 'Add Team or Channel Menu')}>\n                                            <Menu.ItemAction\n                                                id='add_team'\n                                                onClick={this.openAddTeam}\n                                                text={localizeMessage('admin.group_settings.group_details.add_team', 'Add Team')}\n                                            />\n                                            <Menu.ItemAction\n                                                id='add_channel'\n                                                onClick={this.openAddChannel}\n                                                text={localizeMessage('admin.group_settings.group_details.add_channel', 'Add Channel')}\n                                            />\n                                        </Menu>\n                                    </MenuWrapper>\n                                </div>\n                            )}\n                        >\n                            <GroupTeamsAndChannels\n                                id={this.props.groupID}\n                                teams={groupTeams}\n                                channels={groupChannels}\n                                loading={this.state.loadingTeamsAndChannels}\n                                getGroupSyncables={this.props.actions.getGroupSyncables}\n                                unlink={this.props.actions.unlink}\n                                onChangeRoles={this.onChangeRoles}\n                            />\n                        </AdminPanel>\n                        {this.state.addTeamOpen &&\n                            <TeamSelectorModal\n                                onModalDismissed={this.closeAddTeam}\n                                onTeamsSelected={this.addTeams}\n                                alreadySelected={this.props.groupTeams.map((team) => team.team_id)}\n                            />\n                        }\n                        {this.state.addChannelOpen &&\n                            <ChannelSelectorModal\n                                onModalDismissed={this.closeAddChannel}\n                                onChannelsSelected={this.addChannels}\n                                alreadySelected={this.props.groupChannels.map((channel) => channel.channel_id)}\n                                groupID={this.props.groupID}\n                            />\n                        }\n\n                        <AdminPanel\n                            id='group_users'\n                            titleId={t('admin.group_settings.group_detail.groupUsersTitle')}\n                            titleDefault='Users'\n                            subtitleId={t('admin.group_settings.group_detail.groupUsersDescription')}\n                            subtitleDefault='Listing of users in Mattermost associated with this group.'\n                        >\n                            <GroupUsers\n                                members={members}\n                                total={memberCount}\n                                groupID={this.props.groupID}\n                                getMembers={this.props.actions.getMembers}\n                            />\n                        </AdminPanel>\n                    </div>\n                </div>\n\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {\n    linkGroupSyncable,\n    unlinkGroupSyncable,\n    getGroup as fetchGroup,\n    getGroupMembers as fetchMembers,\n    getGroupSyncables as fetchGroupSyncables,\n    patchGroupSyncable\n} from 'mattermost-redux/actions/groups';\nimport {getGroup, getGroupTeams, getGroupChannels, getGroupMembers, getGroupMemberCount} from 'mattermost-redux/selectors/entities/groups';\n\nimport GroupDetails from './group_details.jsx';\n\nfunction mapStateToProps(state, props) {\n    const groupID = props.match.params.group_id;\n    const group = getGroup(state, groupID);\n    const groupTeams = getGroupTeams(state, groupID);\n    const groupChannels = getGroupChannels(state, groupID);\n    const members = getGroupMembers(state, groupID);\n    const memberCount = getGroupMemberCount(state, groupID);\n\n    return {\n        groupID,\n        group,\n        groupTeams,\n        groupChannels,\n        members,\n        memberCount,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getGroup: fetchGroup,\n            getMembers: fetchMembers,\n            getGroupSyncables: fetchGroupSyncables,\n            link: linkGroupSyncable,\n            unlink: unlinkGroupSyncable,\n            patchGroupSyncable,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils';\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nexport default class TeamRow extends React.Component {\n    static propTypes = {\n        team: PropTypes.object.isRequired,\n        onRowClick: PropTypes.func.isRequired,\n    };\n\n    handleRowClick = () => {\n        const {team, onRowClick} = this.props;\n        onRowClick(team.id);\n    }\n\n    renderManagementMethodText = () => {\n        const {team} = this.props;\n        if (team.group_constrained) {\n            return (\n                <FormattedMessage\n                    id='admin.team_settings.team_row.managementMethod.groupSync'\n                    defaultMessage='Group Sync'\n                />\n            );\n        } else if (team.allow_open_invite) {\n            return (\n                <FormattedMessage\n                    id='admin.team_settings.team_row.managementMethod.anyoneCanJoin'\n                    defaultMessage='Anyone Can Join'\n                />\n            );\n        }\n        return (\n            <FormattedMessage\n                id='admin.team_settings.team_row.managementMethod.inviteOnly'\n                defaultMessage='Invite Only'\n            />\n        );\n    }\n\n    render = () => {\n        const {team} = this.props;\n        const teamIconUrl = Utils.imageURLForTeam(team);\n        return (\n            <div\n                className='group'\n                onClick={this.handleRowClick}\n            >\n                <div className='group-row group-row-large'>\n                    <div className='group-name adjusted center-row row-content'>\n                        <TeamIcon\n                            size='sm'\n                            url={teamIconUrl}\n                            name={team.display_name}\n                        />\n                        <div>\n                            <b data-testid='team-display-name'>{team.display_name}</b>\n                            {team.description && (\n                                <div className='overflow--ellipsis text-nowrap team-descr-list-column'>\n                                    {team.description}\n                                </div>)}\n\n                        </div>\n\n                    </div>\n                    <div className='group-content'>\n                        <span className='group-description adjusted row-content'>\n                            {this.renderManagementMethodText()}\n                        </span>\n                        <span\n                            data-testid={`${team.display_name}edit`}\n                            className='group-actions'\n                        >\n                            <Link to={`/admin_console/user_management/teams/${team.id}`}>\n                                <FormattedMessage\n                                    id='admin.team_settings.team_row.configure'\n                                    defaultMessage='Edit'\n                                />\n                            </Link>\n                        </span>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nexport const PAGE_SIZE = 10;\n\nexport default class AbstractList extends React.PureComponent {\n    static propTypes = {\n        data: PropTypes.arrayOf(PropTypes.object),\n        onPageChangedCallback: PropTypes.func,\n        total: PropTypes.number.isRequired,\n        header: PropTypes.node.isRequired,\n        renderRow: PropTypes.func.isRequired,\n        emptyListTextId: PropTypes.string.isRequired,\n        emptyListTextDefaultMessage: PropTypes.string.isRequired,\n        actions: PropTypes.shape({\n            getData: PropTypes.func.isRequired,\n            removeGroup: PropTypes.func,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        data: [],\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            loading: true,\n            page: 0,\n        };\n    }\n\n    componentDidMount() {\n        this.performSearch(this.state.page);\n    }\n\n    previousPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page, loading: true});\n        this.performSearch(page);\n    }\n\n    nextPage = async (e) => {\n        e.preventDefault();\n        const page = this.state.page + 1;\n        this.setState({page, loading: true});\n        this.performSearch(page);\n    }\n\n    renderRows = () => {\n        if (this.state.loading) {\n            return (\n                <div className='groups-list-loading'>\n                    <i className='fa fa-spinner fa-pulse fa-2x'/>\n                </div>\n            );\n        }\n        if (this.props.data.length === 0) {\n            return (\n                <div className='groups-list-empty'>\n                    <FormattedMessage\n                        id={this.props.emptyListTextId}\n                        defaultMessage={this.props.emptyListTextDefaultMessage}\n                    />\n                </div>\n            );\n        }\n        const offset = this.state.page * PAGE_SIZE;\n        return this.props.data.slice(offset, offset + PAGE_SIZE).map(this.props.renderRow);\n    }\n\n    performSearch = (page) => {\n        const newState = {...this.state};\n        delete newState.page;\n\n        newState.loading = true;\n        this.setState(newState);\n\n        this.props.actions.getData(page, PAGE_SIZE).then((response) => {\n            if (this.props.onPageChangedCallback) {\n                this.props.onPageChangedCallback(this.getPaging(), response);\n            }\n            this.setState({loading: false});\n        });\n    }\n\n    getPaging() {\n        const startCount = (this.state.page * PAGE_SIZE) + 1;\n        let endCount = (this.state.page * PAGE_SIZE) + PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        return {startCount, endCount, total};\n    }\n\n    render = () => {\n        const {startCount, endCount, total} = this.getPaging();\n        const lastPage = endCount === total;\n        const firstPage = this.state.page === 0;\n        return (\n            <div className='groups-list groups-list-no-padding'>\n                {this.props.header}\n                <div\n                    id='groups-list--body'\n                    className='groups-list--body'\n                >\n                    {this.renderRows()}\n                </div>\n                {total > 0 && <div className='groups-list--footer'>\n                    <div className='counter'>\n                        <FormattedMessage\n                            id='admin.team_channel_settings.list.paginatorCount'\n                            defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                            values={{\n                                startCount,\n                                endCount,\n                                total,\n                            }}\n                        />\n                    </div>\n                    <button\n                        className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                        onClick={firstPage ? null : this.previousPage}\n                        disabled={firstPage}\n                    >\n                        <PreviousIcon/>\n                    </button>\n                    <button\n                        className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                        onClick={lastPage ? null : this.nextPage}\n                        disabled={lastPage}\n                        data-testid='page-link-next'\n                    >\n                        <NextIcon/>\n                    </button>\n                </div>}\n            </div>\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {cloneDeep} from 'lodash';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants';\n\nimport TeamRow from 'components/admin_console/team_channel_settings/team/list/team_row.jsx';\nimport AbstractList, {PAGE_SIZE} from 'components/admin_console/team_channel_settings/abstract_list.jsx';\nimport {browserHistory} from 'utils/browser_history';\n\nimport SearchIcon from 'components/widgets/icons/search_icon';\n\nexport default class TeamList extends React.PureComponent {\n    static propTypes = {\n        actions: PropTypes.shape({\n            searchTeams: PropTypes.func.isRequired,\n            getData: PropTypes.func.isRequired,\n        }).isRequired,\n        data: PropTypes.array,\n        total: PropTypes.number,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            searchString: '',\n            teams: [],\n            searchTotalCount: 0,\n            pageResetKey: 0,\n        };\n    }\n\n    header() {\n        return (\n            <>\n                {this.searchBar()}\n                <div className='groups-list--header'>\n                    <div className='group-name adjusted'>\n                        <FormattedMessage\n                            id='admin.team_settings.team_list.nameHeader'\n                            defaultMessage='Name'\n                        />\n                    </div>\n                    <div className='group-content'>\n                        <div className='group-description adjusted'>\n                            <FormattedMessage\n                                id='admin.team_settings.team_list.mappingHeader'\n                                defaultMessage='Management'\n                            />\n                        </div>\n                        <div className='group-actions'/>\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    searchBar = () => {\n        return (\n            <div className='groups-list--global-actions'>\n                <div className='group-list-search'>\n                    <input\n                        type='text'\n                        placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                        onKeyUp={this.handleTeamSearchKeyUp}\n                        onChange={this.searchBarChangeHandler}\n                        value={this.state.searchString}\n                        data-testid='search-input'\n                    />\n                    <SearchIcon\n                        id='searchIcon'\n                        className='search__icon'\n                        aria-hidden='true'\n                    />\n                    <i\n                        className={'fa fa-times-circle group-filter-action ' + (this.state.searchString.length ? '' : 'hidden')}\n                        onClick={this.resetSearch}\n                        data-testid='clear-search'\n                    />\n                </div>\n            </div>\n        );\n    }\n\n    searchBarChangeHandler = (e) => {\n        this.setState({searchString: e.target.value});\n    }\n\n    handleTeamSearchKeyUp = async (e) => {\n        const {key} = e;\n        const {searchString} = this.state;\n\n        if (key === Constants.KeyCodes.ENTER[0]) {\n            if (searchString.length > 1) {\n                const response = await this.props.actions.searchTeams(searchString, 0, PAGE_SIZE);\n                this.setState({searchMode: true, teams: response.data.teams, searchTotalCount: response.data.total_count, pageResetKey: Date.now()});\n            }\n        }\n\n        if (searchString.length === 0) {\n            this.resetSearch();\n        }\n    }\n\n    getDataBySearch = async (page, perPage) => {\n        if (this.state.searchString.length > 1) {\n            const response = await this.props.actions.searchTeams(this.state.searchString, page, perPage);\n            const teams = new Array(page * perPage); // Pad the array with empty entries because AbstractList expects to slice the results based on the pagination offset.\n            return teams.concat(response.data.teams);\n        }\n        return [];\n    }\n\n    resetSearch = () => {\n        this.setState({searchString: '', teams: [], searchMode: false, searchTotalCount: 0, pageResetKey: Date.now()});\n    }\n\n    onPageChangedCallback = (pagination, teams) => {\n        if (this.state.searchMode) {\n            this.setState({teams});\n        }\n    }\n\n    render() {\n        const absProps = cloneDeep(this.props);\n        if (this.state.searchMode) {\n            absProps.actions.getData = this.getDataBySearch;\n        }\n        return (\n            <AbstractList\n                header={this.header()}\n                renderRow={this.renderRow}\n                {...absProps}\n                key={this.state.pageResetKey}\n                onPageChangedCallback={this.onPageChangedCallback}\n                data={this.state.searchMode ? this.state.teams : this.props.data}\n                total={this.state.searchMode ? this.state.searchTotalCount : this.props.total}\n            />);\n    }\n\n    renderRow = (item) => {\n        return (\n            <TeamRow\n                key={item.id}\n                team={item}\n                onRowClick={this.onTeamClick}\n            />\n        );\n    }\n\n    onTeamClick = (id) => {\n        browserHistory.push(`/admin_console/user_management/teams/${id}`);\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {getTeams as fetchTeams, searchTeams} from 'mattermost-redux/actions/teams';\nimport {getTeams} from 'mattermost-redux/selectors/entities/teams';\n\nimport {t} from 'utils/i18n';\n\nimport TeamList from './team_list.jsx';\n\nconst getSortedListOfTeams = createSelector(\n    getTeams,\n    (teams) => Object.values(teams).sort((a, b) => a.display_name.localeCompare(b.display_name))\n);\n\nfunction mapStateToProps(state) {\n    return {\n        data: getSortedListOfTeams(state),\n        total: state.entities.teams.totalCount || 0,\n        emptyListTextId: t('admin.team_settings.team_list.no_teams_found'),\n        emptyListTextDefaultMessage: 'No teams found',\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getData: (page, pageSize) => fetchTeams(page, pageSize, true),\n            searchTeams,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamList);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'utils/i18n';\nimport TeamList from 'components/admin_console/team_channel_settings/team/list';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\n\nexport function TeamsSettings(props) {\n    return (\n        <div className='wrapper--fixed'>\n            <div className='admin-console__header'>\n                <FormattedMessage\n                    id='admin.team_settings.groupsPageTitle'\n                    defaultMessage='{siteName} Teams'\n                    values={{siteName: props.siteName}}\n                />\n            </div>\n\n            <div className='admin-console__wrapper'>\n                <div className='admin-console__content'>\n                    <AdminPanel\n                        id='teams'\n                        titleId={t('admin.team_settings.title')}\n                        titleDefault='Teams'\n                        subtitleId={t('admin.team_settings.description')}\n                        subtitleDefault='Manage team settings.'\n                    >\n                        <TeamList/>\n                    </AdminPanel>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nTeamsSettings.propTypes = {\n    siteName: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {connect} from 'react-redux';\n\nimport {TeamsSettings} from './team_settings';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n\n    return {\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(TeamsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nexport default class RemoveConfirmModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /*\n         * Indicates if the message is for removal from channel or team\n         */\n        inChannel: PropTypes.bool.isRequired,\n\n        /*\n         * Number of users to be removed\n         */\n        amount: PropTypes.number.isRequired,\n\n    }\n\n    render() {\n        const {amount, inChannel} = this.props;\n        const title = (\n            <FormattedMessage\n                id='admin.team_channel_settings.removeConfirmModal.title'\n                defaultMessage='Save and remove {amount, number} {amount, plural, one {user} other {users}}?'\n                values={{amount}}\n            />\n        );\n\n        const messageId = inChannel ? t('admin.team_channel_settings.removeConfirmModal.messageGroup') : t('admin.team_channel_settings.removeConfirmModal.messageChannel');\n        const messageChannel = '{amount, number} {amount, plural, one {user} other {users}} will be removed. They are not in groups linked to this channel. Are you sure you wish to remove these users?';\n        const messageGroup = '{amount, number} {amount, plural, one {user} other {users}} will be removed. They are not in groups linked to this group. Are you sure you wish to remove these users?';\n\n        const message = (\n            <FormattedMessage\n                id={messageId}\n                defaultMessage={inChannel ? messageChannel : messageGroup}\n                values={{amount}}\n            />\n        );\n\n        const buttonClass = 'btn btn-primary';\n        const button = (\n            <FormattedMessage\n                id='admin.team_channel_settings.removeConfirmModal.remove'\n                defaultMessage='Save and remove {amount, plural, one {user} other {users}}'\n                values={{amount}}\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Client4} from 'mattermost-redux/client';\nimport {Tooltip} from 'react-bootstrap';\n\nimport {Group} from 'mattermost-redux/types/groups';\n\nimport {t} from 'utils/i18n';\nimport * as Utils from 'utils/utils';\n\nimport OverlayTrigger from 'components/overlay_trigger';\nimport Avatar from 'components/widgets/users/avatar';\n\ntype ProfileWithGroups = Partial<UserProfile & {\n    groups: Partial<Group>[];\n}>;\n\ninterface AdminGroupUsersRowProps {\n    displayName: string;\n    user: ProfileWithGroups;\n    lastPictureUpdate: number;\n}\nexport default class AdminGroupUsersRow extends React.PureComponent<AdminGroupUsersRowProps, {}> {\n    renderRolesColumn = (member: ProfileWithGroups) => {\n        return member.roles!.split(' ').map((role) =>\n            Utils.localizeMessage('admin.permissions.roles.' + role + '.name', role)\n        ).join(', ');\n    };\n\n    renderGroupsColumn = (member: ProfileWithGroups) => {\n        const groups = member.groups || [];\n        if ((groups).length === 1) {\n            return groups[0].display_name;\n        }\n        return (\n            <OverlayTrigger\n                placement='top'\n                overlay={<Tooltip id='groupsTooltip'>{groups.map((g) => g.display_name).join(', ')}</Tooltip>}\n            >\n                <a href='#'>\n                    <FormattedMessage\n                        id={t('team_channel_settings.group.group_user_row.numberOfGroups')}\n                        defaultMessage={'{amount, number} {amount, plural, one {Group} other {Groups}}'}\n                        values={{amount: groups.length}}\n                    />\n                </a>\n            </OverlayTrigger>\n        );\n    };\n\n    render = () => {\n        const {user, lastPictureUpdate, displayName} = this.props;\n        return (\n            <div className='group'>\n                <div\n                    className='group-row roc'\n                    style={{padding: '30px 0px'}}\n                >\n                    <div className='group-name col-sm-8'>\n                        <div className='col-sm-2'>\n                            <Avatar\n                                username={user.username}\n                                url={Client4.getProfilePictureUrl(user.id!, lastPictureUpdate)}\n                                size='lg'\n                            />\n                        </div>\n                        <div className='col-sm-10'>\n                            <div className='row'>\n                                {/* eslint-disable react/jsx-no-literals */}\n                                <b>{'@' + user.username}&nbsp;</b>\n                                {'-'}&nbsp;{displayName}\n                            </div>\n                            <div className='row email-group-row'>{user.email}</div>\n                        </div>\n                    </div>\n                    <span className='col-sm-2 group-user-removal-column group-description'>{this.renderRolesColumn(user)}</span>\n                    <span className='col-sm-2 group-user-removal-column group-description group-description-link'>\n                        {this.renderGroupsColumn(user)}\n                    </span>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {UserProfile} from 'mattermost-redux/types/users';\nimport {FormattedMessage} from 'react-intl';\n\nimport NextIcon from 'components/widgets/icons/fa_next_icon';\nimport PreviousIcon from 'components/widgets/icons/fa_previous_icon';\n\nimport GroupUsersRow from './group_users_row';\n\nconst GROUP_MEMBERS_PAGE_SIZE = 10;\n\ninterface AdminGroupUsersProps {\n    members: Partial<UserProfile>& {last_picture_update?: number}[];\n    total: number;\n}\n\ninterface AdminGroupUsersState {\n    page: number;\n}\n\nexport default class AdminGroupUsers extends React.PureComponent<AdminGroupUsersProps, AdminGroupUsersState> {\n    state: AdminGroupUsersState = {\n        page: 0\n    }\n\n    previousPage = async () => {\n        const page = this.state.page < 1 ? 0 : this.state.page - 1;\n        this.setState({page});\n    };\n\n    nextPage = async () => {\n        const page = (this.state.page + 1) * GROUP_MEMBERS_PAGE_SIZE >= this.props.total ? this.state.page : this.state.page + 1;\n        this.setState({page});\n    };\n\n    renderRow = (member: Partial<UserProfile> & {last_picture_update?: number}) => (\n        <GroupUsersRow\n            key={member.id}\n            user={member}\n            displayName={member.first_name + ' ' + member.last_name}\n            lastPictureUpdate={member.last_picture_update || 0}\n        />\n    );\n    renderRows = () => {\n        const offset = this.state.page * GROUP_MEMBERS_PAGE_SIZE;\n        return this.props.members.slice(offset, offset + GROUP_MEMBERS_PAGE_SIZE).map(this.renderRow);\n    };\n    renderPagination = () => {\n        const {page} = this.state;\n        const startCount = (page * GROUP_MEMBERS_PAGE_SIZE) + 1;\n        let endCount = (page * GROUP_MEMBERS_PAGE_SIZE) + GROUP_MEMBERS_PAGE_SIZE;\n        const total = this.props.total;\n        if (endCount > total) {\n            endCount = total;\n        }\n        const lastPage = endCount === total;\n        const firstPage = page === 0;\n        return (\n            <div className='groups-list--footer'>\n                <div className='counter'>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.list.paginatorCount'\n                        defaultMessage='{startCount, number} - {endCount, number} of {total, number}'\n                        values={{\n                            startCount,\n                            endCount,\n                            total\n                        }}\n                    />\n                </div>\n                <button\n                    className={'btn btn-link prev ' + (firstPage ? 'disabled' : '')}\n                    onClick={this.previousPage}\n                    disabled={firstPage}\n                >\n                    <PreviousIcon/>\n                </button>\n                <button\n                    className={'btn btn-link next ' + (lastPage ? 'disabled' : '')}\n                    onClick={this.nextPage}\n                    disabled={lastPage}\n                >\n                    <NextIcon/>\n                </button>\n            </div>\n        );\n    };\n    render = () => {\n        return (\n            <div className='groups-list groups-list-less-padding'>\n                <div className='groups-list--header'>\n                    <div className='group-name'>\n                        <FormattedMessage\n                            id='admin.team_channel_settings.user_list.nameHeader'\n                            defaultMessage='Name'\n                        />\n                    </div>\n                    <div className='group-content'>\n                        <div className='group-description group-users--header-padded'>\n                            <FormattedMessage\n                                id='admin.team_channel_settings.user_list.roleHeader'\n                                defaultMessage='Role'\n                            />\n                        </div>\n                        <div className='group-description group-users--header-padded'>\n                            <FormattedMessage\n                                id='admin.team_channel_settings.user_list.groupsHeader'\n                                defaultMessage='Groups'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='groups-list--body'>\n                    {this.renderRows()}\n                </div>\n\n                {this.renderPagination()}\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Modal} from 'react-bootstrap';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\n\nimport GroupsUsers from './group/group_users';\n\nexport default class UsersToBeRemovedModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Number of users to be removed\n         */\n        total: PropTypes.number.isRequired,\n\n        /*\n         * users to be removed\n         */\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n\n        onHide: PropTypes.func,\n    }\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            values: [],\n            show: true,\n        };\n    }\n\n    handleHide = () => {\n        this.setState({show: false});\n    }\n\n    handleExit = () => {\n        if (this.props.onHide) {\n            this.props.onHide();\n        }\n    }\n\n    render() {\n        const {users, total} = this.props;\n        const title = (\n            <FormattedMarkdownMessage\n                id='admin.team_channel_settings.usersToBeRemovedModal.title'\n                defaultMessage='**{total, number} {total, plural, one {User} other {Users}}** To Be Removed'\n                values={{total}}\n            />\n        );\n\n        const message = (\n            <FormattedMessage\n                id='admin.team_channel_settings.usersToBeRemovedModal.message'\n                defaultMessage='The members listed below are not in any of the groups currently linked to this team. Because this team is set to be managed by group sync they will all be removed once saved.'\n            />\n        );\n\n        const button = (\n            <FormattedMessage\n                id='admin.team_channel_settings.usersToBeRemovedModal.close'\n                defaultMessage='Close'\n            />\n        );\n\n        return (\n            <Modal\n                dialogClassName='a11y__modal settings-modal'\n                show={this.state.show}\n                onHide={this.handleHide}\n                onExited={this.handleExit}\n                id='confirmModal'\n                role='dialog'\n                aria-labelledby='confirmModalLabel'\n            >\n                <Modal.Header closeButton={true}>\n                    <Modal.Title\n                        componentClass='h1'\n                        id='confirmModalLabel'\n                    >\n                        {title}\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className='group-users-to-remove-modal-description'>{message}</div>\n                    <GroupsUsers\n                        members={users}\n                        total={total}\n                    />\n                </Modal.Body>\n                <Modal.Footer>\n                    <button\n                        autoFocus={true}\n                        type='button'\n                        className='btn btn-primary'\n                        onClick={this.handleHide}\n                        id='closeModalButton'\n                    >\n                        {button}\n                    </button>\n                </Modal.Footer>\n            </Modal>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as PropTypes from 'prop-types';\n\nimport FormError from 'components/form_error';\n\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport UsersToBeRemovedModal from './users_to_be_removed_modal';\n\nexport const NeedGroupsError = ({warning}) => (\n    <FormError\n        iconClassName={`fa-exclamation-${warning ? 'circle' : 'triangle'}`}\n        textClassName={`has-${warning ? 'warning' : 'error'}`}\n        error={(\n            <FormattedMessage\n                id='admin.team_channel_settings.need_groups'\n                defaultMessage='You must add at least one group to manage this team by sync group members.'\n            />)}\n    />\n);\n\nexport const NeedDomainsError = () => (\n    <FormError\n        error={(\n            <FormattedMessage\n                id='admin.team_channel_settings.need_domains'\n                defaultMessage='Please specify emails domains.'\n            />)}\n    />\n);\n\nNeedGroupsError.propTypes = {\n    warning: PropTypes.bool,\n};\n\nexport class UsersWillBeRemovedError extends React.PureComponent {\n    static propTypes = {\n        users: PropTypes.arrayOf(PropTypes.object).isRequired,\n        total: PropTypes.number.isRequired,\n    }\n\n    render() {\n        const {total, users} = this.props;\n        return (\n            <FormError\n                iconClassName='fa-exclamation-triangle'\n                textClassName='has-warning'\n                error={(\n                    <span>\n                        <FormattedMessage\n                            id='admin.team_channel_settings.users_will_be_removed'\n                            defaultMessage='{amount, number} {amount, plural, one {User} other {Users}} will be removed from this team. They are not in groups linked to this team.'\n                            values={{amount: total}}\n                        />\n                        <ToggleModalButton\n                            className='btn btn-link'\n                            dialogType={UsersToBeRemovedModal}\n                            dialogProps={{total, users}}\n                        >\n                            <FormattedMessage\n                                id='admin.team_channel_settings.view_removed_users'\n                                defaultMessage='View These Users'\n                            />\n                        </ToggleModalButton>\n                    </span>\n                )}\n            />\n\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\n\nimport {FormattedMessage} from 'react-intl';\n\nimport PropTypes from 'prop-types';\n\nimport SaveButton from 'components/save_button';\nimport {localizeMessage} from 'utils/utils';\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nexport default function SaveChangesPanel({saveNeeded, onClick, saving, serverError, cancelLink}) {\n    return (\n        <div className='admin-console-save'>\n            <SaveButton\n                saving={saving}\n                disabled={!saveNeeded}\n                onClick={onClick}\n                savingMessage={localizeMessage('admin.team_channel_settings.saving', 'Saving Config...')}\n            />\n            <BlockableLink\n                className='cancel-button'\n                to={cancelLink}\n            >\n                <FormattedMessage\n                    id='admin.team_channel_settings.cancel'\n                    defaultMessage='Cancel'\n                />\n            </BlockableLink>\n\n            <div className='error-message'>\n                {serverError}\n            </div>\n        </div>\n    );\n}\n\nSaveChangesPanel.propTypes = {\n    saving: PropTypes.bool.isRequired,\n    saveNeeded: PropTypes.bool.isRequired,\n    onClick: PropTypes.func.isRequired,\n    cancelLink: PropTypes.string.isRequired,\n    serverError: PropTypes.node,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport * as Utils from 'utils/utils';\n\nimport TeamIcon from 'components/widgets/team_icon/team_icon';\n\nexport function TeamProfile({team}) {\n    const teamIconUrl = Utils.imageURLForTeam(team);\n\n    return (\n        <AdminPanel\n            id='team_profile'\n            titleId={t('admin.team_settings.team_detail.profileTitle')}\n            titleDefault='Team Profile'\n            subtitleId={t('admin.team_settings.team_detail.profileDescription')}\n            subtitleDefault='Summary of the team, including team name and description.'\n        >\n\n            <div className='group-teams-and-channels'>\n\n                <div className='group-teams-and-channels--body'>\n                    <div className='row'>\n                        <div className='col-sm-2 large-team-image-col'>\n                            <TeamIcon\n                                name={team.display_name}\n                                size='lg'\n                                url={teamIconUrl}\n                            />\n                        </div>\n                        <div className='col-sm-10'>\n                            <div className='row row-bottom-padding'>\n                                <FormattedMarkdownMessage\n                                    id='admin.team_settings.team_detail.teamName'\n                                    defaultMessage='**Team Name**:'\n                                />\n                                <br/>\n                                {team.display_name}\n                            </div>\n                            <div className='row'>\n                                <FormattedMarkdownMessage\n                                    id='admin.team_settings.team_detail.teamDescription'\n                                    defaultMessage='**Team Description**:'\n                                />\n                                <br/>\n                                {team.description || <span className='greyed-out'>{Utils.localizeMessage('admin.team_settings.team_detail.profileNoDescription', 'No team description added.')}</span>}\n                            </div>\n\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n        </AdminPanel>\n    );\n}\n\nTeamProfile.propTypes = {\n    team: PropTypes.object.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\ntype Props = {\n    onToggle: (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void;\n    toggled?: boolean;\n    disabled?: boolean;\n    onText?: React.ReactNode;\n    offText?: React.ReactNode;\n}\n\nconst Toggle: React.FC<Props> = (props: Props) => {\n    const {onToggle, toggled, disabled, onText, offText} = props;\n    return (\n        <button\n            type='button'\n            onClick={onToggle}\n            className={`btn btn-lg btn-toggle ${toggled && 'active'} ${disabled && 'disabled'}`}\n            aria-pressed={toggled ? 'true' : 'false'}\n        >\n            <div className='handle'/>\n            {text(toggled, onText, offText)}\n        </button>\n    );\n};\n\nfunction text(toggled?: boolean, onText?: React.ReactNode, offText?: React.ReactNode): React.ReactNode | null {\n    if ((toggled && !onText) || (!toggled && !offText)) {\n        return null;\n    }\n    return (<div className={`bg-text ${toggled ? 'on' : 'off'}`}>{toggled ? onText : offText}</div>);\n}\n\nexport default Toggle;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport Toggle from 'components/toggle';\n\nexport default class LineSwitch extends React.PureComponent {\n    static propTypes = {\n        title: PropTypes.node.isRequired,\n        last: PropTypes.bool,\n        toggled: PropTypes.bool.isRequired,\n        disabled: PropTypes.bool,\n        singleLine: PropTypes.bool,\n        subTitle: PropTypes.node.isRequired,\n        onToggle: PropTypes.func.isRequired,\n        children: PropTypes.node,\n        offText: PropTypes.node,\n        onText: PropTypes.node,\n    };\n\n    render() {\n        const {title, subTitle, singleLine, toggled, onToggle, children, offText, onText, disabled, last} = this.props;\n        return (<div>\n            <div className='line-switch d-flex flex-sm-column flex-md-row align-items-sm-start align-items-center justify-content-md-between'>\n                <label className='line-switch__label'>{title}</label>\n                <div className='line-switch__toggle'>\n                    <Toggle\n                        disabled={disabled}\n                        onToggle={onToggle}\n                        toggled={toggled}\n                        onText={onText}\n                        offText={offText}\n                    />\n                </div>\n            </div>\n            <div className='row'>\n                <div className='col-sm-10'>\n                    <div className={`help-text-small help-text-no-padding ${singleLine ? 'help-text-single-line' : ''}`}>{subTitle}</div>\n                </div>\n            </div>\n            {children}\n            {!last && <div className='section-separator'><hr className='separator__hr'/></div>}\n        </div>);\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport LineSwitch from '../../line_switch.jsx';\n\nconst SyncGroupsToggle = ({syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains, onToggle}) => (\n    <LineSwitch\n        toggled={syncChecked}\n        last={syncChecked}\n        onToggle={() => onToggle(!syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains)}\n        title={(\n            <FormattedMessage\n                id='admin.team_settings.team_details.syncGroupMembers'\n                defaultMessage='Sync Group Members'\n            />\n        )}\n        subTitle={(\n            <FormattedMarkdownMessage\n                id='admin.team_settings.team_details.syncGroupMembersDescr'\n                defaultMessage='When enabled, adding and removing users from groups will add or remove them from this team. The only way of inviting members to this team is by adding the groups they belong to. [Learn More](!https://www.mattermost.com/pl/default-ldap-group-constrained-team-channel.html)'\n            />\n        )}\n    />);\n\nSyncGroupsToggle.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n    onToggle: PropTypes.func.isRequired,\n};\n\nconst AllowAllToggle = ({syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains, onToggle}) =>\n    !syncChecked && (\n        <LineSwitch\n            toggled={allAllowedChecked}\n            singleLine={true}\n            onToggle={() => onToggle(syncChecked, !allAllowedChecked, allowedDomainsChecked, allowedDomains)}\n            title={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.anyoneCanJoin'\n                    defaultMessage='Anyone can join this team'\n                />\n            )}\n            subTitle={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.anyoneCanJoinDescr'\n                    defaultMessage='This team can be discovered allowing anyone with an account to join this team.'\n                />\n            )}\n        />);\n\nAllowAllToggle.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n    onToggle: PropTypes.func.isRequired,\n};\n\nconst AllowedDomainsToggle = ({syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains, onToggle}) =>\n    !syncChecked && (\n        <LineSwitch\n            toggled={allowedDomainsChecked}\n            last={true}\n            onToggle={() => onToggle(syncChecked, allAllowedChecked, !allowedDomainsChecked, allowedDomains)}\n            singleLine={true}\n            title={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.specificDomains'\n                    defaultMessage='Only specific email domains can join this team'\n                />\n            )}\n            subTitle={(\n                <FormattedMessage\n                    id='admin.team_settings.team_details.specificDomainsDescr'\n                    defaultMessage='Users can only join the team if their email matches one of the specified domains'\n                />\n            )}\n        >\n            <div className='help-text csvDomains'>\n                <FormattedMessage\n                    id='admin.team_settings.team_details.csvDomains'\n                    defaultMessage='Comma Separated Email Domain List'\n                />\n            </div>\n            <input\n                type='text'\n                value={allowedDomains}\n                placeholder='mattermost.org'\n                className='form-control'\n                onChange={(e) => onToggle(syncChecked, allAllowedChecked, allowedDomainsChecked, e.currentTarget.value)}\n            />\n        </LineSwitch>);\n\nAllowedDomainsToggle.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n    onToggle: PropTypes.func.isRequired,\n};\n\nexport const TeamModes = ({allAllowedChecked, syncChecked, allowedDomains, allowedDomainsChecked, onToggle}) => (\n    <AdminPanel\n        id='team_manage'\n        titleId={t('admin.team_settings.team_detail.manageTitle')}\n        titleDefault='Team Management'\n        subtitleId={t('admin.team_settings.team_detail.manageDescription')}\n        subtitleDefault='Choose between inviting members manually or syncing members automatically from groups.'\n    >\n        <div className='group-teams-and-channels'>\n            <div className='group-teams-and-channels--body'>\n                <SyncGroupsToggle\n                    allAllowedChecked={allAllowedChecked}\n                    allowedDomainsChecked={allowedDomainsChecked}\n                    allowedDomains={allowedDomains}\n                    syncChecked={syncChecked}\n                    onToggle={onToggle}\n                />\n                <AllowAllToggle\n                    allAllowedChecked={allAllowedChecked}\n                    allowedDomainsChecked={allowedDomainsChecked}\n                    allowedDomains={allowedDomains}\n                    syncChecked={syncChecked}\n                    onToggle={onToggle}\n                />\n                <AllowedDomainsToggle\n                    allAllowedChecked={allAllowedChecked}\n                    allowedDomainsChecked={allowedDomainsChecked}\n                    allowedDomains={allowedDomains}\n                    syncChecked={syncChecked}\n                    onToggle={onToggle}\n                />\n            </div>\n        </div>\n    </AdminPanel>);\n\nTeamModes.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    allAllowedChecked: PropTypes.bool.isRequired,\n    allowedDomainsChecked: PropTypes.bool.isRequired,\n    onToggle: PropTypes.func.isRequired,\n    allowedDomains: PropTypes.string.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {Group} from 'mattermost-redux/types/groups';\nimport {FormattedMessage} from 'react-intl';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Menu from 'components/widgets/menu/menu';\nimport {localizeMessage} from 'utils/utils.jsx';\n\ninterface GroupRowProps {\n    group: Partial<Group>;\n    removeGroup: (gid: string) => void;\n    key?: string;\n    setNewGroupRole: (gid: string) => void;\n    type: string;\n}\n\nexport default class GroupRow extends React.Component<GroupRowProps> {\n    removeGroup = () => {\n        this.props.removeGroup(this.props.group.id!);\n    };\n\n    setNewGroupRole = () => {\n        this.props.setNewGroupRole(this.props.group.id!);\n    };\n\n    displayCurrentRole = () => {\n        const {group, type} = this.props;\n        const channelAdmin = (\n            <FormattedMessage\n                id='admin.team_channel_settings.group_row.channelAdmin'\n                defaultMessage='Channel Admin'\n            />\n        );\n        const teamAdmin = (\n            <FormattedMessage\n                id='admin.team_channel_settings.group_row.teamAdmin'\n                defaultMessage='Team Admin'\n            />\n        );\n        const member = (\n            <FormattedMessage\n                id='admin.team_channel_settings.group_row.member'\n                defaultMessage='Member'\n            />\n        );\n\n        if (group.scheme_admin && type === 'channel') {\n            return channelAdmin;\n        } else if (group.scheme_admin && type === 'team') {\n            return teamAdmin;\n        }\n        return member;\n    }\n\n    displayRoleToBe = () => {\n        const {group, type} = this.props;\n        if (!group.scheme_admin && type === 'channel') {\n            return localizeMessage('admin.team_channel_settings.group_row.channelAdmin', 'Channel Admin');\n        } else if (!group.scheme_admin && type === 'team') {\n            return localizeMessage('admin.team_channel_settings.group_row.teamAdmin', 'Team Admin');\n        }\n        return localizeMessage('admin.team_channel_settings.group_row.member', 'Member');\n    }\n\n    render = () => {\n        const {group} = this.props;\n        return (\n            <div\n                id='group'\n                className='group'\n            >\n                <div\n                    id='group-row'\n                    className='group-row'\n                >\n                    <span className='group-name row-content'>\n                        {group.display_name || group.name}\n                    </span>\n                    <span className='group-description row-content'>\n                        <FormattedMessage\n                            id='admin.team_channel_settings.group_row.members'\n                            defaultMessage='{memberCount, number} {memberCount, plural, one {member} other {members}}'\n                            values={{memberCount: group.member_count}}\n                        />\n                    </span>\n                    <div className='group-description row-content roles'>\n                        <MenuWrapper>\n                            <div>\n                                <a\n                                    data-testid='current-role'\n                                >\n                                    <span>{this.displayCurrentRole()}</span>\n                                    <span className='caret'/>\n                                </a>\n                            </div>\n                            <Menu\n                                id='role-to-be-menu'\n                                openLeft={true}\n                                openUp={false}\n                                ariaLabel={localizeMessage('admin.team_channel_settings.group_row.memberRole', 'Member Role')}\n                            >\n                                <Menu.ItemAction\n                                    id='role-to-be'\n                                    onClick={this.setNewGroupRole}\n                                    text={this.displayRoleToBe()}\n                                />\n                            </Menu>\n                        </MenuWrapper>\n                    </div>\n                    <span\n                        id='group-actions'\n                        className='group-actions'\n                    >\n                        <a\n                            href='#'\n                            onClick={this.removeGroup}\n                        >\n                            <FormattedMessage\n                                id='admin.team_channel_settings.group_row.remove'\n                                defaultMessage='Remove'\n                            />\n                        </a>\n                    </span>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Group} from 'mattermost-redux/types/groups';\nimport {Channel} from 'mattermost-redux/types/channels';\n\nimport AbstractList from 'components/admin_console/team_channel_settings/abstract_list.jsx';\n\nimport GroupRow from './group_row';\n\nconst Header = () => {\n    return (\n        <div className='groups-list--header'>\n            <div className='group-name group-name-adjusted'>\n                <FormattedMessage\n                    id='admin.team_channel_settings.group_list.nameHeader'\n                    defaultMessage='Name'\n                />\n            </div>\n            <div className='group-content'>\n                <div className='group-description group-description-adjusted'>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.group_list.membersHeader'\n                        defaultMessage='Member Count'\n                    />\n                </div>\n                <div className='group-description group-description-adjusted'>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.group_list.rolesHeader'\n                        defaultMessage='Roles'\n                    />\n                </div>\n                <div className='group-actions'/>\n            </div>\n        </div>\n    );\n};\n\ninterface Props {\n    data?: Partial<Group>[];\n    onPageChangedCallback?: () => void;\n    total: number;\n    emptyListTextId: string;\n    emptyListTextDefaultMessage: string;\n    actions: {\n        getData: () => void;\n    };\n    removeGroup: (gid: string) => void;\n    setNewGroupRole: (gid: string) => void;\n    type: string;\n    channel?: Partial<Channel>;\n}\n\nexport default class GroupList extends React.PureComponent<Props> {\n    renderRow = (item: Group) => {\n        return (\n            <GroupRow\n                key={item.id}\n                group={item}\n                removeGroup={this.props.removeGroup}\n                setNewGroupRole={this.props.setNewGroupRole}\n                type={this.props.type}\n            />\n        );\n    }\n\n    render(): JSX.Element {\n        return (\n            <AbstractList\n                header={<Header/>}\n                renderRow={this.renderRow}\n                {...this.props}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {t} from 'utils/i18n';\n\nimport List from './group_list';\n\nfunction mapStateToProps(state, {groups, totalGroups, isModeSync, onGroupRemoved, setNewGroupRole}) {\n    return {\n        data: groups,\n        removeGroup: onGroupRemoved,\n        setNewGroupRole,\n        emptyListTextId: isModeSync ? t('admin.team_channel_settings.group_list.no-synced-groups') : t('admin.team_channel_settings.group_list.no-groups'),\n        emptyListTextDefaultMessage: isModeSync ? 'At least one group must be specified' : 'No groups specified yet',\n        total: totalGroups,\n    };\n}\n\nfunction mapDispatchToProps() {\n    return {\n        actions: {\n            getData: () => Promise.resolve(),\n        },\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\n\nimport ToggleModalButton from 'components/toggle_modal_button.jsx';\n\nimport AddGroupsToTeamModal from 'components/add_groups_to_team_modal';\n\nimport GroupList from '../../group';\n\nexport const TeamGroups = ({onGroupRemoved, syncChecked, team, onAddCallback, totalGroups, groups, removedGroups, setNewGroupRole}) => (\n    <AdminPanel\n        id='team_groups'\n        titleId={syncChecked ? t('admin.team_settings.team_detail.syncedGroupsTitle') : t('admin.team_settings.team_detail.groupsTitle')}\n        titleDefault={syncChecked ? 'Synced Groups' : 'Groups'}\n        subtitleId={syncChecked ? t('admin.team_settings.team_detail.syncedGroupsDescription') : t('admin.team_settings.team_detail.groupsDescription')}\n        subtitleDefault={syncChecked ? 'Add and remove team members based on their group membership.' : 'Group members will be added to the team.'}\n        button={\n            <ToggleModalButton\n                className='btn btn-primary'\n                dialogType={AddGroupsToTeamModal}\n                dialogProps={{\n                    team,\n                    onAddCallback,\n                    skipCommit: true,\n                    excludeGroups: groups,\n                    includeGroups: removedGroups,\n                }}\n            >\n                <FormattedMessage\n                    id='admin.team_settings.team_details.add_group'\n                    defaultMessage='Add Group'\n                />\n            </ToggleModalButton>}\n    >\n        <GroupList\n            team={team}\n            isModeSync={syncChecked}\n            groups={groups}\n            totalGroups={totalGroups}\n            onGroupRemoved={onGroupRemoved}\n            setNewGroupRole={setNewGroupRole}\n            type='team'\n        />\n    </AdminPanel>);\n\nTeamGroups.propTypes = {\n    syncChecked: PropTypes.bool.isRequired,\n    team: PropTypes.object.isRequired,\n    totalGroups: PropTypes.number.isRequired,\n    groups: PropTypes.arrayOf(PropTypes.object).isRequired,\n    removedGroups: PropTypes.arrayOf(PropTypes.object).isRequired,\n    onAddCallback: PropTypes.func.isRequired,\n    onGroupRemoved: PropTypes.func.isRequired,\n    setNewGroupRole: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {cloneDeep} from 'lodash';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\n\nimport FormError from 'components/form_error';\n\nimport RemoveConfirmModal from '../../remove_confirm_modal';\nimport {NeedDomainsError, NeedGroupsError, UsersWillBeRemovedError} from '../../errors';\n\nimport SaveChangesPanel from '../../save_changes_panel';\n\nimport {TeamProfile} from './team_profile';\nimport {TeamModes} from './team_modes';\nimport {TeamGroups} from './team_groups';\n\nexport default class TeamDetails extends React.Component {\n    static propTypes = {\n        teamID: PropTypes.string.isRequired,\n        team: PropTypes.object.isRequired,\n        totalGroups: PropTypes.number.isRequired,\n        groups: PropTypes.arrayOf(PropTypes.object),\n        allGroups: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            setNavigationBlocked: PropTypes.func.isRequired,\n            getTeam: PropTypes.func.isRequired,\n            linkGroupSyncable: PropTypes.func.isRequired,\n            unlinkGroupSyncable: PropTypes.func.isRequired,\n            membersMinusGroupMembers: PropTypes.func.isRequired,\n            getGroups: PropTypes.func.isRequired,\n            patchTeam: PropTypes.func.isRequired,\n            patchGroupSyncable: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        team: {display_name: '', id: ''},\n    };\n\n    constructor(props) {\n        super(props);\n        const team = props.team;\n        this.state = {\n            groups: props.groups,\n            syncChecked: Boolean(team.group_constrained),\n            allAllowedChecked: team.allow_open_invite,\n            allowedDomainsChecked: Boolean(team.allowed_domains && team.allowed_domains !== ''),\n            allowedDomains: team.allowed_domains || '',\n            saving: false,\n            showRemoveConfirmation: false,\n            usersToRemove: 0,\n            totalGroups: props.totalGroups,\n            saveNeeded: false,\n            serverError: null,\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const {totalGroups, team} = this.props;\n        if (prevProps.team.id !== team.id || totalGroups !== prevProps.totalGroups) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({\n                totalGroups,\n                syncChecked: Boolean(team.group_constrained),\n                allAllowedChecked: team.allow_open_invite,\n                allowedDomainsChecked: Boolean(team.allowed_domains && team.allowed_domains !== ''),\n                allowedDomains: team.allowed_domains || '',\n            });\n        }\n    }\n\n    componentDidMount() {\n        const {teamID, actions} = this.props;\n        actions.getTeam(teamID).\n            then(() => actions.getGroups(teamID)).\n            then(() => this.setState({groups: this.props.groups}));\n    }\n\n    setNewGroupRole = (gid) => {\n        const groups = cloneDeep(this.state.groups).map((g) => {\n            if (g.id === gid) {\n                g.scheme_admin = !g.scheme_admin;\n            }\n            return g;\n        });\n        this.processGroupsChange(groups);\n    }\n\n    handleSubmit = async () => {\n        this.setState({showRemoveConfirmation: false, saving: true});\n        const {groups, allAllowedChecked, allowedDomainsChecked, allowedDomains, syncChecked} = this.state;\n\n        let serverError = null;\n        let saveNeeded = false;\n\n        const {team, groups: origGroups, teamID, actions} = this.props;\n        if (allowedDomainsChecked && allowedDomains.trim().length === 0) {\n            saveNeeded = true;\n            serverError = <NeedDomainsError/>;\n        } else if (this.state.groups.length === 0 && syncChecked) {\n            serverError = <NeedGroupsError/>;\n            saveNeeded = true;\n        } else {\n            const patchTeamPromise = actions.patchTeam({\n                ...team,\n                group_constrained: syncChecked,\n                allowed_domains: allowedDomainsChecked ? allowedDomains : '',\n                allow_open_invite: allAllowedChecked,\n            });\n            const patchTeamSyncable = groups.\n                filter((g) => {\n                    return origGroups.some((group) => group.id === g.id && group.scheme_admin !== g.scheme_admin);\n                }).\n                map((g) => actions.patchGroupSyncable(g.id, teamID, Groups.SYNCABLE_TYPE_TEAM, {scheme_admin: g.scheme_admin}));\n            const unlink = origGroups.\n                filter((g) => {\n                    return !groups.some((group) => group.id === g.id);\n                }).\n                map((g) => actions.unlinkGroupSyncable(g.id, teamID, Groups.SYNCABLE_TYPE_TEAM));\n            const link = groups.\n                filter((g) => {\n                    return !origGroups.some((group) => group.id === g.id);\n                }).\n                map((g) => actions.linkGroupSyncable(g.id, teamID, Groups.SYNCABLE_TYPE_TEAM, {auto_add: true, scheme_admin: g.scheme_admin}));\n            const result = await Promise.all([patchTeamPromise, ...patchTeamSyncable, ...unlink, ...link]);\n            const resultWithError = result.find((r) => r.error);\n            if (resultWithError) {\n                serverError = <FormError error={resultWithError.error.message}/>;\n            } else {\n                await actions.getGroups(teamID);\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        actions.setNavigationBlocked(saveNeeded);\n    }\n\n    setToggles = (syncChecked, allAllowedChecked, allowedDomainsChecked, allowedDomains) => {\n        this.setState({\n            saveNeeded: true,\n            syncChecked,\n            allAllowedChecked: !syncChecked && allAllowedChecked,\n            allowedDomainsChecked: !syncChecked && allowedDomainsChecked,\n            allowedDomains,\n        }, () => this.processGroupsChange(this.state.groups));\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    async processGroupsChange(groups) {\n        const {teamID, actions} = this.props;\n        actions.setNavigationBlocked(true);\n\n        let serverError = null;\n        let usersToRemove = 0;\n        if (this.state.syncChecked) {\n            try {\n                if (groups.length === 0) {\n                    serverError = <NeedGroupsError warning={true}/>;\n                } else {\n                    const result = await actions.membersMinusGroupMembers(teamID, groups.map((g) => g.id));\n                    usersToRemove = result.data.total_count;\n                    if (usersToRemove > 0) {\n                        serverError = (\n                            <UsersWillBeRemovedError\n                                total={usersToRemove}\n                                users={result.data.users}\n                            />\n                        );\n                    }\n                }\n            } catch (ex) {\n                serverError = ex;\n            }\n        }\n        this.setState({groups, usersToRemove, saveNeeded: true, serverError});\n    }\n\n    handleGroupRemoved = (gid) => {\n        const groups = this.state.groups.filter((g) => g.id !== gid);\n        this.setState({totalGroups: this.state.totalGroups - 1});\n        this.processGroupsChange(groups);\n    }\n\n    handleGroupChange = (groupIDs) => {\n        const groups = [...this.state.groups, ...groupIDs.map((gid) => this.props.allGroups[gid])];\n        this.setState({totalGroups: this.state.totalGroups + groupIDs.length});\n        this.processGroupsChange(groups);\n    }\n\n    hideRemoveUsersModal = () => {\n        this.setState({showRemoveConfirmation: false});\n    }\n    showRemoveUsersModal = () => {\n        if (this.state.usersToRemove > 0) {\n            this.setState({showRemoveConfirmation: true});\n        } else {\n            this.handleSubmit();\n        }\n    }\n\n    render = () => {\n        const {team} = this.props;\n        const {totalGroups, saving, saveNeeded, serverError, groups, allAllowedChecked, allowedDomainsChecked, allowedDomains, syncChecked, showRemoveConfirmation, usersToRemove} = this.state;\n        const missingGroup = (og) => !groups.find((g) => g.id === og.id);\n        const removedGroups = this.props.groups.filter(missingGroup);\n\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/teams'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.team_settings.team_detail.group_configuration'\n                            defaultMessage='Team Configuration'\n                        />\n                    </div>\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <RemoveConfirmModal\n                            amount={usersToRemove}\n                            inChannel={false}\n                            show={showRemoveConfirmation}\n                            onCancel={this.hideRemoveUsersModal}\n                            onConfirm={this.handleSubmit}\n                        />\n                        <TeamProfile\n                            team={team}\n                        />\n\n                        <TeamModes\n                            allAllowedChecked={allAllowedChecked}\n                            allowedDomainsChecked={allowedDomainsChecked}\n                            allowedDomains={allowedDomains}\n                            syncChecked={syncChecked}\n                            onToggle={this.setToggles}\n                        />\n\n                        <TeamGroups\n                            syncChecked={syncChecked}\n                            team={team}\n                            groups={groups}\n                            removedGroups={removedGroups}\n                            totalGroups={totalGroups}\n                            onAddCallback={this.handleGroupChange}\n                            onGroupRemoved={this.handleGroupRemoved}\n                            setNewGroupRole={this.setNewGroupRole}\n                        />\n\n                    </div>\n                </div>\n\n                <SaveChangesPanel\n                    saving={saving}\n                    cancelLink='/admin_console/user_management/teams'\n                    saveNeeded={saveNeeded}\n                    onClick={this.showRemoveUsersModal}\n                    serverError={serverError}\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\n\nimport {getTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {getTeam as fetchTeam, membersMinusGroupMembers, patchTeam} from 'mattermost-redux/actions/teams';\n\nimport {getAllGroups, getGroupsAssociatedToTeam} from 'mattermost-redux/selectors/entities/groups';\n\nimport {\n    getGroupsAssociatedToTeam as fetchAssociatedGroups,\n    linkGroupSyncable,\n    unlinkGroupSyncable,\n    patchGroupSyncable,\n} from 'mattermost-redux/actions/groups';\n\nimport {connect} from 'react-redux';\n\nimport {setNavigationBlocked} from 'actions/admin_actions';\n\nimport TeamDetails from './team_details';\n\nfunction mapStateToProps(state, props) {\n    const teamID = props.match.params.team_id;\n    const team = getTeam(state, teamID);\n    const groups = getGroupsAssociatedToTeam(state, teamID);\n    const allGroups = getAllGroups(state, teamID);\n    const totalGroups = groups.length;\n    return {\n        team,\n        groups,\n        totalGroups,\n        allGroups,\n        teamID,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTeam: fetchTeam,\n            getGroups: fetchAssociatedGroups,\n            patchTeam,\n            linkGroupSyncable,\n            unlinkGroupSyncable,\n            membersMinusGroupMembers,\n            setNavigationBlocked,\n            patchGroupSyncable,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(TeamDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {ChannelWithTeamData} from 'mattermost-redux/types/channels';\nimport {Link} from 'react-router-dom';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport GlobeIcon from 'components/widgets/icons/globe_icon';\nimport LockIcon from 'components/widgets/icons/lock_icon';\n\ninterface Props {\n    channel: ChannelWithTeamData;\n    onRowClick: (id: string) => void;\n}\n\nexport default class ChannelRow extends React.Component<Props> {\n    private handleRowClick = () => {\n        const {channel, onRowClick} = this.props;\n        onRowClick(channel.id);\n    };\n\n    render(): JSX.Element {\n        const {channel} = this.props;\n        return (\n            <div\n                className='group'\n                onClick={this.handleRowClick}\n            >\n                <div className='group-row'>\n                    <span\n                        className='group-name overflow--ellipsis row-content'\n                        data-testid='channel-display-name'\n                    >\n                        {channel.type === Constants.PRIVATE_CHANNEL ? (\n                            <LockIcon className='channel-icon channel-icon__lock'/>\n                        ) : (\n                            <GlobeIcon className='channel-icon channel-icon__globe'/>\n                        )}\n                        {channel.display_name}\n                    </span>\n                    <span className='group-description row-content'>\n                        {channel.team_display_name}\n                    </span>\n                    <span className='group-description adjusted row-content'>\n                        <FormattedMessage\n                            id={`admin.channel_settings.channel_row.managementMethod.${channel.group_constrained ? 'group' : 'manual'}`}\n                            defaultMessage={channel.group_constrained ? 'Group Sync' : 'Manual Invites'}\n                        />\n                    </span>\n                    <span\n                        className='group-actions'\n                        data-testid={`${channel.display_name}edit`}\n                    >\n                        <Link to={`/admin_console/user_management/channels/${channel.id}`} >\n                            <FormattedMessage\n                                id='admin.channel_settings.channel_row.configure'\n                                defaultMessage='Edit'\n                            />\n                        </Link>\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {ChannelWithTeamData} from 'mattermost-redux/types/channels';\nimport {ActionFunc, ActionResult} from 'mattermost-redux/types/actions';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport {Constants} from 'utils/constants';\n\nimport AbstractList, {PAGE_SIZE} from 'components/admin_console/team_channel_settings/abstract_list.jsx';\nimport {browserHistory} from 'utils/browser_history';\n\nimport SearchIcon from 'components/widgets/icons/search_icon';\n\nimport ChannelRow from './channel_row';\n\ninterface ChannelListProps {\n    actions: {\n        searchAllChannels: (term: string, notAssociatedToGroup?: string, excludeDefaultChannels?: boolean, page?: number, perPage?: number) => ActionFunc | ActionResult;\n        getData: (page: number, perPage: number, notAssociatedToGroup? : string, excludeDefaultChannels?: boolean) => ActionFunc | ActionResult | Promise<ChannelWithTeamData[]>;\n    };\n    data?: {id: string; display_name: string}[];\n    total?: number;\n    removeGroup?: () => void;\n    onPageChangedCallback?: () => void;\n    emptyListTextId?: string;\n    emptyListTextDefaultMessage?: string;\n}\n\ninterface ChannelListState {\n    searchString: string;\n    channels: ChannelWithTeamData[];\n    searchTotalCount: number;\n    pageResetKey: number;\n    searchMode: boolean;\n}\n\nexport default class ChannelList extends React.PureComponent<ChannelListProps, ChannelListState> {\n    constructor(props: ChannelListProps) {\n        super(props);\n        this.state = {\n            searchString: '',\n            channels: [],\n            searchTotalCount: 0,\n            pageResetKey: 0,\n            searchMode: false,\n        };\n    }\n\n    searchBar = () => {\n        return (\n            <div className='groups-list--global-actions'>\n                <div className='group-list-search'>\n                    <input\n                        type='text'\n                        placeholder={Utils.localizeMessage('search_bar.search', 'Search')}\n                        onKeyUp={this.handleChannelSearchKeyUp}\n                        onChange={this.searchBarChangeHandler}\n                        value={this.state.searchString}\n                        data-testid='search-input'\n                    />\n                    <SearchIcon\n                        id='searchIcon'\n                        className='search__icon'\n                        aria-hidden='true'\n                    />\n                    <i\n                        className={'fa fa-times-circle group-filter-action ' + (this.state.searchString.length ? '' : 'hidden')}\n                        onClick={this.resetSearch}\n                        data-testid='clear-search'\n                    />\n                </div>\n            </div>\n        );\n    };\n\n    private searchBarChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\n        this.setState({searchString: e.target.value});\n    };\n\n    private handleChannelSearchKeyUp = async (e: React.KeyboardEvent) => {\n        const {key} = e;\n        const {searchString} = this.state;\n        if (key === Constants.KeyCodes.ENTER[0]) {\n            if (searchString.length > 1) {\n                const response = await this.props.actions.searchAllChannels(searchString, '', false, 0, PAGE_SIZE);\n                if ('data' in response) {\n                    this.setState({searchMode: true, channels: response.data.channels, searchTotalCount: response.data.total_count, pageResetKey: Date.now()});\n                }\n            }\n        }\n        if (searchString.length === 0) {\n            this.resetSearch();\n        }\n    };\n    private getDataBySearch = async (page: number, perPage: number, notAssociatedToGroup? : string, excludeDefaultChannels?: boolean): Promise<ChannelWithTeamData[]> => {\n        const response = await this.props.actions.searchAllChannels(this.state.searchString, '', false, page, perPage);\n        const channels = new Array(page * perPage); // Pad the array with empty entries because AbstractList expects to slice the results based on the pagination offset.\n        if ('data' in response) {\n            return channels.concat(response.data.channels);\n        }\n        return [];\n    };\n\n    private resetSearch = () => {\n        this.setState({searchString: '', channels: [], searchMode: false, searchTotalCount: 0, pageResetKey: Date.now()});\n    };\n\n    header() {\n        return (\n            <>\n                {this.searchBar()}\n                <div className='groups-list--header'>\n                    <div className='group-name adjusted'>\n                        <FormattedMessage\n                            id='admin.channel_settings.channel_list.nameHeader'\n                            defaultMessage='Name'\n                        />\n                    </div>\n                    <div className='group-content'>\n                        <div className='group-description'>\n                            <FormattedMessage\n                                id='admin.channel_settings.channel_list.teamHeader'\n                                defaultMessage='Team'\n                            />\n                        </div>\n                        <div className='group-description adjusted'>\n                            <FormattedMessage\n                                id='admin.channel_settings.channel_list.managementHeader'\n                                defaultMessage='Management'\n                            />\n                        </div>\n                        <div className='group-actions'/>\n                    </div>\n                </div>\n            </>\n        );\n    }\n\n    onPageChangedCallback = (pagination: {startCount: number; endCount: number; total: number}, channels: ChannelWithTeamData[]) => {\n        if (this.state.searchMode) {\n            this.setState({channels});\n        }\n    };\n\n    render(): JSX.Element {\n        const absProps = {...this.props};\n        if (this.state.searchMode) {\n            absProps.actions.getData = this.getDataBySearch;\n        }\n        return (\n            <AbstractList\n                header={this.header()}\n                renderRow={this.renderRow}\n                {...absProps}\n                key={this.state.pageResetKey}\n                onPageChangedCallback={this.onPageChangedCallback}\n                data={this.state.searchMode ? this.state.channels : this.props.data}\n                total={this.state.searchMode ? this.state.searchTotalCount : this.props.total}\n            />\n        );\n    }\n\n    private renderRow = (item: ChannelWithTeamData) => {\n        return (\n            <ChannelRow\n                key={item.id}\n                channel={item}\n                onRowClick={this.onChannelClick}\n            />\n        );\n    };\n\n    private onChannelClick = (id: string) => {\n        browserHistory.push(`/admin_console/user_management/channels/${id}`);\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators, Dispatch} from 'redux';\nimport {createSelector} from 'reselect';\n\nimport {getAllChannelsWithCount as getData, searchAllChannels} from 'mattermost-redux/actions/channels';\nimport {getAllChannels} from 'mattermost-redux/selectors/entities/channels';\nimport {GenericAction} from 'mattermost-redux/types/actions';\nimport {GlobalState} from 'mattermost-redux/types/store';\n\nimport {t} from 'utils/i18n';\n\nimport {Constants} from 'utils/constants';\n\nimport List from './channel_list';\n\nconst compareByDisplayName = (a: {display_name: string}, b: {display_name: string}) => a.display_name.localeCompare(b.display_name);\n\nconst getSortedListOfChannels = createSelector(\n    getAllChannels,\n    (teams) => Object.values(teams).\n        filter((c) => (c.type === Constants.OPEN_CHANNEL || c.type === Constants.PRIVATE_CHANNEL) && c.delete_at === 0).\n        sort(compareByDisplayName)\n);\n\nfunction mapStateToProps(state: GlobalState) {\n    return {\n        data: getSortedListOfChannels(state),\n        total: state.entities.channels.totalCount,\n        emptyListTextId: t('admin.channel_settings.channel_list.no_channels_found'),\n        emptyListTextDefaultMessage: 'No channels found',\n    };\n}\n\nfunction mapDispatchToProps(dispatch: Dispatch<GenericAction>) {\n    return {\n        actions: bindActionCreators({\n            getData,\n            searchAllChannels,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\nimport ChannelsList from 'components/admin_console/team_channel_settings/channel/list';\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\n\nexport class ChannelsSettings extends React.Component {\n    static propTypes = {\n        siteName: PropTypes.string.isRequired,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            startCount: 0,\n            endCount: 1,\n            total: 0,\n        };\n    }\n\n    onPageChangedCallback = ({startCount, endCount, total}) => {\n        this.setState({startCount, endCount, total});\n    }\n\n    render = () => {\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header'>\n                    <FormattedMessage\n                        id='admin.channel_settings.groupsPageTitle'\n                        defaultMessage='{siteName} Channels'\n                        values={{siteName: this.props.siteName}}\n                    />\n                </div>\n\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <AdminPanel\n                            id='channels'\n                            titleId={t('admin.channel_settings.title')}\n                            titleDefault='Channels'\n                            subtitleId={t('admin.channel_settings.description')}\n                            subtitleDefault={'Manage channel settings.'}\n                            subtitleValues={{...this.state}}\n                        >\n                            <ChannelsList onPageChangedCallback={this.onPageChangedCallback}/>\n                        </AdminPanel>\n                    </div>\n                </div>\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\nimport {connect} from 'react-redux';\n\nimport {ChannelsSettings} from './channel_settings';\n\nfunction mapStateToProps(state) {\n    const config = getConfig(state);\n    const siteName = config.SiteName;\n\n    return {\n        siteName,\n    };\n}\n\nexport default connect(mapStateToProps)(ChannelsSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nexport default class ConvertConfirmModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /*\n         * Channel display name\n         */\n        displayName: PropTypes.string.isRequired,\n\n        /*\n         * Channel privacy setting\n         */\n        toPublic: PropTypes.bool.isRequired,\n    }\n\n    render() {\n        const {displayName, toPublic} = this.props;\n\n        const toPublicMsg = 'When you convert **{displayName}** to a public channel, history and membership are preserved. Public channels are discoverable and can by joined by users on the system without invitation.  \\n \\nAre you sure you want to convert **{displayName}** to a public channel?';\n        const toPrivateMsg = 'When you convert **{displayName}** to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.  \\n \\nAre you sure you want to convert **{displayName}** to a private channel?';\n        const messageId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicMessage') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateMessage');\n\n        const toPublicTitle = 'Convert {displayName} to a public channel?';\n        const toPrivateTitle = 'Convert {displayName} to a private channel?';\n        const titleId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicTitle') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateTitle');\n\n        const toPublicConfirmMsg = 'Yes, convert to public channel';\n        const toPrivateConfirmMsg = 'Yes, convert to private channel';\n        const confirmMsgId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicConfirm') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateConfirm');\n\n        const title = (\n            <FormattedMessage\n                id={titleId}\n                defaultMessage={toPublic ? toPublicTitle : toPrivateTitle}\n                values={{displayName}}\n            />\n        );\n\n        const message = (\n            <FormattedMarkdownMessage\n                id={messageId}\n                defaultMessage={toPublic ? toPublicMsg : toPrivateMsg}\n                values={{displayName}}\n            />\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id={confirmMsgId}\n                defaultMessage={toPublic ? toPublicConfirmMsg : toPrivateConfirmMsg}\n            />\n        );\n\n        const cancelButton = (\n            <FormattedMessage\n                id='admin.team_channel_settings.convertConfirmModal.cancel'\n                defaultMessage='No, cancel'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={'btn btn-primary'}\n                confirmButtonText={confirmButton}\n                cancelButtonClass={'bnt bnt-link'}\n                cancelButtonText={cancelButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n.jsx';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nexport default class ConvertAndRemoveConfirmModal extends React.PureComponent {\n    static propTypes = {\n\n        /*\n         * Bool whether the modal is shown\n         */\n        show: PropTypes.bool.isRequired,\n\n        /*\n         * Action to call on confirm\n         */\n        onConfirm: PropTypes.func.isRequired,\n\n        /*\n         * Action to call on cancel\n         */\n        onCancel: PropTypes.func.isRequired,\n\n        /*\n         * Channel display name\n         */\n        displayName: PropTypes.string.isRequired,\n\n        /*\n         * Channel privacy setting\n         */\n        toPublic: PropTypes.bool.isRequired,\n\n        /*\n         * Number of users to be removed\n         */\n        removeAmount: PropTypes.number.isRequired,\n    }\n\n    render() {\n        const {show, onConfirm, onCancel, displayName, toPublic, removeAmount} = this.props;\n\n        const toPublicMsg = 'When you convert **{displayName}** to a public channel, history and membership are preserved. Public channels are discoverable and can by joined by users on the system without invitation.  \\n \\nAre you sure you want to convert **{displayName}** to a public channel?';\n        const toPrivateMsg = 'When you convert **{displayName}** to a private channel, history and membership are preserved. Publicly shared files remain accessible to anyone with the link. Membership in a private channel is by invitation only.  \\n \\nAre you sure you want to convert **{displayName}** to a private channel?';\n        const convertMessageId = toPublic ? t('admin.team_channel_settings.convertConfirmModal.toPublicMessage') :\n            t('admin.team_channel_settings.convertConfirmModal.toPrivateMessage');\n\n        const toPublicTitle = 'Convert channel to public and remove {amount, number} {amount, plural, one {user} other {users}}?';\n        const toPrivateTitle = 'Convert channel to private and remove {amount, number} {amount, plural, one {user} other {users}}?';\n        const titleId = toPublic ? t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPublicTitle') :\n            t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPrivateTitle');\n\n        const toPublicConfirmMsg = 'Yes, convert channel to public and remove {amount, number} {amount, plural, one {user} other {users}}';\n        const toPrivateConfirmMsg = 'Yes, convert channel to private and remove {amount, number} {amount, plural, one {user} other {users}}';\n        const confirmMsgId = toPublic ? t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPublicConfirm') :\n            t('admin.team_channel_settings.convertAndRemoveConfirmModal.toPrivateConfirm');\n\n        const title = (\n            <FormattedMessage\n                id={titleId}\n                defaultMessage={toPublic ? toPublicTitle : toPrivateTitle}\n                values={{displayName, amount: removeAmount}}\n            />\n        );\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMarkdownMessage\n                        id={convertMessageId}\n                        defaultMessage={toPublic ? toPublicMsg : toPrivateMsg}\n                        values={{displayName}}\n                    />\n                </p>\n                <p>\n                    <FormattedMessage\n                        id='admin.team_channel_settings.removeConfirmModal.messageChannel'\n                        defaultMessage='{amount, number} {amount, plural, one {user} other {users}} will be removed. They are not in groups linked to this channel. Are you sure you wish to remove these users?'\n                        values={{amount: removeAmount}}\n                    />\n                </p>\n            </div>\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id={confirmMsgId}\n                defaultMessage={toPublic ? toPublicConfirmMsg : toPrivateConfirmMsg}\n                values={{amount: removeAmount}}\n            />\n        );\n\n        const cancelButton = (\n            <FormattedMessage\n                id='admin.team_channel_settings.convertAndRemoveConfirmModal.cancel'\n                defaultMessage='No, cancel'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={'btn btn-primary'}\n                confirmButtonText={confirmButton}\n                cancelButtonClass={'bnt bnt-link'}\n                cancelButtonText={cancelButton}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LineSwitch from '../../line_switch';\n\nconst SyncGroupsToggle = ({isSynced, isPublic, isDefault, onToggle}) => (\n    <LineSwitch\n        disabled={isDefault}\n        toggled={isSynced}\n        last={isSynced}\n        onToggle={() => {\n            if (isDefault) {\n                return;\n            }\n            onToggle(!isSynced, isPublic);\n        }}\n        title={(\n            <FormattedMessage\n                id='admin.channel_settings.channel_details.syncGroupMembers'\n                defaultMessage='Sync Group Members'\n            />\n        )}\n        subTitle={(\n            <FormattedMarkdownMessage\n                id='admin.channel_settings.channel_details.syncGroupMembersDescr'\n                defaultMessage='When enabled, adding and removing users from groups will add or remove them from this channel. The only way of inviting members to this channel is by adding the groups they belong to. [Learn More](!https://www.mattermost.com/pl/default-ldap-group-constrained-team-channel.html)'\n            />\n        )}\n    />);\n\nSyncGroupsToggle.propTypes = {\n    isPublic: PropTypes.bool.isRequired,\n    isSynced: PropTypes.bool.isRequired,\n    isDefault: PropTypes.bool.isRequired,\n    onToggle: PropTypes.func.isRequired,\n};\n\nconst AllowAllToggle = ({isSynced, isPublic, isDefault, onToggle}) =>\n    !isSynced && (\n        <LineSwitch\n            disabled={isDefault}\n            toggled={isPublic}\n            last={isPublic}\n            onToggle={() => {\n                if (isDefault) {\n                    return;\n                }\n                onToggle(isSynced, !isPublic);\n            }}\n            title={(\n                <FormattedMessage\n                    id='admin.channel_settings.channel_details.isPublic'\n                    defaultMessage='Public channel or private channel'\n                />\n            )}\n            subTitle={isDefault ? (\n                <FormattedMessage\n                    id='admin.channel_settings.channel_details.isDefaultDescr'\n                    defaultMessage='This default channel cannot be converted into a private channel.'\n                />\n            ) :\n                (\n                    <FormattedMessage\n                        id='admin.channel_settings.channel_details.isPublicDescr'\n                        defaultMessage='If `public` the channel is discoverable and any user can join, or if `private` invitations are required. Toggle to convert public channels to private. When Group Sync is enabled, private channels cannot be converted to public.'\n                    />\n                )\n            }\n            onText={(\n                <FormattedMessage\n                    id='channel_toggle_button.public'\n                    defaultMessage='Public'\n                />\n            )}\n            offText={(\n                <FormattedMessage\n                    id='channel_toggle_button.private'\n                    defaultMessage='Private'\n                />\n            )}\n        />);\n\nAllowAllToggle.propTypes = {\n    isPublic: PropTypes.bool.isRequired,\n    isSynced: PropTypes.bool.isRequired,\n    isDefault: PropTypes.bool.isRequired,\n    onToggle: PropTypes.func.isRequired,\n};\n\nexport const ChannelModes = ({isPublic, isSynced, isDefault, onToggle}) => (\n    <AdminPanel\n        id='channel_manage'\n        titleId={t('admin.channel_settings.channel_detail.manageTitle')}\n        titleDefault='Channel Management'\n        subtitleId={t('admin.channel_settings.channel_detail.manageDescription')}\n        subtitleDefault='Choose between inviting members manually or syncing members automatically from groups.'\n    >\n        <div className='group-teams-and-channels'>\n            <div className='group-teams-and-channels--body'>\n                <SyncGroupsToggle\n                    isPublic={isPublic}\n                    isSynced={isSynced}\n                    isDefault={isDefault}\n                    onToggle={onToggle}\n                />\n                <AllowAllToggle\n                    isPublic={isPublic}\n                    isSynced={isSynced}\n                    isDefault={isDefault}\n                    onToggle={onToggle}\n                />\n            </div>\n        </div>\n    </AdminPanel>);\n\nChannelModes.propTypes = {\n    isPublic: PropTypes.bool.isRequired,\n    isSynced: PropTypes.bool.isRequired,\n    isDefault: PropTypes.bool.isRequired,\n    onToggle: PropTypes.func.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Group} from 'mattermost-redux/types/groups';\nimport {Channel} from 'mattermost-redux/types/channels';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport ToggleModalButton from 'components/toggle_modal_button';\nimport AddGroupsToChannelModal from 'components/add_groups_to_channel_modal';\nimport GroupList from '../../group';\n\ninterface ChannelGroupsProps {\n    synced: boolean;\n    channel: Partial<Channel>;\n    onAddCallback: (groupIDs: string[]) => void;\n    totalGroups: number;\n    groups: Partial<Group>[];\n    removedGroups: object[];\n    onGroupRemoved: (gid: string) => void;\n    setNewGroupRole: (gid: string) => void;\n}\n\nexport const ChannelGroups: React.SFC<ChannelGroupsProps> = (props: ChannelGroupsProps): JSX.Element => {\n    const {onGroupRemoved, onAddCallback, totalGroups, groups, removedGroups, channel, synced, setNewGroupRole} = props;\n    return (\n        <AdminPanel\n            id='channel_groups'\n            titleId={synced ? t('admin.channel_settings.channel_detail.syncedGroupsTitle') : t('admin.channel_settings.channel_detail.groupsTitle')}\n            titleDefault={synced ? 'Synced Groups' : 'Groups'}\n            subtitleId={synced ? t('admin.channel_settings.channel_detail.syncedGroupsDescription') : t('admin.channel_settings.channel_detail.groupsDescription')}\n            subtitleDefault={synced ? 'Add and remove channel members based on their group membership.' : 'Select groups to be added to this channel.'}\n            button={\n                <ToggleModalButton\n                    className='btn btn-primary'\n                    dialogType={AddGroupsToChannelModal}\n                    dialogProps={{\n                        channel,\n                        onAddCallback,\n                        skipCommit: true,\n                        includeGroups: removedGroups,\n                        excludeGroups: groups,\n                    }}\n                >\n                    <FormattedMessage\n                        id='admin.channel_settings.channel_details.add_group'\n                        defaultMessage='Add Group'\n                    />\n                </ToggleModalButton>}\n        >\n            {channel.id && (\n                <GroupList\n                    channel={channel}\n                    groups={groups}\n                    totalGroups={totalGroups}\n                    onGroupRemoved={onGroupRemoved}\n                    setNewGroupRole={setNewGroupRole}\n                    isModeSync={synced}\n                    type='channel'\n                />\n            )}\n        </AdminPanel>\n    );\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {t} from 'utils/i18n';\n\nimport AdminPanel from 'components/widgets/admin_console/admin_panel';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nexport const ChannelProfile = ({team, channel}) => (\n    <AdminPanel\n        id='channel_profile'\n        titleId={t('admin.channel_settings.channel_detail.profileTitle')}\n        titleDefault='Channel Profile'\n        subtitleId={t('admin.channel_settings.channel_detail.profileDescription')}\n        subtitleDefault='Summary of the channel, including the channel name.'\n    >\n\n        <div className='group-teams-and-channels'>\n\n            <div className='group-teams-and-channels--body'>\n                <FormattedMarkdownMessage\n                    id='admin.channel_settings.channel_detail.channelName'\n                    defaultMessage='**Name**'\n                />\n                <br/>\n                {channel.display_name}\n                <br/>\n                <FormattedMarkdownMessage\n                    id='admin.channel_settings.channel_detail.channelTeam'\n                    defaultMessage='**Team**'\n                />\n                <br/>\n                {team.display_name}\n            </div>\n        </div>\n\n    </AdminPanel>);\n\nChannelProfile.propTypes = {\n    channel: PropTypes.object.isRequired,\n    team: PropTypes.object.isRequired,\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {cloneDeep} from 'lodash';\n\nimport {Groups} from 'mattermost-redux/constants';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport FormError from 'components/form_error';\nimport Constants from 'utils/constants';\n\nimport {NeedGroupsError, UsersWillBeRemovedError} from '../../errors';\nimport ConvertConfirmModal from '../../convert_confirm_modal';\nimport RemoveConfirmModal from '../../remove_confirm_modal';\nimport ConvertAndRemoveConfirmModal from '../../convert_and_remove_confirm_modal';\nimport SaveChangesPanel from '../../save_changes_panel';\n\nimport {ChannelModes} from './channel_modes';\nimport {ChannelGroups} from './channel_groups';\nimport {ChannelProfile} from './channel_profile';\n\nexport default class ChannelDetails extends React.Component {\n    static propTypes = {\n        channelID: PropTypes.string.isRequired,\n        channel: PropTypes.object.isRequired,\n        team: PropTypes.object.isRequired,\n        groups: PropTypes.arrayOf(PropTypes.object).isRequired,\n        totalGroups: PropTypes.number.isRequired,\n        allGroups: PropTypes.object.isRequired,\n        actions: PropTypes.shape({\n            getGroups: PropTypes.func.isRequired,\n            linkGroupSyncable: PropTypes.func.isRequired,\n            unlinkGroupSyncable: PropTypes.func.isRequired,\n            membersMinusGroupMembers: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n            getChannel: PropTypes.func.isRequired,\n            getTeam: PropTypes.func.isRequired,\n            patchChannel: PropTypes.func.isRequired,\n            updateChannelPrivacy: PropTypes.func.isRequired,\n            patchGroupSyncable: PropTypes.func.isRequired,\n        }).isRequired,\n    };\n\n    static defaultProps = {\n        channel: {display_name: '', id: ''},\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            isSynced: Boolean(props.channel.group_constrained),\n            isPublic: props.channel.type === Constants.OPEN_CHANNEL,\n            isDefault: props.channel.name === Constants.DEFAULT_CHANNEL,\n            isPrivacyChanging: false,\n            saving: false,\n            totalGroups: props.totalGroups,\n            showConvertConfirmModal: false,\n            showRemoveConfirmModal: false,\n            showConvertAndRemoveConfirmModal: false,\n            usersToRemove: 0,\n            groups: props.groups,\n            saveNeeded: false,\n            serverError: null,\n        };\n    }\n\n    componentDidUpdate(prevProps) {\n        const {channel, totalGroups} = this.props;\n        if (channel.id !== prevProps.channel.id || totalGroups !== prevProps.totalGroups) {\n            // eslint-disable-next-line react/no-did-update-set-state\n            this.setState({\n                totalGroups,\n                isSynced: Boolean(channel.group_constrained),\n                isPublic: channel.type === Constants.OPEN_CHANNEL,\n                isDefault: channel.name === Constants.DEFAULT_CHANNEL,\n            });\n        }\n\n        // If we don't have the team and channel on mount, we need to request the team after we load the channel\n        if (!prevProps.team.id && !prevProps.channel.team_id && channel.team_id) {\n            this.props.actions.getTeam(channel.team_id);\n        }\n    }\n\n    async componentDidMount() {\n        const {channelID, channel, team, actions} = this.props;\n        actions.getGroups(channelID).\n            then(() => actions.getChannel(channelID)).\n            then(() => this.setState({groups: this.props.groups}));\n\n        if (!team.id && channel.team_id) {\n            actions.getTeam(channel.team_id);\n        }\n    }\n\n    setToggles = (isSynced, isPublic) => {\n        const {channel} = this.props;\n        const isOriginallyPublic = (channel.type === Constants.OPEN_CHANNEL);\n        this.setState({\n            saveNeeded: true,\n            isSynced,\n            isPublic,\n            isPrivacyChanging: isPublic !== isOriginallyPublic,\n        }, () => this.processGroupsChange(this.state.groups));\n        this.props.actions.setNavigationBlocked(true);\n    }\n\n    async processGroupsChange(groups) {\n        const {actions, channelID} = this.props;\n        actions.setNavigationBlocked(true);\n\n        let serverError = null;\n        let usersToRemove = 0;\n        if (this.state.isSynced) {\n            try {\n                if (groups.length === 0) {\n                    serverError = <NeedGroupsError/>;\n                } else {\n                    const result = await actions.membersMinusGroupMembers(channelID, groups.map((g) => g.id));\n\n                    usersToRemove = result.data.total_count;\n                    if (usersToRemove > 0) {\n                        serverError = (\n                            <UsersWillBeRemovedError\n                                total={usersToRemove}\n                                users={result.data.users}\n                            />\n                        );\n                    }\n                }\n            } catch (ex) {\n                serverError = ex;\n            }\n        }\n        this.setState({groups, usersToRemove, saveNeeded: true, serverError});\n    }\n\n    handleGroupRemoved = (gid) => {\n        const groups = this.state.groups.filter((g) => g.id !== gid);\n        this.setState({totalGroups: this.state.totalGroups - 1});\n\n        this.processGroupsChange(groups);\n    }\n\n    setNewGroupRole = (gid) => {\n        const groups = cloneDeep(this.state.groups).map((g) => {\n            if (g.id === gid) {\n                g.scheme_admin = !g.scheme_admin;\n            }\n            return g;\n        });\n        this.processGroupsChange(groups);\n    }\n\n    handleGroupChange = (groupIDs) => {\n        const groups = [...this.state.groups, ...groupIDs.map((gid) => this.props.allGroups[gid])];\n        this.setState({totalGroups: this.state.totalGroups + groupIDs.length});\n\n        this.processGroupsChange(groups);\n    }\n\n    hideConvertConfirmModal = () => {\n        this.setState({showConvertConfirmModal: false});\n    }\n\n    hideRemoveConfirmModal = () => {\n        this.setState({showRemoveConfirmModal: false});\n    }\n\n    hideConvertAndRemoveConfirmModal = () => {\n        this.setState({showConvertAndRemoveConfirmModal: false});\n    }\n\n    onSave = () => {\n        const {channel} = this.props;\n        const {isSynced, usersToRemove} = this.state;\n        let {isPublic, isPrivacyChanging} = this.state;\n        const isOriginallyPublic = (channel.type === Constants.OPEN_CHANNEL);\n\n        if (isSynced) {\n            isPublic = false;\n            isPrivacyChanging = isOriginallyPublic;\n            this.setState({\n                isPublic,\n                isPrivacyChanging,\n            });\n            if (this.state.groups.length === 0) {\n                return;\n            }\n        }\n\n        if (isPrivacyChanging && usersToRemove > 0) {\n            this.setState({showConvertAndRemoveConfirmModal: true});\n            return;\n        }\n\n        if (isPrivacyChanging && usersToRemove === 0) {\n            this.setState({showConvertConfirmModal: true});\n            return;\n        }\n\n        if (!isPrivacyChanging && usersToRemove > 0) {\n            this.setState({showRemoveConfirmModal: true});\n            return;\n        }\n\n        this.handleSubmit();\n    }\n\n    handleSubmit = async () => {\n        this.setState({showConvertConfirmModal: false, showRemoveConfirmModal: false, showConvertAndRemoveConfirmModal: false, saving: true});\n        const {groups, isSynced, isPublic, isPrivacyChanging} = this.state;\n\n        let serverError = null;\n        let saveNeeded = false;\n\n        const {groups: origGroups, channelID, actions, channel} = this.props;\n        if (this.state.groups.length === 0 && isSynced) {\n            serverError = <NeedGroupsError/>;\n            saveNeeded = true;\n        } else {\n            const promises = [];\n            if (isPrivacyChanging) {\n                const convert = actions.updateChannelPrivacy(channel.id, isPublic ? Constants.OPEN_CHANNEL : Constants.PRIVATE_CHANNEL);\n                promises.push(convert.then((res) => {\n                    if (res && res.error) {\n                        return res;\n                    }\n                    return actions.patchChannel(channel.id, {\n                        ...channel,\n                        group_constrained: isSynced,\n                    });\n                }));\n            } else {\n                promises.push(actions.patchChannel(channel.id, {\n                    ...channel,\n                    group_constrained: isSynced,\n                }));\n            }\n\n            const patchChannelSyncable = groups.\n                filter((g) => {\n                    return origGroups.some((group) => group.id === g.id && group.scheme_admin !== g.scheme_admin);\n                }).\n                map((g) => actions.patchGroupSyncable(g.id, channelID, Groups.SYNCABLE_TYPE_CHANNEL, {scheme_admin: g.scheme_admin}));\n            const unlink = origGroups.\n                filter((g) => {\n                    return !groups.some((group) => group.id === g.id);\n                }).\n                map((g) => actions.unlinkGroupSyncable(g.id, channelID, Groups.SYNCABLE_TYPE_CHANNEL));\n            const link = groups.\n                filter((g) => {\n                    return !origGroups.some((group) => group.id === g.id);\n                }).\n                map((g) => actions.linkGroupSyncable(g.id, channelID, Groups.SYNCABLE_TYPE_CHANNEL, {auto_add: true, scheme_admin: g.scheme_admin}));\n            const result = await Promise.all([...promises, ...patchChannelSyncable, ...unlink, ...link]);\n            const resultWithError = result.find((r) => r.error);\n            if (resultWithError) {\n                serverError = <FormError error={resultWithError.error.message}/>;\n            } else {\n                await actions.getGroups(channelID);\n            }\n        }\n\n        this.setState({serverError, saving: false, saveNeeded});\n        actions.setNavigationBlocked(saveNeeded);\n    }\n\n    render = () => {\n        const {totalGroups, saving, saveNeeded, serverError, isSynced, isPublic, isDefault, groups, showConvertConfirmModal, showRemoveConfirmModal, showConvertAndRemoveConfirmModal, usersToRemove} = this.state;\n        const {channel, team} = this.props;\n        const missingGroup = (og) => !groups.find((g) => g.id === og.id);\n        const removedGroups = this.props.groups.filter(missingGroup);\n\n        return (\n            <div className='wrapper--fixed'>\n                <div className='admin-console__header with-back'>\n                    <div>\n                        <BlockableLink\n                            to='/admin_console/user_management/channels'\n                            className='fa fa-angle-left back'\n                        />\n                        <FormattedMessage\n                            id='admin.channel_settings.channel_detail.channel_configuration'\n                            defaultMessage='Channel Configuration'\n                        />\n                    </div>\n                </div>\n                <div className='admin-console__wrapper'>\n                    <div className='admin-console__content'>\n                        <ChannelProfile\n                            channel={channel}\n                            team={team}\n                        />\n\n                        <ConvertConfirmModal\n                            show={showConvertConfirmModal}\n                            onCancel={this.hideConvertConfirmModal}\n                            onConfirm={this.handleSubmit}\n                            displayName={channel.display_name || ''}\n                            toPublic={isPublic}\n                        />\n\n                        <RemoveConfirmModal\n                            show={showRemoveConfirmModal}\n                            onCancel={this.hideRemoveConfirmModal}\n                            onConfirm={this.handleSubmit}\n                            inChannel={true}\n                            amount={usersToRemove}\n                        />\n\n                        <ConvertAndRemoveConfirmModal\n                            show={showConvertAndRemoveConfirmModal}\n                            onCancel={this.hideConvertAndRemoveConfirmModal}\n                            onConfirm={this.handleSubmit}\n                            displayName={channel.display_name || ''}\n                            toPublic={isPublic}\n                            removeAmount={usersToRemove}\n                        />\n\n                        <ChannelModes\n                            isPublic={isPublic}\n                            isSynced={isSynced}\n                            isDefault={isDefault}\n                            onToggle={this.setToggles}\n                        />\n\n                        <ChannelGroups\n                            synced={isSynced}\n                            channel={channel}\n                            totalGroups={totalGroups}\n                            groups={groups}\n                            removedGroups={removedGroups}\n                            onAddCallback={this.handleGroupChange}\n                            onGroupRemoved={this.handleGroupRemoved}\n                            setNewGroupRole={this.setNewGroupRole}\n                        />\n                    </div>\n                </div>\n\n                <SaveChangesPanel\n                    saving={saving}\n                    saveNeeded={saveNeeded}\n                    onClick={this.onSave}\n                    serverError={serverError}\n                    cancelLink='/admin_console/user_management/channels'\n                />\n            </div>\n        );\n    };\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {bindActionCreators} from 'redux';\n\nimport {getChannel} from 'mattermost-redux/selectors/entities/channels';\nimport {getAllGroups, getGroupsAssociatedToChannel} from 'mattermost-redux/selectors/entities/groups';\nimport {getChannel as fetchChannel, membersMinusGroupMembers, patchChannel, updateChannelPrivacy} from 'mattermost-redux/actions/channels';\nimport {getTeam as fetchTeam} from 'mattermost-redux/actions/teams';\n\nimport {\n    getGroupsAssociatedToChannel as fetchAssociatedGroups,\n    linkGroupSyncable,\n    unlinkGroupSyncable,\n    patchGroupSyncable,\n} from 'mattermost-redux/actions/groups';\n\nimport {connect} from 'react-redux';\n\nimport {getTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {setNavigationBlocked} from 'actions/admin_actions';\n\nimport ChannelDetails from './channel_details';\n\nfunction mapStateToProps(state, props) {\n    const channelID = props.match.params.channel_id;\n    const channel = getChannel(state, channelID) || {};\n    const team = getTeam(state, channel.team_id) || {};\n    const groups = getGroupsAssociatedToChannel(state, channelID);\n    const allGroups = getAllGroups(state, channel.team_id);\n    const totalGroups = groups.length;\n    return {\n        channel,\n        team,\n        allGroups,\n        totalGroups,\n        groups,\n        channelID,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getChannel: fetchChannel,\n            getTeam: fetchTeam,\n            getGroups: fetchAssociatedGroups,\n            linkGroupSyncable,\n            unlinkGroupSyncable,\n            membersMinusGroupMembers,\n            patchChannel,\n            setNavigationBlocked,\n            updateChannelPrivacy,\n            patchGroupSyncable,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ChannelDetails);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport AdminSettings from './admin_settings';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nconst PUSH_NOTIFICATIONS_OFF = 'off';\nconst PUSH_NOTIFICATIONS_MHPNS = 'mhpns';\nconst PUSH_NOTIFICATIONS_MTPNS = 'mtpns';\nconst PUSH_NOTIFICATIONS_CUSTOM = 'custom';\n\nexport default class PushSettings extends AdminSettings {\n    canSave = () => {\n        return this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_MHPNS || this.state.agree;\n    }\n\n    handleAgreeChange = (e) => {\n        this.setState({\n            agree: e.target.checked,\n        });\n    }\n\n    handleDropdownChange = (id, value) => {\n        if (id === 'pushNotificationServerType') {\n            this.setState({\n                agree: false,\n            });\n\n            if (value === PUSH_NOTIFICATIONS_MHPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MHPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_MTPNS) {\n                this.setState({\n                    pushNotificationServer: Constants.MTPNS,\n                });\n            } else if (value === PUSH_NOTIFICATIONS_CUSTOM &&\n                (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS ||\n                this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS)) {\n                this.setState({\n                    pushNotificationServer: '',\n                });\n            }\n        }\n\n        this.handleChange(id, value);\n    }\n\n    getConfigFromState = (config) => {\n        config.EmailSettings.SendPushNotifications = this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_OFF;\n        config.EmailSettings.PushNotificationServer = this.state.pushNotificationServer.trim();\n        config.TeamSettings.MaxNotificationsPerChannel = this.state.maxNotificationsPerChannel;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        let pushNotificationServerType = PUSH_NOTIFICATIONS_CUSTOM;\n        let agree = false;\n        if (!config.EmailSettings.SendPushNotifications) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_OFF;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MHPNS &&\n            this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MHPNS;\n            agree = true;\n        } else if (config.EmailSettings.PushNotificationServer === Constants.MTPNS) {\n            pushNotificationServerType = PUSH_NOTIFICATIONS_MTPNS;\n        }\n\n        let pushNotificationServer = config.EmailSettings.PushNotificationServer;\n        if (pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushNotificationServer = Constants.MTPNS;\n        } else if (pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushNotificationServer = Constants.MHPNS;\n        }\n\n        const maxNotificationsPerChannel = config.TeamSettings.MaxNotificationsPerChannel;\n\n        return {\n            pushNotificationServerType,\n            pushNotificationServer,\n            maxNotificationsPerChannel,\n            agree,\n        };\n    }\n\n    isPushNotificationServerSetByEnv = () => {\n        // Assume that if one of these has been set using an environment variable,\n        // all of them have been set that way\n        return this.isSetByEnv('EmailSettings.SendPushNotifications') ||\n            this.isSetByEnv('EmailSettings.PushNotificationServer');\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.environment.pushNotificationServer'\n                defaultMessage='Push Notification Server'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const pushNotificationServerTypes = [];\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_OFF, text: Utils.localizeMessage('admin.email.pushOff', 'Do not send push notifications')});\n        if (this.props.license.IsLicensed === 'true' && this.props.license.MHPNS === 'true') {\n            pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MHPNS, text: Utils.localizeMessage('admin.email.mhpns', 'Use HPNS connection with uptime SLA to send notifications to iOS and Android apps')});\n        }\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_MTPNS, text: Utils.localizeMessage('admin.email.mtpns', 'Use TPNS connection to send notifications to iOS and Android apps')});\n        pushNotificationServerTypes.push({value: PUSH_NOTIFICATIONS_CUSTOM, text: Utils.localizeMessage('admin.email.selfPush', 'Manually enter Push Notification Service location')});\n\n        let sendHelpText = null;\n        let pushServerHelpText = null;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_OFF) {\n            sendHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.pushOffHelp'\n                    defaultMessage='Please see [documentation on push notifications](!https://about.mattermost.com/default-mobile-push-notifications/) to learn more about setup options.'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mhpnsHelp'\n                    defaultMessage='Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Hosted Push Notification Service](!https://about.mattermost.com/default-hpns/).'\n                />\n            );\n        } else if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MTPNS) {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.mtpnsHelp'\n                    defaultMessage='Download [Mattermost iOS app](!https://about.mattermost.com/mattermost-ios-app/) from iTunes. Download [Mattermost Android app](!https://about.mattermost.com/mattermost-android-app/) from Google Play. Learn more about the [Mattermost Test Push Notification Service](!https://about.mattermost.com/default-tpns/).'\n                />\n            );\n        } else {\n            pushServerHelpText = (\n                <FormattedMarkdownMessage\n                    id='admin.email.easHelp'\n                    defaultMessage='Learn more about compiling and deploying your own mobile apps from an [Enterprise App Store](!https://about.mattermost.com/default-enterprise-app-store).'\n                />\n            );\n        }\n\n        let tosCheckbox;\n        if (this.state.pushNotificationServerType === PUSH_NOTIFICATIONS_MHPNS) {\n            tosCheckbox = (\n                <div className='form-group'>\n                    <div className='col-sm-4'/>\n                    <div className='col-sm-8'>\n                        <input\n                            type='checkbox'\n                            ref='agree'\n                            checked={this.state.agree}\n                            onChange={this.handleAgreeChange}\n                        />\n                        <FormattedMarkdownMessage\n                            id='admin.email.agreeHPNS'\n                            defaultMessage=' I understand and accept the Mattermost Hosted Push Notification Service [Terms of Service](!https://about.mattermost.com/hpns-terms/) and [Privacy Policy](!https://about.mattermost.com/hpns-privacy/).'\n                        />\n                    </div>\n                </div>\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <DropdownSetting\n                    id='pushNotificationServerType'\n                    values={pushNotificationServerTypes}\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushTitle'\n                            defaultMessage='Enable Push Notifications: '\n                        />\n                    }\n                    value={this.state.pushNotificationServerType}\n                    onChange={this.handleDropdownChange}\n                    helpText={sendHelpText}\n                    setByEnv={this.isPushNotificationServerSetByEnv()}\n                />\n                {tosCheckbox}\n                <TextSetting\n                    id='pushNotificationServer'\n                    label={\n                        <FormattedMessage\n                            id='admin.email.pushServerTitle'\n                            defaultMessage='Push Notification Server:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.email.pushServerEx', 'E.g.: \"https://push-test.mattermost.com\"')}\n                    helpText={pushServerHelpText}\n                    value={this.state.pushNotificationServer}\n                    onChange={this.handleChange}\n                    disabled={this.state.pushNotificationServerType !== PUSH_NOTIFICATIONS_CUSTOM}\n                    setByEnv={this.isSetByEnv('EmailSettings.PushNotificationServer')}\n                />\n                <TextSetting\n                    id='maxNotificationsPerChannel'\n                    type='number'\n                    label={\n                        <FormattedMessage\n                            id='admin.team.maxNotificationsPerChannelTitle'\n                            defaultMessage='Max Notifications Per Channel:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.team.maxNotificationsPerChannelExample', 'E.g.: \"1000\"')}\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.team.maxNotificationsPerChannelDescription'\n                            defaultMessage='Maximum total number of users in a channel before users typing messages, @all, @here, and @channel no longer send notifications because of performance.'\n                        />\n                    }\n                    value={this.state.maxNotificationsPerChannel}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('TeamSettings.MaxNotificationsPerChannel')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\n\nimport {JobTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {getSiteURL} from 'utils/url';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\nimport RadioSetting from './radio_setting';\n\nconst exportFormats = {\n    EXPORT_FORMAT_CSV: 'csv',\n    EXPORT_FORMAT_ACTIANCE: 'actiance',\n    EXPORT_FORMAT_GLOBALRELAY: 'globalrelay',\n};\n\nexport default class MessageExportSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.MessageExportSettings.EnableExport = this.state.enableComplianceExport;\n        config.MessageExportSettings.ExportFormat = this.state.exportFormat;\n        config.MessageExportSettings.DailyRunTime = this.state.exportJobStartTime;\n\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            config.MessageExportSettings.GlobalRelaySettings = {\n                CustomerType: this.state.globalRelayCustomerType,\n                SmtpUsername: this.state.globalRelaySmtpUsername,\n                SmtpPassword: this.state.globalRelaySmtpPassword,\n                EmailAddress: this.state.globalRelayEmailAddress,\n\n            };\n        }\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const state = {\n            enableComplianceExport: config.MessageExportSettings.EnableExport,\n            exportFormat: config.MessageExportSettings.ExportFormat,\n            exportJobStartTime: config.MessageExportSettings.DailyRunTime,\n        };\n        if (config.MessageExportSettings.GlobalRelaySettings) {\n            state.globalRelayCustomerType = config.MessageExportSettings.GlobalRelaySettings.CustomerType;\n            state.globalRelaySmtpUsername = config.MessageExportSettings.GlobalRelaySettings.SmtpUsername;\n            state.globalRelaySmtpPassword = config.MessageExportSettings.GlobalRelaySettings.SmtpPassword;\n            state.globalRelayEmailAddress = config.MessageExportSettings.GlobalRelaySettings.EmailAddress;\n        }\n        return state;\n    }\n\n    getJobDetails = (job) => {\n        if (job.data && job.data.messages_exported) {\n            return (\n                <FormattedMessage\n                    id='admin.complianceExport.messagesExportedCount'\n                    defaultMessage='{count} messages exported.'\n                    values={{\n                        count: job.data.messages_exported,\n                    }}\n                />\n            );\n        }\n        return null;\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.complianceExport.title'\n                defaultMessage='Compliance Export (Beta)'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const exportFormatOptions = [\n            {value: exportFormats.EXPORT_FORMAT_ACTIANCE, text: Utils.localizeMessage('admin.complianceExport.exportFormat.actiance', 'Actiance XML')},\n            {value: exportFormats.EXPORT_FORMAT_CSV, text: Utils.localizeMessage('admin.complianceExport.exportFormat.csv', 'CSV')},\n            {value: exportFormats.EXPORT_FORMAT_GLOBALRELAY, text: Utils.localizeMessage('admin.complianceExport.exportFormat.globalrelay', 'GlobalRelay EML')},\n        ];\n\n        // if the export format is globalrelay, the user needs to set some additional parameters\n        let globalRelaySettings;\n        if (this.state.exportFormat === exportFormats.EXPORT_FORMAT_GLOBALRELAY) {\n            const globalRelayCustomerType = (\n                <RadioSetting\n                    id='globalRelayCustomerType'\n                    values={[\n                        {value: 'A9', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a9.description', 'A9/Type 9')},\n                        {value: 'A10', text: Utils.localizeMessage('admin.complianceExport.globalRelayCustomerType.a10.description', 'A10/Type 10')},\n                    ]}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.title'\n                            defaultMessage='Customer Type:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayCustomerType.description'\n                            defaultMessage='The type of GlobalRelay customer account that your organization has.'\n                        />\n                    }\n                    value={this.state.globalRelayCustomerType ? this.state.globalRelayCustomerType : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.CustomerType')}\n                />\n            );\n\n            const globalRelaySmtpUsername = (\n                <TextSetting\n                    id='globalRelaySmtpUsername'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.title'\n                            defaultMessage='SMTP Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpUsername.example', 'E.g.: \"globalRelayUser\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpUsername.description'\n                            defaultMessage='The username that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpUsername ? this.state.globalRelaySmtpUsername : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpUsername')}\n                />\n            );\n\n            const globalRelaySmtpPassword = (\n                <TextSetting\n                    id='globalRelaySmtpPassword'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.title'\n                            defaultMessage='SMTP Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelaySmtpPassword.example', 'E.g.: \"globalRelayPassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelaySmtpPassword.description'\n                            defaultMessage='The password that is used to authenticate against the GlobalRelay SMTP server.'\n                        />\n                    }\n                    value={this.state.globalRelaySmtpPassword ? this.state.globalRelaySmtpPassword : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.SmtpPassword')}\n                />\n            );\n\n            const globalRelayEmail = (\n                <TextSetting\n                    id='globalRelayEmailAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.title'\n                            defaultMessage='Email Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.globalRelayEmailAddress.example', 'E.g.: \"globalrelay@mattermost.com\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.globalRelayEmailAddress.description'\n                            defaultMessage='The email address that your GlobalRelay server monitors for incoming Compliance Exports.'\n                        />\n                    }\n                    value={this.state.globalRelayEmailAddress ? this.state.globalRelayEmailAddress : ''}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.GlobalRelaySettings.EmailAddress')}\n                />\n            );\n\n            globalRelaySettings = (\n                <SettingsGroup id={'globalRelaySettings'} >\n                    {globalRelayCustomerType}\n                    {globalRelaySmtpUsername}\n                    {globalRelaySmtpPassword}\n                    {globalRelayEmail}\n                </SettingsGroup>\n            );\n        }\n\n        const dropdownHelpText = (\n            <FormattedMarkdownMessage\n                id='admin.complianceExport.exportFormat.description'\n                defaultMessage='Format of the compliance export. Corresponds to the system that you want to import the data into.\\n \\nFor Actiance XML, compliance export files are written to the \\\"exports\\\" subdirectory of the configured [Local Storage Directory]({siteURL}/admin_console/environment/file_storage). For Global Relay EML, they are emailed to the configured email address.'\n                values={{siteURL: getSiteURL()}}\n            />\n        );\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableComplianceExport'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.complianceExportTitle'\n                            defaultMessage='Enable Compliance Export:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.service.complianceExportDesc'\n                            defaultMessage='When true, Mattermost will export all messages that were posted in the last 24 hours. The export task is scheduled to run once per day. See [the documentation](!https://about.mattermost.com/default-compliance-export-documentation) to learn more.'\n                        />\n                    }\n                    value={this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableExport')}\n                />\n\n                <TextSetting\n                    id='exportJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportJobStartTime.title'\n                            defaultMessage='Compliance Export Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.complianceExport.exportJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.complianceExport.exportJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled compliance export job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.exportJobStartTime}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DailyRunTime')}\n                />\n\n                <DropdownSetting\n                    id='exportFormat'\n                    values={exportFormatOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.complianceExport.exportFormat.title'\n                            defaultMessage='Export Format:'\n                        />\n                    }\n                    helpText={dropdownHelpText}\n                    value={this.state.exportFormat}\n                    disabled={!this.state.enableComplianceExport}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.ExportFormat')}\n                />\n\n                {globalRelaySettings}\n\n                <JobsTable\n                    jobType={JobTypes.MESSAGE_EXPORT}\n                    disabled={!this.state.enableComplianceExport}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.title'\n                            defaultMessage='Run Compliance Export Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.complianceExport.createJob.help'\n                            defaultMessage='Initiates a Compliance Export job immediately.'\n                        />\n                    }\n                    getExtraInfoText={this.getJobDetails}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport * as Utils from 'utils/utils.jsx';\nimport statusGreen from 'images/status_green.png';\nimport statusYellow from 'images/status_yellow.png';\nimport ReloadIcon from 'components/widgets/icons/fa_reload_icon';\n\nexport default class ClusterTable extends React.Component {\n    static propTypes = {\n        clusterInfos: PropTypes.array.isRequired,\n        reload: PropTypes.func.isRequired,\n    }\n\n    render() {\n        var versionMismatch = (\n            <img\n                alt='version mismatch'\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var configMismatch = (\n            <img\n                alt='config mismatch'\n                className='cluster-status'\n                src={statusGreen}\n            />\n        );\n\n        var version = '';\n        var configHash = '';\n        var singleItem = false;\n\n        if (this.props.clusterInfos.length) {\n            version = this.props.clusterInfos[0].version;\n            configHash = this.props.clusterInfos[0].config_hash;\n            singleItem = this.props.clusterInfos.length === 1;\n        }\n\n        this.props.clusterInfos.map((clusterInfo) => {\n            if (clusterInfo.version !== version) {\n                versionMismatch = (\n                    <img\n                        alt='version mismatch'\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            if (clusterInfo.config_hash !== configHash) {\n                configMismatch = (\n                    <img\n                        alt='config mismatch'\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            }\n\n            return null;\n        });\n\n        var items = this.props.clusterInfos.map((clusterInfo) => {\n            var status = null;\n\n            if (clusterInfo.hostname === '') {\n                clusterInfo.hostname = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.version === '') {\n                clusterInfo.version = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (clusterInfo.config_hash === '') {\n                clusterInfo.config_hash = Utils.localizeMessage('admin.cluster.unknown', 'unknown');\n            }\n\n            if (singleItem) {\n                status = (\n                    <img\n                        alt='Cluster status'\n                        className='cluster-status'\n                        src={statusYellow}\n                    />\n                );\n            } else {\n                status = (\n                    <img\n                        alt='Cluster status'\n                        className='cluster-status'\n                        src={statusGreen}\n                    />\n                );\n            }\n\n            return (\n                <tr key={clusterInfo.ipaddress}>\n                    <td style={style.clusterCell}>{status}</td>\n                    <td style={style.clusterCell}>{clusterInfo.hostname}</td>\n                    <td style={style.clusterCell}>{versionMismatch} {clusterInfo.version}</td>\n                    <td style={style.clusterCell}><div className='config-hash'>{configMismatch} {clusterInfo.config_hash}</div></td>\n                    <td style={style.clusterCell}>{clusterInfo.ipaddress}</td>\n                </tr>\n            );\n        });\n\n        return (\n            <div\n                className='cluster-panel__table'\n                style={style.clusterTable}\n            >\n                <div className='text-right'>\n                    <button\n                        type='submit'\n                        className='btn btn-link'\n                        onClick={this.props.reload}\n                    >\n                        <ReloadIcon/>\n                        <FormattedMessage\n                            id='admin.cluster.status_table.reload'\n                            defaultMessage=' Reload Cluster Status'\n                        />\n                    </button>\n                </div>\n                <table className='table'>\n                    <thead>\n                        <tr>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.status'\n                                    defaultMessage='Status'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.hostname'\n                                    defaultMessage='Hostname'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.version'\n                                    defaultMessage='Version'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.config_hash'\n                                    defaultMessage='Config File MD5'\n                                />\n                            </th>\n                            <th>\n                                <FormattedMessage\n                                    id='admin.cluster.status_table.url'\n                                    defaultMessage='Gossip Address'\n                                />\n                            </th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {items}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n}\n\nconst style = {\n    clusterTable: {margin: 10, marginBottom: 30},\n    clusterCell: {whiteSpace: 'nowrap'},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\n\nimport {getClusterStatus} from 'actions/admin_actions.jsx';\nimport LoadingScreen from '../loading_screen';\n\nimport ClusterTable from './cluster_table.jsx';\n\nexport default class ClusterTableContainer extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.interval = null;\n\n        this.state = {\n            clusterInfos: null,\n        };\n    }\n\n    load = () => {\n        getClusterStatus(\n            (data) => {\n                this.setState({\n                    clusterInfos: data,\n                });\n            },\n            null\n        );\n    }\n\n    componentDidMount() {\n        this.load();\n\n        // reload the cluster status every 15 seconds\n        this.interval = setInterval(this.load, 15000);\n    }\n\n    componentWillUnmount() {\n        if (this.interval) {\n            clearInterval(this.interval);\n        }\n    }\n\n    reload = (e) => {\n        if (e) {\n            e.preventDefault();\n        }\n\n        this.setState({\n            clusterInfos: null,\n        });\n\n        this.load();\n    }\n\n    render() {\n        if (this.state.clusterInfos == null) {\n            return (<LoadingScreen/>);\n        }\n\n        return (\n            <ClusterTable\n                clusterInfos={this.state.clusterInfos}\n                reload={this.reload}\n            />\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedHTMLMessage, FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport * as Utils from 'utils/utils.jsx';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport WarningIcon from 'components/widgets/icons/fa_warning_icon';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport ClusterTableContainer from './cluster_table_container.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class ClusterSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.ClusterSettings.Enable = this.state.Enable;\n        config.ClusterSettings.ClusterName = this.state.ClusterName;\n        config.ClusterSettings.OverrideHostname = this.state.OverrideHostname;\n        config.ClusterSettings.UseIpAddress = this.state.UseIpAddress;\n        config.ClusterSettings.UseExperimentalGossip = this.state.UseExperimentalGossip;\n        config.ClusterSettings.GossipPort = this.parseIntNonZero(this.state.GossipPort, 8074);\n        config.ClusterSettings.StreamingPort = this.parseIntNonZero(this.state.StreamingPort, 8075);\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        const settings = config.ClusterSettings;\n\n        return {\n            Enable: settings.Enable,\n            ClusterName: settings.ClusterName,\n            OverrideHostname: settings.OverrideHostname,\n            UseIpAddress: settings.UseIpAddress,\n            UseExperimentalGossip: settings.UseExperimentalGossip,\n            GossipPort: settings.GossipPort,\n            StreamingPort: settings.StreamingPort,\n            showWarning: false,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.advance.cluster'\n                defaultMessage='High Availability'\n            />\n        );\n    }\n\n    overrideHandleChange = (id, value) => {\n        this.setState({\n            showWarning: true,\n        });\n\n        this.handleChange(id, value);\n    }\n\n    renderSettings = () => {\n        const licenseEnabled = this.props.license.IsLicensed === 'true' && this.props.license.Cluster === 'true';\n        if (!licenseEnabled) {\n            return null;\n        }\n\n        var configLoadedFromCluster = null;\n\n        if (Client4.clusterId) {\n            configLoadedFromCluster = (\n                <div\n                    style={style.configLoadedFromCluster}\n                    className='alert alert-warning'\n                >\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.loadedFrom'\n                        defaultMessage='This configuration file was loaded from Node ID {clusterId}. Please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html) if you are accessing the System Console through a load balancer and experiencing issues.'\n                        values={{\n                            clusterId: Client4.clusterId,\n                        }}\n                    />\n                </div>\n            );\n        }\n\n        var warning = null;\n\n        if (this.state.showWarning) {\n            warning = (\n                <div\n                    style={style.warning}\n                    className='alert alert-warning'\n                >\n                    <WarningIcon/>\n                    <FormattedMarkdownMessage\n                        id='admin.cluster.should_not_change'\n                        defaultMessage='WARNING: These settings may not sync with the other servers in the cluster. High Availability inter-node communication will not start until you modify the config.json to be identical on all servers and restart Mattermost. Please see the [documentation](!http://docs.mattermost.com/deployment/cluster.html) on how to add or remove a server from the cluster. If you are accessing the System Console through a load balancer and experiencing issues, please see the Troubleshooting Guide in our [documentation](!http://docs.mattermost.com/deployment/cluster.html).'\n                    />\n                </div>\n            );\n        }\n\n        var clusterTableContainer = null;\n        if (this.state.Enable) {\n            clusterTableContainer = (<ClusterTableContainer/>);\n        }\n\n        return (\n            <SettingsGroup>\n                {configLoadedFromCluster}\n                {clusterTableContainer}\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.cluster.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                    />\n                </div>\n                {warning}\n                <BooleanSetting\n                    id='Enable'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.enableTitle'\n                            defaultMessage='Enable High Availability Mode:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.cluster.enableDescription'\n                            defaultMessage='When true, Mattermost will run in High Availability mode. Please see [documentation](!http://docs.mattermost.com/deployment/cluster.html) to learn more about configuring High Availability for Mattermost.'\n                        />\n                    }\n                    value={this.state.Enable}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.Enable')}\n                />\n                <TextSetting\n                    id='ClusterName'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterName'\n                            defaultMessage='Cluster Name:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.ClusterNameEx', 'E.g.: \"Production\" or \"Staging\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.ClusterNameDesc'\n                            defaultMessage='The cluster to join by name.  Only nodes with the same cluster name will join together.  This is to support Blue-Green deployments or staging pointing to the same database.'\n                        />\n                    }\n                    value={this.state.ClusterName}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.ClusterName')}\n                />\n                <TextSetting\n                    id='OverrideHostname'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostname'\n                            defaultMessage='Override Hostname:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.OverrideHostnameEx', 'E.g.: \"app-server-01\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.OverrideHostnameDesc'\n                            defaultMessage='The default value of <blank> will attempt to get the Hostname from the OS or use the IP Address.  You can override the hostname of this server with this property.  It is not recommended to override the Hostname unless needed. This property can also be set to a specific IP Address if needed.'\n                        />\n                    }\n                    value={this.state.OverrideHostname}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.OverrideHostname')}\n                />\n                <BooleanSetting\n                    id='UseIpAddress'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseIpAddress'\n                            defaultMessage='Use IP Address:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseIpAddressDesc'\n                            defaultMessage='When true, the cluster will attempt to communicate via IP Address vs using the hostname.'\n                        />\n                    }\n                    value={this.state.UseIpAddress}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseIpAddress')}\n                />\n                <BooleanSetting\n                    id='UseExperimentalGossip'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.UseExperimentalGossip'\n                            defaultMessage='Use Experimental Gossip:'\n                        />\n                    }\n                    helpText={\n                        <FormattedHTMLMessage\n                            id='admin.cluster.UseExperimentalGossipDesc'\n                            defaultMessage='When true, the server will attempt to communicate via the gossip protocol over the gossip port.  When false the server will attempt to communicate over the streaming port. When false the gossip port and protocol are still used to determine cluster health.'\n                        />\n                    }\n                    value={this.state.UseExperimentalGossip}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.UseExperimentalGossip')}\n                />\n                <TextSetting\n                    id='GossipPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPort'\n                            defaultMessage='Gossip Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.GossipPortEx', 'E.g.: \"8074\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.GossipPortDesc'\n                            defaultMessage='The port used for the gossip protocol.  Both UDP and TCP should be allowed on this port.'\n                        />\n                    }\n                    value={this.state.GossipPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.GossipPort')}\n                />\n                <TextSetting\n                    id='StreamingPort'\n                    label={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPort'\n                            defaultMessage='Streaming Port:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.cluster.StreamingPortEx', 'E.g.: \"8075\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.cluster.StreamingPortDesc'\n                            defaultMessage='The port used for streaming data between servers.'\n                        />\n                    }\n                    value={this.state.StreamingPort}\n                    onChange={this.overrideHandleChange}\n                    setByEnv={this.isSetByEnv('ClusterSettings.StreamingPort')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n\nconst style = {\n    configLoadedFromCluster: {marginBottom: 10},\n    warning: {marginBottom: 10},\n};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\nimport PropTypes from 'prop-types';\n\nimport AdminSettings from 'components/admin_console/admin_settings';\n\nimport SettingsGroup from 'components/admin_console/settings_group.jsx';\nimport BooleanSetting from 'components/admin_console/boolean_setting';\nimport TextSetting from 'components/admin_console/text_setting';\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message.jsx';\nimport LoadingScreen from 'components/loading_screen';\n\nimport {Constants} from 'utils/constants';\n\nexport default class CustomTermsOfServiceSettings extends AdminSettings {\n    static propTypes = {\n        actions: PropTypes.shape({\n            getTermsOfService: PropTypes.func.isRequired,\n            createTermsOfService: PropTypes.func.isRequired,\n        }).isRequired,\n        config: PropTypes.object,\n        license: PropTypes.object,\n        setNavigationBlocked: PropTypes.func,\n\n        /*\n        * Action to save config file\n        */\n        updateConfig: PropTypes.func,\n    };\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            termsEnabled: props.config.SupportSettings.CustomTermsOfServiceEnabled,\n            reAcceptancePeriod: props.config.SupportSettings.CustomTermsOfServiceReAcceptancePeriod,\n            loadingTermsText: true,\n            receivedTermsText: '',\n            termsText: '',\n            saveNeeded: false,\n            saving: false,\n            serverError: null,\n            errorTooltip: false,\n        };\n    }\n\n    getStateFromConfig(config) {\n        return {\n            termsEnabled: config.SupportSettings.CustomTermsOfServiceEnabled,\n            reAcceptancePeriod: config.SupportSettings.CustomTermsOfServiceReAcceptancePeriod,\n        };\n    }\n\n    getConfigFromState = (config) => {\n        config.SupportSettings.CustomTermsOfServiceEnabled = this.state.termsEnabled;\n        config.SupportSettings.CustomTermsOfServiceReAcceptancePeriod = this.parseIntNonZero(this.state.reAcceptancePeriod, Constants.DEFAULT_TERMS_OF_SERVICE_RE_ACCEPTANCE_PERIOD);\n\n        return config;\n    }\n\n    componentDidMount() {\n        this.getTermsOfService();\n    }\n\n    doSubmit = async (callback) => {\n        this.setState({\n            saving: true,\n            serverError: null,\n        });\n\n        if (this.state.termsEnabled && (this.state.receivedTermsText !== this.state.termsText || !this.props.config.SupportSettings.CustomTermsOfServiceEnabled)) {\n            const result = await this.props.actions.createTermsOfService(this.state.termsText);\n            if (result.error) {\n                this.handleAPIError(result.error, callback);\n                return;\n            }\n        }\n\n        // clone config so that we aren't modifying data in the stores\n        let config = JSON.parse(JSON.stringify(this.props.config));\n        config = this.getConfigFromState(config);\n\n        const {data, error} = await this.props.updateConfig(config);\n\n        if (data) {\n            this.setState(this.getStateFromConfig(data));\n\n            this.setState({\n                saveNeeded: false,\n                saving: false,\n            });\n\n            this.props.setNavigationBlocked(false);\n\n            if (callback) {\n                callback();\n            }\n\n            if (this.handleSaved) {\n                this.handleSaved(config);\n            }\n        } else if (error) {\n            this.handleAPIError({id: error.server_error_id, ...error}, callback, config);\n        }\n    };\n\n    handleAPIError = (err, callback, config) => {\n        this.setState({\n            saving: false,\n            serverError: err.message,\n            serverErrorId: err.id,\n        });\n\n        if (callback) {\n            callback();\n        }\n\n        if (this.handleSaved && config) {\n            this.handleSaved(config);\n        }\n    };\n\n    getTermsOfService = async () => {\n        this.setState({loadingTermsText: true});\n\n        const res = await this.props.actions.getTermsOfService();\n        if (res.data) {\n            this.setState({\n                termsText: res.data.text,\n                receivedTermsText: res.data.text,\n            });\n        }\n\n        this.setState({loadingTermsText: false});\n    };\n\n    handleTermsTextChange = (id, value) => {\n        this.handleChange('termsText', value);\n    };\n\n    handleTermsEnabledChange = (id, value) => {\n        this.handleChange('termsEnabled', value);\n    };\n\n    handleReAcceptancePeriodChange = (id, value) => {\n        this.handleChange('reAcceptancePeriod', value);\n    };\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.support.termsOfServiceTitle'\n                defaultMessage='Custom Terms of Service (Beta)'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        if (this.state.loadingTermsText) {\n            return <LoadingScreen/>;\n        }\n\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    key={'customTermsOfServiceEnabled'}\n                    id={'SupportSettings.CustomTermsOfServiceEnabled'}\n                    label={\n                        <FormattedMessage\n                            id='admin.support.enableTermsOfServiceTitle'\n                            defaultMessage='Enable Custom Terms of Service'\n                        />\n                    }\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.support.enableTermsOfServiceHelp'\n                            defaultMessage='When true, new users must accept the terms of service before accessing any Mattermost teams on desktop, web or mobile. Existing users must accept them after login or a page refresh.\\n \\nTo update terms of service link displayed in account creation and login pages, go to [Site Configuration > Customization](../site_config/customization).'\n                        />\n                    }\n                    value={this.state.termsEnabled}\n                    disabled={!(this.props.license.IsLicensed && this.props.license.CustomTermsOfService === 'true')}\n                    onChange={this.handleTermsEnabledChange}\n                    setByEnv={this.isSetByEnv('SupportSettings.CustomTermsOfServiceEnabled')}\n                />\n                <TextSetting\n                    key={'customTermsOfServiceText'}\n                    id={'SupportSettings.CustomTermsOfServiceText'}\n                    type={'textarea'}\n                    label={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceTextTitle'\n                            defaultMessage='Custom Terms of Service Text'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceTextHelp'\n                            defaultMessage='Text that will appear in your custom Terms of Service. Supports Markdown-formatted text.'\n                        />\n                    }\n                    disabled={!this.state.termsEnabled}\n                    onChange={this.handleTermsTextChange}\n                    setByEnv={this.isSetByEnv('SupportSettings.CustomTermsOfServiceText')}\n                    value={this.state.termsText}\n                    maxLength={Constants.MAX_TERMS_OF_SERVICE_TEXT_LENGTH}\n                />\n                <TextSetting\n                    key={'customTermsOfServiceReAcceptancePeriod'}\n                    id={'SupportSettings.CustomTermsOfServiceReAcceptancePeriod'}\n                    type={'number'}\n                    label={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceReAcceptanceTitle'\n                            defaultMessage='Re-Acceptance Period:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.support.termsOfServiceReAcceptanceHelp'\n                            defaultMessage='The number of days before Terms of Service acceptance expires, and the terms must be re-accepted.'\n                        />\n                    }\n                    disabled={!this.state.termsEnabled}\n                    value={this.state.reAcceptancePeriod}\n                    onChange={this.handleReAcceptancePeriodChange}\n                    setByEnv={this.isSetByEnv('SupportSettings.CustomTermsOfServiceReAcceptancePeriod')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getTermsOfService, createTermsOfService} from 'mattermost-redux/actions/users';\n\nimport CustomTermsOfServiceSettings from './custom_terms_of_service_settings.jsx';\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getTermsOfService,\n            createTermsOfService,\n        }, dispatch),\n    };\n}\n\nexport default connect(null, mapDispatchToProps)(CustomTermsOfServiceSettings);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nconst SECTION_NONE = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNone'\n                defaultMessage='None'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityNoneDescription'\n                defaultMessage='Mattermost will connect over an insecure connection.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_TLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTls'\n                defaultMessage='TLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityTlsDescription'\n                defaultMessage='Encrypts the communication between Mattermost and your server.'\n            />\n        </td>\n    </tr>\n);\n\nconst SECTION_STARTTLS = (\n    <tr>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStart'\n                defaultMessage='STARTTLS'\n            />\n        </td>\n        <td>\n            <FormattedMessage\n                id='admin.connectionSecurityStartDescription'\n                defaultMessage='Takes an existing insecure connection and attempts to upgrade it to a secure connection using TLS.'\n            />\n        </td>\n    </tr>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_EMAIL = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_LDAP = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n            {SECTION_STARTTLS}\n        </tbody>\n    </table>\n);\n\nexport const CONNECTION_SECURITY_HELP_TEXT_WEBSERVER = (\n    <table\n        className='table table-bordered table-margin--none'\n        cellPadding='5'\n    >\n        <tbody>\n            {SECTION_NONE}\n            {SECTION_TLS}\n        </tbody>\n    </table>\n);\n\nexport const WEBSERVER_MODE_HELP_TEXT = (\n    <div>\n        <table\n            className='table table-bordered table-margin--none'\n            cellPadding='5'\n        >\n            <tbody>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzip'\n                            defaultMessage='gzip'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeGzipDescription'\n                            defaultMessage='The Mattermost server will serve static files compressed with gzip.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressed'\n                            defaultMessage='Uncompressed'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeUncompressedDescription'\n                            defaultMessage='The Mattermost server will serve static files uncompressed.'\n                        />\n                    </td>\n                </tr>\n                <tr>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabled'\n                            defaultMessage='Disabled'\n                        />\n                    </td>\n                    <td>\n                        <FormattedMessage\n                            id='admin.webserverModeDisabledDescription'\n                            defaultMessage='The Mattermost server will not serve static files.'\n                        />\n                    </td>\n                </tr>\n            </tbody>\n        </table>\n        <p className='help-text'>\n            <FormattedMessage\n                id='admin.webserverModeHelpText'\n                defaultMessage='gzip compression applies to static content files. It is recommended to enable gzip to improve performance unless your environment has specific restrictions, such as a web proxy that distributes gzip files poorly.'\n            />\n        </p>\n    </div>\n);\n\nexport const LOG_LEVEL_OPTIONS = [\n    {\n        value: 'DEBUG',\n        display_name: 'DEBUG',\n        display_name_default: 'DEBUG',\n    },\n    {\n        value: 'INFO',\n        display_name: 'INFO',\n        display_name_default: 'INFO',\n    },\n    {\n        value: 'ERROR',\n        display_name: 'ERROR',\n        display_name_default: 'ERROR',\n    },\n];\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {Constants} from 'utils/constants';\nimport {getSiteURL} from 'utils/url';\nimport {t} from 'utils/i18n';\nimport {\n    ldapTest, invalidateAllCaches, reloadConfig, testS3Connection,\n    removeIdpSamlCertificate, uploadIdpSamlCertificate,\n    removePrivateSamlCertificate, uploadPrivateSamlCertificate,\n    removePublicSamlCertificate, uploadPublicSamlCertificate,\n    invalidateAllEmailInvites, testSmtp, testSiteURL, getSamlMetadataFromIdp, setSamlIdpCertificateFromMetadata\n} from 'actions/admin_actions';\nimport SystemAnalytics from 'components/analytics/system_analytics';\nimport TeamAnalytics from 'components/analytics/team_analytics';\nimport PluginManagement from 'components/admin_console/plugin_management';\nimport CustomPluginSettings from 'components/admin_console/custom_plugin_settings';\n\nimport {trackEvent} from 'actions/diagnostics_actions.jsx';\n\nimport Audits from './audits';\nimport CustomUrlSchemesSetting from './custom_url_schemes_setting.jsx';\nimport CustomEnableDisableGuestAccountsSetting from './custom_enable_disable_guest_accounts_setting';\nimport LicenseSettings from './license_settings';\nimport PermissionSchemesSettings from './permission_schemes_settings';\nimport PermissionSystemSchemeSettings from './permission_schemes_settings/permission_system_scheme_settings';\nimport PermissionTeamSchemeSettings from './permission_schemes_settings/permission_team_scheme_settings';\nimport SystemUsers from './system_users';\nimport SystemUserDetail from './system_user_detail';\nimport ServerLogs from './server_logs';\nimport BrandImageSetting from './brand_image_setting/brand_image_setting.jsx';\nimport GroupSettings from './group_settings/group_settings.jsx';\nimport GroupDetails from './group_settings/group_details';\nimport TeamSettings from './team_channel_settings/team';\nimport TeamDetails from './team_channel_settings/team/details';\nimport ChannelSettings from './team_channel_settings/channel';\nimport ChannelDetails from './team_channel_settings/channel/details';\nimport PasswordSettings from './password_settings.jsx';\nimport PushNotificationsSettings from './push_settings.jsx';\nimport DataRetentionSettings from './data_retention_settings.jsx';\nimport MessageExportSettings from './message_export_settings.jsx';\nimport DatabaseSettings from './database_settings.jsx';\nimport ElasticSearchSettings from './elasticsearch_settings.jsx';\nimport ClusterSettings from './cluster_settings.jsx';\nimport CustomTermsOfServiceSettings from './custom_terms_of_service_settings';\n\nimport * as DefinitionConstants from './admin_definition_constants';\n\nconst FILE_STORAGE_DRIVER_LOCAL = 'local';\nconst FILE_STORAGE_DRIVER_S3 = 'amazons3';\nconst MEBIBYTE = Math.pow(1024, 2);\nconst MINIMUM_IDLE_TIMEOUT = 5;\n\nconst SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA1 = 'RSAwithSHA1';\nconst SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA256 = 'RSAwithSHA256';\nconst SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA512 = 'RSAwithSHA512';\n\nconst SAML_SETTINGS_CANONICAL_ALGORITHM_C14N = 'Canonical1.0';\nconst SAML_SETTINGS_CANONICAL_ALGORITHM_C14N11 = 'Canonical1.1';\n\n// admin_definitions data structure define the autogenerated admin_console\n// section. It defines the structure of the menu based on sections, subsections\n// and pages. Each page contains an schema which defines a component to use for\n// render the entire section or the name of the section (name and\n// name_default), the section in the config file (id), and a list of options to\n// configure (settings).\n//\n// All text fiels contains a transation key, and the <field>_default string are the\n// default text when the translation is still not avaiable (the english version\n// of the text).\n//\n// We can define different types of settings configuration widgets:\n//\n// Widget:\n//   - type: which define the widget type.\n//   - label (and label_default): which define the main text of the setting.\n//   - isDisabled: a function which receive current config, the state of the page and the license.\n//   - isHidden: a function which receive current config, the state of the page and the license.\n//\n// Custom Widget (extends from Widget):\n//   - component: The component used to render the widget\n//\n// JobsTable Widget (extends from Widget):\n//   - job_type: The kind of job from Constants.JobTypes\n//   - render_job: Function to convert a job object into a react component.\n//\n// Banner Widget (extends from Widget):\n//   - banner_type: The type of banner (options: info or warning)\n//\n// Setting Widget (extends from Widget):\n//   - key: The key to store the configuration in the config file.\n//   - help_text (and help_text_default): Long description of the field.\n//   - help_text_markdown: True if the translation text contains markdown.\n//   - help_text_values: Values to fill the translation (if needed).\n//\n// Bool Widget (extends from Setting Widget)\n//\n// Number Widget (extends from Setting Widget)\n//\n// Color Widget (extends from Setting Widget)\n//\n// Text Widget (extends from Setting Widget)\n//   - placeholder (and placeholder_default): Placeholder text to show in the input.\n//   - dynamic_value: function that generate the value of the field based on the current value, the config, the state and the license.\n//   - default_value: function that generate the default value of the field based on the config, the state and the license.\n//   - max_length: The maximun length allowed\n//\n// Button Widget (extends from Setting Widget)\n//   - action: A redux action to execute on click.\n//   - error_message (and error_message_default): Error to show if action doesn't work.\n//   - success_message (and success_message_default): Success message to show if action doesn't work.\n//\n// Language Widget (extends from Setting Widget)\n//   - multiple: If you can select multiple languages.\n//   - no_result (and no_result_default): Text to show on not results found (only for multiple = true).\n//   - not_present (and not_present_default): Text to show when the default language is not present (only for multiple = true).\n//\n// Dropdown Widget (extends from Setting Widget)\n//   - options: List of options of the dropdown (each options has value, display_name, display_name_default and optionally help_text, help_text_default, help_text_values, help_text_markdown fields).\n//\n// Permissions Flag (extends from Setting Widget)\n//   - permissions_mapping_name: A permission name in the utils/policy_roles_adapter.js file.\n//\n// FileUpload (extends from Setting Widget)\n//   - remove_help_text (and remove_help_text_default):  Long description of the field when a file is uploaded.\n//   - remove_help_text_markdown: True if the translation text contains markdown.\n//   - remove_help_text_values: Values to fill the translation (if needed).\n//   - remove_button_text (and remove_button_text_default): Button text for remove when the file is uploaded.\n//   - removing_text (and removing_text_default): Text shown while the system is removing the file.\n//   - uploading_text (and uploading_text_default): Text shown while the system is uploading the file.\n//   - upload_action: An store action to upload the file.\n//   - remove_action: An store action to remove the file.\n//   - fileType: A list of extensions separated by \",\". E.g. \".jpg,.png,.gif\".\n\nexport const it = {\n    isnt: (func) => (config, state, license, enterpriseReady) => !func(config, state, license, enterpriseReady),\n    both: (...funcs) => (config, state, license) => {\n        for (const func of funcs) {\n            if (!func(config, state, license)) {\n                return false;\n            }\n        }\n        return true;\n    },\n    either: (...funcs) => (config, state, license, enterpriseReady) => {\n        for (const func of funcs) {\n            if (func(config, state, license, enterpriseReady)) {\n                return true;\n            }\n        }\n        return false;\n    },\n    stateMatches: (key, regex) => (config, state) => state[key].match(regex),\n    stateEquals: (key, value) => (config, state) => state[key] === value,\n    stateIsTrue: (key) => (config, state) => Boolean(state[key]),\n    stateIsFalse: (key) => (config, state) => !state[key],\n    configIsTrue: (group, setting) => (config) => Boolean(config[group][setting]),\n    configIsFalse: (group, setting) => (config) => !config[group][setting],\n    enterpriseReady: (config, state, license, enterpriseReady) => enterpriseReady,\n    licensed: (config, state, license) => license.IsLicensed === 'true',\n    licensedForFeature: (feature) => (config, state, license) => license.IsLicensed && license[feature] === 'true',\n};\n\nconst AdminDefinition = {\n    about: {\n        icon: 'fa-info-circle',\n        sectionTitle: t('admin.sidebar.about'),\n        sectionTitleDefault: 'About',\n        license: {\n            url: 'about/license',\n            title: t('admin.sidebar.license'),\n            title_default: 'Edition and License',\n            isHidden: it.either(\n                it.isnt(it.enterpriseReady),\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            ),\n            searchableStrings: [\n                'admin.license.title',\n                'admin.license.uploadDesc',\n                'admin.license.keyRemove',\n                'admin.license.edition',\n                'admin.license.type',\n                'admin.license.key',\n                'Mattermost Enterprise Edition. Unlock enterprise features in this software through the purchase of a subscription from ',\n                'This software is offered under a commercial license.\\n\\nSee ENTERPRISE-EDITION-LICENSE.txt in your root install directory for details. See NOTICE.txt for information about open source software used in this system.',\n            ],\n            schema: {\n                id: 'LicenseSettings',\n                component: LicenseSettings,\n            },\n        },\n    },\n    reporting: {\n        icon: 'fa-bar-chart',\n        sectionTitle: t('admin.sidebar.reporting'),\n        sectionTitleDefault: 'Reporting',\n        system_analytics: {\n            url: 'reporting/system_analytics',\n            title: t('admin.sidebar.siteStatistics'),\n            title_default: 'Site Statistics',\n            searchableStrings: [\n                'analytics.system.title',\n                'analytics.system.totalPosts',\n                'analytics.system.activeUsers',\n                'analytics.system.totalSessions',\n                'analytics.system.totalCommands',\n                'analytics.system.totalIncomingWebhooks',\n                'analytics.system.totalOutgoingWebhooks',\n                'analytics.system.totalWebsockets',\n                'analytics.system.totalMasterDbConnections',\n                'analytics.system.totalReadDbConnections',\n                'analytics.system.postTypes',\n                'analytics.system.channelTypes',\n                'analytics.system.totalUsers',\n                'analytics.system.totalTeams',\n                'analytics.system.totalChannels',\n                'analytics.system.dailyActiveUsers',\n                'analytics.system.monthlyActiveUsers',\n            ],\n            schema: {\n                id: 'SystemAnalytics',\n                component: SystemAnalytics,\n            },\n        },\n        team_statistics: {\n            url: 'reporting/team_statistics',\n            title: t('admin.sidebar.teamStatistics'),\n            title_default: 'Team Statistics',\n            searchableStrings: [\n                ['analytics.team.title', {team: ''}],\n                'analytics.system.info',\n                'analytics.team.totalPosts',\n                'analytics.team.activeUsers',\n                'analytics.team.totalUsers',\n                'analytics.team.publicChannels',\n                'analytics.team.privateGroups',\n                'analytics.team.recentUsers',\n                'analytics.team.newlyCreated',\n            ],\n            schema: {\n                id: 'TeamAnalytics',\n                component: TeamAnalytics,\n            },\n        },\n        server_logs: {\n            url: 'reporting/server_logs',\n            title: t('admin.sidebar.logs'),\n            title_default: 'Server Logs',\n            searchableStrings: [\n                'admin.logs.bannerDesc',\n                'admin.logs.title',\n            ],\n            schema: {\n                id: 'ServerLogs',\n                component: ServerLogs,\n            },\n        },\n    },\n    user_management: {\n        icon: 'fa-users',\n        sectionTitle: t('admin.sidebar.userManagement'),\n        sectionTitleDefault: 'User Management',\n        system_user_detail: {\n            url: 'user_management/user/:user_id',\n            schema: {\n                id: 'SystemUserDetail',\n                component: SystemUserDetail,\n            },\n        },\n        system_users: {\n            url: 'user_management/users',\n            title: t('admin.sidebar.users'),\n            title_default: 'Users',\n            searchableStrings: [\n                ['admin.system_users.title', {siteName: ''}],\n            ],\n            schema: {\n                id: 'SystemUsers',\n                component: SystemUsers,\n            },\n        },\n        group_detail: {\n            url: 'user_management/groups/:group_id',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('LDAPGroups')),\n            ),\n            schema: {\n                id: 'GroupDetail',\n                component: GroupDetails,\n            },\n        },\n        groups: {\n            url: 'user_management/groups',\n            title: t('admin.sidebar.groups'),\n            title_default: 'Groups (Beta)',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('LDAPGroups')),\n            ),\n            schema: {\n                id: 'Groups',\n                component: GroupSettings,\n            },\n        },\n        team_detail: {\n            url: 'user_management/teams/:team_id',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('LDAPGroups')),\n            ),\n            schema: {\n                id: 'TeamDetail',\n                component: TeamDetails,\n            },\n        },\n        teams: {\n            url: 'user_management/teams',\n            title: t('admin.sidebar.teams'),\n            title_default: 'Teams',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('LDAPGroups')),\n            ),\n            schema: {\n                id: 'Teams',\n                component: TeamSettings,\n            },\n        },\n        channel_detail: {\n            url: 'user_management/channels/:channel_id',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('LDAPGroups')),\n            ),\n            schema: {\n                id: 'ChannelDetail',\n                component: ChannelDetails,\n            },\n        },\n        channel: {\n            url: 'user_management/channels',\n            title: t('admin.sidebar.channels'),\n            title_default: 'Channels',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('LDAPGroups')),\n            ),\n            schema: {\n                id: 'Channels',\n                component: ChannelSettings,\n            },\n        },\n        systemScheme: {\n            url: 'user_management/permissions/system_scheme',\n            isHidden: it.isnt(it.licensed),\n            schema: {\n                id: 'PermissionSystemScheme',\n                component: PermissionSystemSchemeSettings,\n            },\n        },\n        teamSchemeDetail: {\n            url: 'user_management/permissions/team_override_scheme/:scheme_id',\n            isHidden: it.either(\n                it.isnt(it.licensed),\n                it.isnt(it.licensedForFeature('CustomPermissionsSchemes'))\n            ),\n            schema: {\n                id: 'PermissionSystemScheme',\n                component: PermissionTeamSchemeSettings,\n            },\n        },\n        teamScheme: {\n            url: 'user_management/permissions/team_override_scheme',\n            isHidden: it.either(\n                it.isnt(it.licensed),\n                it.isnt(it.licensedForFeature('CustomPermissionsSchemes'))\n            ),\n            schema: {\n                id: 'PermissionSystemScheme',\n                component: PermissionTeamSchemeSettings,\n            },\n        },\n        permissions: {\n            url: 'user_management/permissions/',\n            title: t('admin.sidebar.permissions'),\n            title_default: 'Permissions',\n            isHidden: it.isnt(it.licensed),\n            searchableStrings: [\n                'admin.permissions.documentationLinkText',\n                'admin.permissions.teamOverrideSchemesNoSchemes',\n                'admin.permissions.loadMoreSchemes',\n                'admin.permissions.introBanner',\n                'admin.permissions.systemSchemeBannerTitle',\n                'admin.permissions.systemSchemeBannerText',\n                'admin.permissions.systemSchemeBannerButton',\n                'admin.permissions.teamOverrideSchemesTitle',\n                'admin.permissions.teamOverrideSchemesBannerText',\n                'admin.permissions.teamOverrideSchemesNewButton',\n            ],\n            schema: {\n                id: 'PermissionSchemes',\n                component: PermissionSchemesSettings,\n            },\n        },\n    },\n    environment: {\n        icon: 'fa-server',\n        sectionTitle: t('admin.sidebar.environment'),\n        sectionTitleDefault: 'Environment',\n        web_server: {\n            url: 'environment/web_server',\n            title: t('admin.sidebar.webServer'),\n            title_default: 'Web Server',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.environment.webServer'),\n                name_default: 'Web Server',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.rate.noteDescription'),\n                        label_default: 'Changing properties in this section will require a server restart before taking effect.',\n                        banner_type: 'info',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.SiteURL',\n                        label: t('admin.service.siteURL'),\n                        label_default: 'Site URL:',\n                        help_text: t('admin.service.siteURLDescription'),\n                        help_text_default: 'The URL that users will use to access Mattermost. Standard ports, such as 80 and 443, can be omitted, but non-standard ports are required. For example: http://example.com:8065. This setting is required.\\n \\nMattermost may be hosted at a subpath. For example: http://example.com:8065/company/mattermost. A restart is required before the server will work correctly.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.service.siteURLExample'),\n                        placeholder_default: 'E.g.: \"http://example.com:8065\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'TestSiteURL',\n                        action: testSiteURL,\n                        label: t('admin.service.testSiteURL'),\n                        label_default: 'Test Live URL',\n                        loading: t('admin.service.testSiteURLTesting'),\n                        loading_default: 'Testing...',\n                        error_message: t('admin.service.testSiteURLFail'),\n                        error_message_default: 'Test unsuccessful: {error}',\n                        success_message: t('admin.service.testSiteURLSuccess'),\n                        success_message_default: 'Test successful. This is a valid URL.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.ListenAddress',\n                        label: t('admin.service.listenAddress'),\n                        label_default: 'Listen Address:',\n                        placeholder: t('admin.service.listenExample'),\n                        placeholder_default: 'E.g.: \":8065\"',\n                        help_text: t('admin.service.listenDescription'),\n                        help_text_default: 'The address and port to which to bind and listen. Specifying \":8065\" will bind to all network interfaces. Specifying \"127.0.0.1:8065\" will only bind to the network interface having that IP address. If you choose a port of a lower level (called \"system ports\" or \"well-known ports\", in the range of 0-1023), you must have permissions to bind to that port. On Linux you can use: \"sudo setcap cap_net_bind_service=+ep ./bin/mattermost\" to allow Mattermost to bind to well-known ports.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.Forward80To443',\n                        label: t('admin.service.forward80To443'),\n                        label_default: 'Forward port 80 to 443:',\n                        help_text: t('admin.service.forward80To443Description'),\n                        help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.',\n                        disabled_help_text: t('admin.service.forward80To443Description.disabled'),\n                        disabled_help_text_default: 'Forwards all insecure traffic from port 80 to secure port 443. Not recommended when using a proxy server.\\n \\nThis setting cannot be enabled until your server is [listening](#ListenAddress) on port 443.',\n                        disabled_help_text_markdown: true,\n                        isDisabled: it.isnt(it.stateMatches('ServiceSettings.ListenAddress', /:443$/)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ServiceSettings.ConnectionSecurity',\n                        label: t('admin.connectionSecurityTitle'),\n                        label_default: 'Connection Security:',\n                        help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_WEBSERVER,\n                        options: [\n                            {\n                                value: '',\n                                display_name: t('admin.connectionSecurityNone'),\n                                display_name_default: 'None',\n                            },\n                            {\n                                value: 'TLS',\n                                display_name: t('admin.connectionSecurityTls'),\n                                display_name_default: 'TLS (Recommended)',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.TLSCertFile',\n                        label: t('admin.service.tlsCertFile'),\n                        label_default: 'TLS Certificate File:',\n                        help_text: t('admin.service.tlsCertFileDescription'),\n                        help_text_default: 'The certificate file to use.',\n                        isDisabled: it.stateIsTrue('ServiceSettings.UseLetsEncrypt'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.TLSKeyFile',\n                        label: t('admin.service.tlsKeyFile'),\n                        label_default: 'TLS Key File:',\n                        help_text: t('admin.service.tlsKeyFileDescription'),\n                        help_text_default: 'The private key file to use.',\n                        isDisabled: it.stateIsTrue('ServiceSettings.UseLetsEncrypt'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.UseLetsEncrypt',\n                        label: t('admin.service.useLetsEncrypt'),\n                        label_default: 'Use Let\\'s Encrypt:',\n                        help_text: t('admin.service.useLetsEncryptDescription'),\n                        help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.',\n                        disabled_help_text: t('admin.service.useLetsEncryptDescription.disabled'),\n                        disabled_help_text_default: 'Enable the automatic retrieval of certificates from Let\\'s Encrypt. The certificate will be retrieved when a client attempts to connect from a new domain. This will work with multiple domains.\\n \\nThis setting cannot be enabled unless the [Forward port 80 to 443](#Forward80To443) setting is set to true.',\n                        disabled_help_text_markdown: true,\n                        isDisabled: it.stateIsFalse('ServiceSettings.Forward80To443'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.LetsEncryptCertificateCacheFile',\n                        label: t('admin.service.letsEncryptCertificateCacheFile'),\n                        label_default: 'Let\\'s Encrypt Certificate Cache File:',\n                        help_text: t('admin.service.letsEncryptCertificateCacheFileDescription'),\n                        help_text_default: 'Certificates retrieved and other data about the Let\\'s Encrypt service will be stored in this file.',\n                        isDisabled: it.stateIsFalse('ServiceSettings.UseLetsEncrypt'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.ReadTimeout',\n                        label: t('admin.service.readTimeout'),\n                        label_default: 'Read Timeout:',\n                        help_text: t('admin.service.readTimeoutDescription'),\n                        help_text_default: 'Maximum time allowed from when the connection is accepted to when the request body is fully read.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.WriteTimeout',\n                        label: t('admin.service.writeTimeout'),\n                        label_default: 'Write Timeout:',\n                        help_text: t('admin.service.writeTimeoutDescription'),\n                        help_text_default: 'If using HTTP (insecure), this is the maximum time allowed from the end of reading the request headers until the response is written. If using HTTPS, it is the total time from when the connection is accepted until the response is written.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ServiceSettings.WebserverMode',\n                        label: t('admin.webserverModeTitle'),\n                        label_default: 'Webserver Mode:',\n                        help_text: DefinitionConstants.WEBSERVER_MODE_HELP_TEXT,\n                        options: [\n                            {\n                                value: 'gzip',\n                                display_name: t('admin.webserverModeGzip'),\n                                display_name_default: 'gzip',\n                            },\n                            {\n                                value: 'uncompressed',\n                                display_name: t('admin.webserverModeUncompressed'),\n                                display_name_default: 'Uncompressed',\n                            },\n                            {\n                                value: 'disabled',\n                                display_name: t('admin.webserverModeDisabled'),\n                                display_name_default: 'Disabled',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableInsecureOutgoingConnections',\n                        label: t('admin.service.insecureTlsTitle'),\n                        label_default: 'Enable Insecure Outgoing Connections: ',\n                        help_text: t('admin.service.insecureTlsDesc'),\n                        help_text_default: 'When true, any outgoing HTTPS requests will accept unverified, self-signed certificates. For example, outgoing webhooks to a server with a self-signed TLS certificate, using any domain, will be allowed. Note that this makes these connections susceptible to man-in-the-middle attacks.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        action: reloadConfig,\n                        key: 'ReloadConfigButton',\n                        label: t('admin.reload.button'),\n                        label_default: 'Reload Configuration From Disk',\n                        help_text: t('admin.reload.reloadDescription'),\n                        help_text_default: 'Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {featureName} feature to load the new settings while the server is running. The administrator should then use the {recycleDatabaseConnections} feature to recycle the database connections based on the new settings.',\n                        help_text_values: {\n                            featureName: (\n                                <b>\n                                    <FormattedMessage\n                                        id='admin.reload.reloadDescription.featureName'\n                                        defaultMessage='Reload Configuration from Disk'\n                                    />\n                                </b>\n                            ),\n                            recycleDatabaseConnections: (\n                                <a href='../environment/database'>\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.reload.reloadDescription.recycleDatabaseConnections'\n                                            defaultMessage='Environment > Database > Recycle Database Connections'\n                                        />\n                                    </b>\n                                </a>\n                            ),\n                        },\n                        error_message: t('admin.reload.reloadFail'),\n                        error_message_default: 'Reload unsuccessful: {error}',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'PurgeButton',\n                        action: invalidateAllCaches,\n                        label: t('admin.purge.button'),\n                        label_default: 'Purge All Caches',\n                        help_text: t('admin.purge.purgeDescription'),\n                        help_text_default: 'This will purge all the in-memory caches for things like sessions, accounts, channels, etc. Deployments using High Availability will attempt to purge all the servers in the cluster.  Purging the caches may adversely impact performance.',\n                        error_message: t('admin.purge.purgeFail'),\n                        error_message_default: 'Purging unsuccessful: {error}',\n                    },\n                ],\n            },\n        },\n        database: {\n            url: 'environment/database',\n            title: t('admin.sidebar.database'),\n            title_default: 'Database',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            searchableStrings: [\n                'admin.database.title',\n                ['admin.recycle.recycleDescription', {featureName: '', reloadConfiguration: ''}],\n                'admin.recycle.recycleDescription.featureName',\n                'admin.recycle.recycleDescription.reloadConfiguration',\n                'admin.recycle.button',\n                'admin.sql.noteDescription',\n                'admin.sql.driverName',\n                'admin.sql.driverNameDescription',\n                'admin.sql.dataSource',\n                'admin.sql.dataSourceDescription',\n                'admin.sql.maxConnectionsTitle',\n                'admin.sql.maxConnectionsDescription',\n                'admin.sql.maxOpenTitle',\n                'admin.sql.maxOpenDescription',\n                'admin.sql.queryTimeoutTitle',\n                'admin.sql.queryTimeoutDescription',\n                'admin.sql.connMaxLifetimeTitle',\n                'admin.sql.connMaxLifetimeDescription',\n                'admin.sql.traceTitle',\n                'admin.sql.traceDescription',\n            ],\n            schema: {\n                id: 'DatabaseSettings',\n                component: DatabaseSettings,\n            },\n        },\n        elasticsearch: {\n            url: 'environment/elasticsearch',\n            title: t('admin.sidebar.elasticsearch'),\n            title_default: 'Elasticsearch',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('Elasticsearch')),\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin')\n            ),\n            searchableStrings: [\n                'admin.elasticsearch.title',\n                'admin.elasticsearch.enableIndexingTitle',\n                ['admin.elasticsearch.enableIndexingDescription', {documentationLink: ''}],\n                'admin.elasticsearch.enableIndexingDescription.documentationLinkText',\n                'admin.elasticsearch.connectionUrlTitle',\n                ['admin.elasticsearch.connectionUrlDescription', {documentationLink: ''}],\n                'admin.elasticsearch.connectionUrlExample.documentationLinkText',\n                'admin.elasticsearch.skipTLSVerificationTitle',\n                'admin.elasticsearch.skipTLSVerificationDescription',\n                'admin.elasticsearch.usernameTitle',\n                'admin.elasticsearch.usernameDescription',\n                'admin.elasticsearch.passwordTitle',\n                'admin.elasticsearch.passwordDescription',\n                'admin.elasticsearch.sniffTitle',\n                'admin.elasticsearch.sniffDescription',\n                'admin.elasticsearch.testHelpText',\n                'admin.elasticsearch.elasticsearch_test_button',\n                'admin.elasticsearch.bulkIndexingTitle',\n                'admin.elasticsearch.createJob.help',\n                'admin.elasticsearch.purgeIndexesHelpText',\n                'admin.elasticsearch.purgeIndexesButton',\n                'admin.elasticsearch.purgeIndexesButton.label',\n                'admin.elasticsearch.enableSearchingTitle',\n                'admin.elasticsearch.enableSearchingDescription',\n            ],\n            schema: {\n                id: 'ElasticSearchSettings',\n                component: ElasticSearchSettings,\n            },\n        },\n        storage: {\n            url: 'environment/file_storage',\n            title: t('admin.sidebar.fileStorage'),\n            title_default: 'File Storage',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'FileSettings',\n                name: t('admin.environment.fileStorage'),\n                name_default: 'File Storage',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'FileSettings.DriverName',\n                        label: t('admin.image.storeTitle'),\n                        label_default: 'File Storage System:',\n                        help_text: t('admin.image.storeDescription'),\n                        help_text_default: 'Storage system where files and image attachments are saved.\\n \\nSelecting \"Amazon S3\" enables fields to enter your Amazon credentials and bucket details.\\n \\nSelecting \"Local File System\" enables the field to specify a local file directory.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: FILE_STORAGE_DRIVER_LOCAL,\n                                display_name: t('admin.image.storeLocal'),\n                                display_name_default: 'Local File System',\n                            },\n                            {\n                                value: FILE_STORAGE_DRIVER_S3,\n                                display_name: t('admin.image.storeAmazonS3'),\n                                display_name_default: 'Amazon S3',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.Directory',\n                        label: t('admin.image.localTitle'),\n                        label_default: 'Local Storage Directory:',\n                        help_text: t('admin.image.localDescription'),\n                        help_text_default: 'Directory to which files and images are written. If blank, defaults to ./data/.',\n                        placeholder: t('admin.image.localExample'),\n                        placeholder_default: 'E.g.: \"./data/\"',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_LOCAL)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'FileSettings.MaxFileSize',\n                        label: t('admin.image.maxFileSizeTitle'),\n                        label_default: 'Maximum File Size:',\n                        help_text: t('admin.image.maxFileSizeDescription'),\n                        help_text_default: 'Maximum file size for message attachments in megabytes. Caution: Verify server memory can support your setting choice. Large file sizes increase the risk of server crashes and failed uploads due to network interruptions.',\n                        placeholder: t('admin.image.maxFileSizeExample'),\n                        placeholder_default: '50',\n                        onConfigLoad: (configVal) => configVal / MEBIBYTE,\n                        onConfigSave: (displayVal) => displayVal * MEBIBYTE,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3Bucket',\n                        label: t('admin.image.amazonS3BucketTitle'),\n                        label_default: 'Amazon S3 Bucket:',\n                        help_text: t('admin.image.amazonS3BucketDescription'),\n                        help_text_default: 'Name you selected for your S3 bucket in AWS.',\n                        placeholder: t('admin.image.amazonS3BucketExample'),\n                        placeholder_default: 'E.g.: \"mattermost-media\"',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3Region',\n                        label: t('admin.image.amazonS3RegionTitle'),\n                        label_default: 'Amazon S3 Region:',\n                        help_text: t('admin.image.amazonS3RegionDescription'),\n                        help_text_default: 'AWS region you selected when creating your S3 bucket. If no region is set, Mattermost attempts to get the appropriate region from AWS, or sets it to \"us-east-1\" if none found.',\n                        placeholder: t('admin.image.amazonS3RegionExample'),\n                        placeholder_default: 'E.g.: \"us-east-1\"',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3AccessKeyId',\n                        label: t('admin.image.amazonS3IdTitle'),\n                        label_default: 'Amazon S3 Access Key ID:',\n                        help_text: t('admin.image.amazonS3IdDescription'),\n                        help_text_markdown: true,\n                        help_text_default: '(Optional) Only required if you do not want to authenticate to S3 using an [IAM role](!https://about.mattermost.com/default-iam-role). Enter the Access Key ID provided by your Amazon EC2 administrator.',\n                        placeholder: t('admin.image.amazonS3IdExample'),\n                        placeholder_default: 'E.g.: \"AKIADTOVBGERKLCBV\"',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3Endpoint',\n                        label: t('admin.image.amazonS3EndpointTitle'),\n                        label_default: 'Amazon S3 Endpoint:',\n                        help_text: t('admin.image.amazonS3EndpointDescription'),\n                        help_text_default: 'Hostname of your S3 Compatible Storage provider. Defaults to \"s3.amazonaws.com\".',\n                        placeholder: t('admin.image.amazonS3EndpointExample'),\n                        placeholder_default: 'E.g.: \"s3.amazonaws.com\"',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'FileSettings.AmazonS3SecretAccessKey',\n                        label: t('admin.image.amazonS3SecretTitle'),\n                        label_default: 'Amazon S3 Secret Access Key:',\n                        help_text: t('admin.image.amazonS3SecretDescription'),\n                        help_text_default: '(Optional) The secret access key associated with your Amazon S3 Access Key ID.',\n                        placeholder: t('admin.image.amazonS3SecretExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.AmazonS3SSL',\n                        label: t('admin.image.amazonS3SSLTitle'),\n                        label_default: 'Enable Secure Amazon S3 Connections:',\n                        help_text: t('admin.image.amazonS3SSLDescription'),\n                        help_text_default: 'When false, allow insecure connections to Amazon S3. Defaults to secure connections only.',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.AmazonS3SSE',\n                        label: t('admin.image.amazonS3SSETitle'),\n                        label_default: 'Enable Server-Side Encryption for Amazon S3:',\n                        help_text: t('admin.image.amazonS3SSEDescription'),\n                        help_text_markdown: true,\n                        help_text_default: 'When true, encrypt files in Amazon S3 using server-side encryption with Amazon S3-managed keys. See [documentation](!https://about.mattermost.com/default-server-side-encryption) to learn more.',\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.AmazonS3Trace',\n                        label: t('admin.image.amazonS3TraceTitle'),\n                        label_default: 'Enable Amazon S3 Debugging:',\n                        help_text: t('admin.image.amazonS3TraceDescription'),\n                        help_text_default: '(Development Mode) When true, log additional debugging information to the system logs.',\n                        isDisabled: it.isnt(it.stateEquals('FileSettings.DriverName', FILE_STORAGE_DRIVER_S3)),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        action: testS3Connection,\n                        key: 'TestS3Connection',\n                        label: t('admin.s3.connectionS3Test'),\n                        label_default: 'Test Connection',\n                        loading: t('admin.s3.testing'),\n                        loading_default: 'Testing...',\n                        error_message: t('admin.s3.s3Fail'),\n                        error_message_default: 'Connection unsuccessful: {error}',\n                        success_message: t('admin.s3.s3Success'),\n                        success_message_default: 'Connection was successful',\n                    },\n                ],\n            },\n        },\n        image_proxy: {\n            url: 'environment/image_proxy',\n            title: t('admin.sidebar.imageProxy'),\n            title_default: 'Image Proxy',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'ImageProxy',\n                name: t('admin.environment.imageProxy'),\n                name_default: 'Image Proxy',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ImageProxySettings.Enable',\n                        label: t('admin.image.enableProxy'),\n                        label_default: 'Enable Image Proxy:',\n                        help_text: t('admin.image.enableProxyDescription'),\n                        help_text_default: 'When true, enables an image proxy for loading all Markdown images.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ImageProxySettings.ImageProxyType',\n                        label: t('admin.image.proxyType'),\n                        label_default: 'Image Proxy Type:',\n                        help_text: t('admin.image.proxyTypeDescription'),\n                        help_text_default: 'Configure an image proxy to load all Markdown images through a proxy. The image proxy prevents users from making insecure image requests, provides caching for increased performance, and automates image adjustments such as resizing. See [documentation](!https://about.mattermost.com/default-image-proxy-documentation) to learn more.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'atmos/camo',\n                                display_name: t('atmos/camo'),\n                                display_name_default: 'atmos/camo',\n                            },\n                            {\n                                value: 'local',\n                                display_name: t('local'),\n                                display_name_default: 'local',\n                            },\n                        ],\n                        isDisabled: it.stateIsFalse('ImageProxySettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ImageProxySettings.RemoteImageProxyURL',\n                        label: t('admin.image.proxyURL'),\n                        label_default: 'Remote Image Proxy URL:',\n                        help_text: t('admin.image.proxyURLDescription'),\n                        help_text_default: 'URL of your remote image proxy server.',\n                        isDisabled: it.either(\n                            it.stateIsFalse('ImageProxySettings.Enable'),\n                            it.stateEquals('ImageProxySettings.ImageProxyType', 'local'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ImageProxySettings.RemoteImageProxyOptions',\n                        label: t('admin.image.proxyOptions'),\n                        label_default: 'Remote Image Proxy Options:',\n                        help_text: t('admin.image.proxyOptionsDescription'),\n                        help_text_default: 'Additional options such as the URL signing key. Refer to your image proxy documentation to learn more about what options are supported.',\n                        isDisabled: it.either(\n                            it.stateIsFalse('ImageProxySettings.Enable'),\n                            it.stateEquals('ImageProxySettings.ImageProxyType', 'local'),\n                        ),\n                    },\n                ],\n            },\n        },\n        smtp: {\n            url: 'environment/smtp',\n            title: t('admin.sidebar.smtp'),\n            title_default: 'SMTP',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'SMTP',\n                name: t('admin.environment.smtp'),\n                name_default: 'SMTP',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPServer',\n                        label: t('admin.environment.smtp.smtpServer.title'),\n                        label_default: 'SMTP Server:',\n                        placeholder: t('admin.environment.smtp.smtpServer.placeholder'),\n                        placeholder_default: 'Ex: \"smtp.yourcompany.com\", \"email-smtp.us-east-1.amazonaws.com\"',\n                        help_text: t('admin.environment.smtp.smtpServer.description'),\n                        help_text_default: 'Location of SMTP email server.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPPort',\n                        label: t('admin.environment.smtp.smtpPort.title'),\n                        label_default: 'SMTP Server Port:',\n                        placeholder: t('admin.environment.smtp.smtpPort.placeholder'),\n                        placeholder_default: 'Ex: \"25\", \"465\", \"587\"',\n                        help_text: t('admin.environment.smtp.smtpPort.description'),\n                        help_text_default: 'Port of SMTP email server.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSMTPAuth',\n                        label: t('admin.environment.smtp.smtpAuth.title'),\n                        label_default: 'Enable SMTP Authentication:',\n                        help_text: t('admin.environment.smtp.smtpAuth.description'),\n                        help_text_default: 'When true, SMTP Authentication is enabled.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPUsername',\n                        label: t('admin.environment.smtp.smtpUsername.title'),\n                        label_default: 'SMTP Server Username:',\n                        placeholder: t('admin.environment.smtp.smtpUsername.placeholder'),\n                        placeholder_default: 'Ex: \"admin@yourcompany.com\", \"AKIADTOVBGERKLCBV\"',\n                        help_text: t('admin.environment.smtp.smtpUsername.description'),\n                        help_text_default: 'Obtain this credential from administrator setting up your email server.',\n                        isDisabled: it.stateIsFalse('EmailSettings.EnableSMTPAuth'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.SMTPPassword',\n                        label: t('admin.environment.smtp.smtpPassword.title'),\n                        label_default: 'SMTP Server Password:',\n                        placeholder: t('admin.environment.smtp.smtpPassword.placeholder'),\n                        placeholder_default: 'Ex: \"yourpassword\", \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        help_text: t('admin.environment.smtp.smtpPassword.description'),\n                        help_text_default: 'Obtain this credential from administrator setting up your email server.',\n                        isDisabled: it.stateIsFalse('EmailSettings.EnableSMTPAuth'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.ConnectionSecurity',\n                        label: t('admin.environment.smtp.connectionSecurity.title'),\n                        label_default: 'Connection Security:',\n                        help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_EMAIL,\n                        options: [\n                            {\n                                value: '',\n                                display_name: t('admin.environment.smtp.connectionSecurity.option.none'),\n                                display_name_default: 'None',\n                            },\n                            {\n                                value: 'TLS',\n                                display_name: t('admin.environment.smtp.connectionSecurity.option.tls'),\n                                display_name_default: 'TLS (Recommended)',\n                            },\n                            {\n                                value: 'STARTTLS',\n                                display_name: t('admin.environment.smtp.connectionSecurity.option.starttls'),\n                                display_name_default: 'STARTTLS',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        action: testSmtp,\n                        key: 'TestSmtpConnection',\n                        label: t('admin.environment.smtp.connectionSmtpTest'),\n                        label_default: 'Test Connection',\n                        loading: t('admin.environment.smtp.testing'),\n                        loading_default: 'Testing...',\n                        error_message: t('admin.environment.smtp.smtpFail'),\n                        error_message_default: 'Connection unsuccessful: {error}',\n                        success_message: t('admin.environment.smtp.smtpSuccess'),\n                        success_message_default: 'No errors were reported while sending an email. Please check your inbox to make sure.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.SkipServerCertificateVerification',\n                        label: t('admin.environment.smtp.skipServerCertificateVerification.title'),\n                        label_default: 'Skip Server Certificate Verification:',\n                        help_text: t('admin.environment.smtp.skipServerCertificateVerification.description'),\n                        help_text_default: 'When true, Mattermost will not verify the email server certificate.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableSecurityFixAlert',\n                        label: t('admin.environment.smtp.enableSecurityFixAlert.title'),\n                        label_default: 'Enable Security Alerts:',\n                        help_text: t('admin.environment.smtp.enableSecurityFixAlert.description'),\n                        help_text_default: 'When true, System Administrators are notified by email if a relevant security fix alert has been announced in the last 12 hours. Requires email to be enabled.',\n                    },\n                ],\n            },\n        },\n        push_notification_server: {\n            url: 'environment/push_notification_server',\n            title: t('admin.sidebar.pushNotificationServer'),\n            title_default: 'Push Notification Server',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            searchableStrings: [\n                'admin.environment.pushNotificationServer',\n                'admin.email.pushTitle',\n                'admin.email.pushServerTitle',\n                'admin.email.pushContentTitle',\n                'admin.email.pushContentDesc',\n            ],\n            schema: {\n                id: 'PushNotificationsSettings',\n                component: PushNotificationsSettings,\n            },\n        },\n        high_availability: {\n            url: 'environment/high_availability',\n            title: t('admin.sidebar.highAvailability'),\n            title_default: 'High Availability',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('Cluster')),\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin')\n            ),\n            searchableStrings: [\n                'admin.advance.cluster',\n                'admin.cluster.noteDescription',\n                'admin.cluster.enableTitle',\n                'admin.cluster.enableDescription',\n                'admin.cluster.ClusterName',\n                'admin.cluster.ClusterNameDesc',\n                'admin.cluster.OverrideHostname',\n                'admin.cluster.OverrideHostnameDesc',\n                'admin.cluster.UseIpAddress',\n                'admin.cluster.UseIpAddressDesc',\n                'admin.cluster.UseExperimentalGossip',\n                'admin.cluster.UseExperimentalGossipDesc',\n                'admin.cluster.GossipPort',\n                'admin.cluster.GossipPortDesc',\n                'admin.cluster.StreamingPort',\n                'admin.cluster.StreamingPortDesc',\n            ],\n            schema: {\n                id: 'ClusterSettings',\n                component: ClusterSettings,\n            },\n        },\n        rate_limiting: {\n            url: 'environment/rate_limiting',\n            title: t('admin.sidebar.rateLimiting'),\n            title_default: 'Rate Limiting',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.rate.title'),\n                name_default: 'Rate Limiting',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.rate.noteDescription'),\n                        label_default: 'Changing properties other than Site URL in this section will require a server restart before taking effect.',\n                        banner_type: 'info',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'RateLimitSettings.Enable',\n                        label: t('admin.rate.enableLimiterTitle'),\n                        label_default: 'Enable Rate Limiting:',\n                        help_text: t('admin.rate.enableLimiterDescription'),\n                        help_text_default: 'When true, APIs are throttled at rates specified below.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'RateLimitSettings.PerSec',\n                        label: t('admin.rate.queriesTitle'),\n                        label_default: 'Maximum Queries per Second:',\n                        placeholder: t('admin.rate.queriesExample'),\n                        placeholder_default: 'E.g.: \"10\"',\n                        help_text: t('admin.rate.queriesDescription'),\n                        help_text_default: 'Throttles API at this number of requests per second.',\n                        isDisabled: it.stateEquals('RateLimitSettings.Enable', false),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'RateLimitSettings.MaxBurst',\n                        label: t('admin.rate.maxBurst'),\n                        label_default: 'Maximum Burst Size:',\n                        placeholder: t('admin.rate.maxBurstExample'),\n                        placeholder_default: 'E.g.: \"100\"',\n                        help_text: t('admin.rate.maxBurstDescription'),\n                        help_text_default: 'Maximum number of requests allowed beyond the per second query limit.',\n                        isDisabled: it.stateEquals('RateLimitSettings.Enable', false),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'RateLimitSettings.MemoryStoreSize',\n                        label: t('admin.rate.memoryTitle'),\n                        label_default: 'Memory Store Size:',\n                        placeholder: t('admin.rate.memoryExample'),\n                        placeholder_default: 'E.g.: \"10000\"',\n                        help_text: t('admin.rate.memoryDescription'),\n                        help_text_default: 'Maximum number of users sessions connected to the system as determined by \"Vary rate limit by remote address\" and \"Vary rate limit by HTTP header\".',\n                        isDisabled: it.stateEquals('RateLimitSettings.Enable', false),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'RateLimitSettings.VaryByRemoteAddr',\n                        label: t('admin.rate.remoteTitle'),\n                        label_default: 'Vary rate limit by remote address:',\n                        help_text: t('admin.rate.remoteDescription'),\n                        help_text_default: 'When true, rate limit API access by IP address.',\n                        isDisabled: it.stateEquals('RateLimitSettings.Enable', false),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'RateLimitSettings.VaryByUser',\n                        label: t('admin.rate.varyByUser'),\n                        label_default: 'Vary rate limit by user:',\n                        help_text: t('admin.rate.varyByUserDescription'),\n                        help_text_default: 'When true, rate limit API access by user athentication token.',\n                        isDisabled: it.stateEquals('RateLimitSettings.Enable', false),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'RateLimitSettings.VaryByHeader',\n                        label: t('admin.rate.httpHeaderTitle'),\n                        label_default: 'Vary rate limit by HTTP header:',\n                        placeholder: t('admin.rate.httpHeaderExample'),\n                        placeholder_default: 'E.g.: \"X-Real-IP\", \"X-Forwarded-For\"',\n                        help_text: t('admin.rate.httpHeaderDescription'),\n                        help_text_default: 'When filled in, vary rate limiting by HTTP header field specified (e.g. when configuring NGINX set to \"X-Real-IP\", when configuring AmazonELB set to \"X-Forwarded-For\").',\n                        isDisabled: it.either(\n                            it.stateEquals('RateLimitSettings.Enable', false),\n                            it.stateEquals('RateLimitSettings.VaryByRemoteAddr', true),\n                        ),\n                    },\n                ],\n            },\n        },\n        logging: {\n            url: 'environment/logging',\n            title: t('admin.sidebar.logging'),\n            title_default: 'Logging',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'LogSettings',\n                name: t('admin.general.log'),\n                name_default: 'Logging',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableConsole',\n                        label: t('admin.log.consoleTitle'),\n                        label_default: 'Output logs to console: ',\n                        help_text: t('admin.log.consoleDescription'),\n                        help_text_default: 'Typically set to false in production. Developers may set this field to true to output log messages to console based on the console level option.  If true, server writes messages to the standard output stream (stdout). Changing this setting requires a server restart before taking effect.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'LogSettings.ConsoleLevel',\n                        label: t('admin.log.levelTitle'),\n                        label_default: 'Console Log Level:',\n                        help_text: t('admin.log.levelDescription'),\n                        help_text_default: 'This setting determines the level of detail at which log events are written to the console. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                        options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                        isDisabled: it.stateIsFalse('LogSettings.EnableConsole'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.ConsoleJson',\n                        label: t('admin.log.consoleJsonTitle'),\n                        label_default: 'Output console logs as JSON:',\n                        help_text: t('admin.log.jsonDescription'),\n                        help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                        isDisabled: it.stateIsFalse('LogSettings.EnableConsole'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableFile',\n                        label: t('admin.log.fileTitle'),\n                        label_default: 'Output logs to file: ',\n                        help_text: t('admin.log.fileDescription'),\n                        help_text_default: 'Typically set to true in production. When true, logged events are written to the mattermost.log file in the directory specified in the File Log Directory field. The logs are rotated at 10,000 lines and archived to a file in the same directory, and given a name with a datestamp and serial number. For example, mattermost.2017-03-31.001. Changing this setting requires a server restart before taking effect.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'LogSettings.FileLevel',\n                        label: t('admin.log.fileLevelTitle'),\n                        label_default: 'File Log Level:',\n                        help_text: t('admin.log.fileLevelDescription'),\n                        help_text_default: 'This setting determines the level of detail at which log events are written to the log file. ERROR: Outputs only error messages. INFO: Outputs error messages and information around startup and initialization. DEBUG: Prints high detail for developers working on debugging issues.',\n                        options: DefinitionConstants.LOG_LEVEL_OPTIONS,\n                        isDisabled: it.stateIsFalse('LogSettings.EnableFile'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.FileJson',\n                        label: t('admin.log.fileJsonTitle'),\n                        label_default: 'Output file logs as JSON:',\n                        help_text: t('admin.log.jsonDescription'),\n                        help_text_default: 'When true, logged events are written in a machine readable JSON format. Otherwise they are printed as plain text. Changing this setting requires a server restart before taking effect.',\n                        isDisabled: it.stateIsFalse('LogSettings.EnableFile'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LogSettings.FileLocation',\n                        label: t('admin.log.locationTitle'),\n                        label_default: 'File Log Directory:',\n                        help_text: t('admin.log.locationDescription'),\n                        help_text_default: 'The location of the log files. If blank, they are stored in the ./logs directory. The path that you set must exist and Mattermost must have write permissions in it. Changing this setting requires a server restart before taking effect.',\n                        placeholder: t('admin.log.locationPlaceholder'),\n                        placeholder_default: 'Enter your file location',\n                        isDisabled: it.stateIsFalse('LogSettings.EnableFile'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableWebhookDebugging',\n                        label: t('admin.log.enableWebhookDebugging'),\n                        label_default: 'Enable Webhook Debugging:',\n                        help_text: t('admin.log.enableWebhookDebuggingDescription'),\n                        help_text_default: 'When true, sends webhook debug messages to the server logs. To also output the request body of incoming webhooks, set {boldedLogLevel} to \"DEBUG\".',\n                        help_text_values: {\n                            boldedLogLevel: (\n                                <strong>\n                                    <FormattedMessage\n                                        id='admin.log.logLevel'\n                                        defaultMessage='Log Level'\n                                    />\n                                </strong>\n                            ),\n                        },\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LogSettings.EnableDiagnostics',\n                        label: t('admin.log.enableDiagnostics'),\n                        label_default: 'Enable Diagnostics and Error Reporting:',\n                        help_text: t('admin.log.enableDiagnosticsDescription'),\n                        help_text_default: 'Enable this feature to improve the quality and performance of Mattermost by sending error reporting and diagnostic information to Mattermost, Inc. Read our [privacy policy](!https://about.mattermost.com/default-privacy-policy/) to learn more.',\n                        help_text_markdown: true,\n                        onConfigSave: (displayVal, previousVal) => {\n                            if (previousVal && previousVal !== displayVal) {\n                                trackEvent('ui', 'diagnostics_disabled');\n                            }\n                            return displayVal;\n                        },\n                    },\n                ],\n            },\n        },\n        session_lengths: {\n            url: 'environment/session_lengths',\n            title: t('admin.sidebar.sessionLengths'),\n            title_default: 'Session Lengths',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'SessionLengths',\n                name: t('admin.environment.sessionLengths'),\n                name_default: 'Session Lengths',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.SessionLengthWebInDays',\n                        label: t('admin.service.webSessionDays'),\n                        label_default: 'Session Length AD/LDAP and Email (days):',\n                        help_text: t('admin.service.webSessionDaysDesc'),\n                        help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',\n                        placeholder: t('admin.service.sessionDaysEx'),\n                        placeholder_default: 'E.g.: \"30\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.SessionLengthMobileInDays',\n                        label: t('admin.service.mobileSessionDays'),\n                        label_default: 'Session Length Mobile (days):',\n                        help_text: t('admin.service.mobileSessionDaysDesc'),\n                        help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. After changing this setting, the new session length will take effect after the next time the user enters their credentials.',\n                        placeholder: t('admin.service.sessionDaysEx'),\n                        placeholder_default: 'E.g.: \"30\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.SessionLengthSSOInDays',\n                        label: t('admin.service.ssoSessionDays'),\n                        label_default: 'Session Length SSO (days):',\n                        help_text: t('admin.service.ssoSessionDaysDesc'),\n                        help_text_default: 'The number of days from the last time a user entered their credentials to the expiry of the users session. If the authentication method is SAML or GitLab, the user may automatically be logged back in to Mattermost if they are already logged in to SAML or GitLab. After changing this setting, the setting will take effect after the next time the user enters their credentials.',\n                        placeholder: t('admin.service.sessionDaysEx'),\n                        placeholder_default: 'E.g.: \"30\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.SessionCacheInMinutes',\n                        label: t('admin.service.sessionCache'),\n                        label_default: 'Session Cache (minutes):',\n                        help_text: t('admin.service.sessionCacheDesc'),\n                        help_text_default: 'The number of minutes to cache a session in memory.',\n                        placeholder: t('admin.service.sessionDaysEx'),\n                        placeholder_default: 'E.g.: \"30\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.SessionIdleTimeoutInMinutes',\n                        label: t('admin.service.sessionIdleTimeout'),\n                        label_default: 'Session Idle Timeout (minutes):',\n                        help_text: t('admin.service.sessionIdleTimeoutDesc'),\n                        help_text_default: 'The number of minutes from the last time a user was active on the system to the expiry of the user\\'s session. Once expired, the user will need to log in to continue. Minimum is 5 minutes, and 0 is unlimited.\\n \\nApplies to the desktop app and browsers. For mobile apps, use an EMM provider to lock the app when not in use. In High Availability mode, enable IP hash load balancing for reliable timeout measurement.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.service.sessionIdleTimeoutEx'),\n                        placeholder_default: 'E.g.: \"60\"',\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                        onConfigSave: (value) => {\n                            if (value !== 0 && value < MINIMUM_IDLE_TIMEOUT) {\n                                return MINIMUM_IDLE_TIMEOUT;\n                            }\n                            return value;\n                        },\n                    },\n                ],\n            },\n        },\n        metrics: {\n            url: 'environment/performance_monitoring',\n            title: t('admin.sidebar.metrics'),\n            title_default: 'Performance Monitoring',\n            isHidden: it.either(\n                it.isnt(it.licensedForFeature('Metrics')),\n                it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin')\n            ),\n            schema: {\n                id: 'MetricsSettings',\n                name: t('admin.advance.metrics'),\n                name_default: 'Performance Monitoring',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'MetricsSettings.Enable',\n                        label: t('admin.metrics.enableTitle'),\n                        label_default: 'Enable Performance Monitoring:',\n                        help_text: t('admin.metrics.enableDescription'),\n                        help_text_default: 'When true, Mattermost will enable performance monitoring collection and profiling. Please see [documentation](!http://docs.mattermost.com/deployment/metrics.html) to learn more about configuring performance monitoring for Mattermost.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'MetricsSettings.ListenAddress',\n                        label: t('admin.metrics.listenAddressTitle'),\n                        label_default: 'Listen Address:',\n                        placeholder: t('admin.metrics.listenAddressEx'),\n                        placeholder_default: 'E.g.: \":8067\"',\n                        help_text: t('admin.metrics.listenAddressDesc'),\n                        help_text_default: 'The address the server will listen on to expose performance metrics.',\n                    },\n                ],\n            },\n        },\n        developer: {\n            url: 'environment/developer',\n            title: t('admin.sidebar.developer'),\n            title_default: 'Developer',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.developer.title'),\n                name_default: 'Developer Settings',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableTesting',\n                        label: t('admin.service.testingTitle'),\n                        label_default: 'Enable Testing Commands:',\n                        help_text: t('admin.service.testingDescription'),\n                        help_text_default: 'When true, /test slash command is enabled to load test accounts, data and text formatting. Changing this requires a server restart before taking effect.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableDeveloper',\n                        label: t('admin.service.developerTitle'),\n                        label_default: 'Enable Developer Mode: ',\n                        help_text: t('admin.service.developerDesc'),\n                        help_text_default: 'When true, JavaScript errors are shown in a purple bar at the top of the user interface. Not recommended for use in production.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.AllowedUntrustedInternalConnections',\n                        label: t('admin.service.internalConnectionsTitle'),\n                        label_default: 'Allow untrusted internal connections to: ',\n                        placeholder: t('admin.service.internalConnectionsEx'),\n                        placeholder_default: 'webhooks.internal.example.com 127.0.0.1 10.0.16.0/28',\n                        help_text: t('admin.service.internalConnectionsDesc'),\n                        help_text_default: 'A whitelist of local network addresses that can be requested by the Mattermost server on behalf of a client. Care should be used when configuring this setting to prevent unintended access to your local network. See [documentation](!https://mattermost.com/pl/default-allow-untrusted-internal-connections) to learn more.',\n                        help_text_markdown: true,\n                    },\n                ],\n            },\n        },\n    },\n    site: {\n        icon: 'fa-cogs',\n        sectionTitle: t('admin.sidebar.site'),\n        sectionTitleDefault: 'Site Configuration',\n        customization: {\n            url: 'site_config/customization',\n            title: t('admin.sidebar.customization'),\n            title_default: 'Customization',\n            schema: {\n                id: 'Customization',\n                name: t('admin.site.customization'),\n                name_default: 'Customization',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.SiteName',\n                        label: t('admin.team.siteNameTitle'),\n                        label_default: 'Site Name:',\n                        help_text: t('admin.team.siteNameDescription'),\n                        help_text_default: 'Name of service shown in login screens and UI. When not specified, it defaults to \"Mattermost\".',\n                        placeholder: t('admin.team.siteNameExample'),\n                        placeholder_default: 'E.g.: \"Mattermost\"',\n                        max_length: Constants.MAX_SITENAME_LENGTH,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.CustomDescriptionText',\n                        label: t('admin.team.brandDescriptionTitle'),\n                        label_default: 'Site Description: ',\n                        help_text: t('admin.team.brandDescriptionHelp'),\n                        help_text_default: 'Description of service shown in login screens and UI. When not specified, \"All team communication in one place, searchable and accessible anywhere\" is displayed.',\n                        placeholder: t('web.root.signup_info'),\n                        placeholder_default: 'All team communication in one place, searchable and accessible anywhere',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableCustomBrand',\n                        label: t('admin.team.brandTitle'),\n                        label_default: 'Enable Custom Branding: ',\n                        help_text: t('admin.team.brandDesc'),\n                        help_text_default: 'Enable custom branding to show an image of your choice, uploaded below, and some help text, written below, on the login page.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: BrandImageSetting,\n                        isDisabled: it.stateIsFalse('TeamSettings.EnableCustomBrand'),\n                        key: 'CustomBrandImage',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_LONG_TEXT,\n                        key: 'TeamSettings.CustomBrandText',\n                        label: t('admin.team.brandTextTitle'),\n                        label_default: 'Custom Brand Text:',\n                        help_text: t('admin.team.brandTextDescription'),\n                        help_text_default: 'Text that will appear below your custom brand image on your login screen. Supports Markdown-formatted text. Maximum 500 characters allowed.',\n                        isDisabled: it.stateIsFalse('TeamSettings.EnableCustomBrand'),\n                        max_length: Constants.MAX_CUSTOM_BRAND_TEXT_LENGTH,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.HelpLink',\n                        label: t('admin.support.helpTitle'),\n                        label_default: 'Help Link:',\n                        help_text: t('admin.support.helpDesc'),\n                        help_text_default: 'The URL for the Help link on the Mattermost login page, sign-up pages, and Main Menu. If this field is empty, the Help link is hidden from users.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.SupportEmail',\n                        label: t('admin.support.emailTitle'),\n                        label_default: 'Support Email:',\n                        help_text: t('admin.support.emailHelp'),\n                        help_text_default: 'Email address displayed on email notifications and during tutorial for end users to ask support questions.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.TermsOfServiceLink',\n                        label: t('admin.support.termsTitle'),\n                        label_default: 'Terms of Service Link:',\n                        help_text: t('admin.support.termsDesc'),\n                        help_text_default: 'Link to the terms under which users may use your online service. By default, this includes the \"Mattermost Conditions of Use (End Users)\" explaining the terms under which Mattermost software is provided to end users. If you change the default link to add your own terms for using the service you provide, your new terms must include a link to the default terms so end users are aware of the Mattermost Conditions of Use (End User) for Mattermost software.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.PrivacyPolicyLink',\n                        label: t('admin.support.privacyTitle'),\n                        label_default: 'Privacy Policy Link:',\n                        help_text: t('admin.support.privacyDesc'),\n                        help_text_default: 'The URL for the Privacy link on the login and sign-up pages. If this field is empty, the Privacy link is hidden from users.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.AboutLink',\n                        label: t('admin.support.aboutTitle'),\n                        label_default: 'About Link:',\n                        help_text: t('admin.support.aboutDesc'),\n                        help_text_default: 'The URL for the About link on the Mattermost login and sign-up pages. If this field is empty, the About link is hidden from users.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SupportSettings.ReportAProblemLink',\n                        label: t('admin.support.problemTitle'),\n                        label_default: 'Report a Problem Link:',\n                        help_text: t('admin.support.problemDesc'),\n                        help_text_default: 'The URL for the Report a Problem link in the Main Menu. If this field is empty, the link is removed from the Main Menu.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'NativeAppSettings.AppDownloadLink',\n                        label: t('admin.customization.appDownloadLinkTitle'),\n                        label_default: 'Mattermost Apps Download Page Link:',\n                        help_text: t('admin.customization.appDownloadLinkDesc'),\n                        help_text_default: 'Add a link to a download page for the Mattermost apps. When a link is present, an option to \"Download Mattermost Apps\" will be added in the Main Menu so users can find the download page. Leave this field blank to hide the option from the Main Menu.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'NativeAppSettings.AndroidAppDownloadLink',\n                        label: t('admin.customization.androidAppDownloadLinkTitle'),\n                        label_default: 'Android App Download Link:',\n                        help_text: t('admin.customization.androidAppDownloadLinkDesc'),\n                        help_text_default: 'Add a link to download the Android app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'NativeAppSettings.IosAppDownloadLink',\n                        label: t('admin.customization.iosAppDownloadLinkTitle'),\n                        label_default: 'iOS App Download Link:',\n                        help_text: t('admin.customization.iosAppDownloadLinkDesc'),\n                        help_text_default: 'Add a link to download the iOS app. Users who access the site on a mobile web browser will be prompted with a page giving them the option to download the app. Leave this field blank to prevent the page from appearing.',\n                    },\n                ],\n            },\n        },\n        localization: {\n            url: 'site_config/localization',\n            title: t('admin.sidebar.localization'),\n            title_default: 'Localization',\n            schema: {\n                id: 'LocalizationSettings',\n                name: t('admin.site.localization'),\n                name_default: 'Localization',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                        key: 'LocalizationSettings.DefaultServerLocale',\n                        label: t('admin.general.localization.serverLocaleTitle'),\n                        label_default: 'Default Server Language:',\n                        help_text: t('admin.general.localization.serverLocaleDescription'),\n                        help_text_default: 'Default language for system messages. Changing this will require a server restart before taking effect.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                        key: 'LocalizationSettings.DefaultClientLocale',\n                        label: t('admin.general.localization.clientLocaleTitle'),\n                        label_default: 'Default Client Language:',\n                        help_text: t('admin.general.localization.clientLocaleDescription'),\n                        help_text_default: 'Default language for newly created users and pages where the user hasn\\'t logged in.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_LANGUAGE,\n                        key: 'LocalizationSettings.AvailableLocales',\n                        label: t('admin.general.localization.availableLocalesTitle'),\n                        label_default: 'Available Languages:',\n                        help_text: t('admin.general.localization.availableLocalesDescription'),\n                        help_text_markdown: true,\n                        help_text_default: 'Set which languages are available for users in Account Settings (leave this field blank to have all supported languages available). If you\\'re manually adding new languages, the **Default Client Language** must be added before saving this setting.\\n \\nWould like to help with translations? Join the [Mattermost Translation Server](!http://translate.mattermost.com/) to contribute.',\n                        multiple: true,\n                        no_result: t('admin.general.localization.availableLocalesNoResults'),\n                        no_result_default: 'No results found',\n                        not_present: t('admin.general.localization.availableLocalesNotPresent'),\n                        not_present_default: 'The default client language must be included in the available list',\n                    },\n                ],\n            },\n        },\n        users_and_teams: {\n            url: 'site_config/users_and_teams',\n            title: t('admin.sidebar.usersAndTeams'),\n            title_default: 'Users and Teams',\n            schema: {\n                id: 'UserAndTeamsSettings',\n                name: t('admin.site.usersAndTeams'),\n                name_default: 'Users and Teams',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_PERMISSION,\n                        key: 'TeamSettings.EnableTeamCreation',\n                        label: t('admin.team.teamCreationTitle'),\n                        label_default: 'Enable Team Creation: ',\n                        help_text: t('admin.team.teamCreationDescription'),\n                        help_text_default: 'When false, only System Administrators can create teams.',\n                        permissions_mapping_name: 'enableTeamCreation',\n                        isHidden: it.licensed,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'TeamSettings.MaxUsersPerTeam',\n                        label: t('admin.team.maxUsersTitle'),\n                        label_default: 'Max Users Per Team:',\n                        help_text: t('admin.team.maxUsersDescription'),\n                        help_text_default: 'Maximum total number of users per team, including both active and inactive users.',\n                        placeholder: t('admin.team.maxUsersExample'),\n                        placeholder_default: 'E.g.: \"25\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'TeamSettings.MaxChannelsPerTeam',\n                        label: t('admin.team.maxChannelsTitle'),\n                        label_default: 'Max Channels Per Team:',\n                        help_text: t('admin.team.maxChannelsDescription'),\n                        help_text_default: 'Maximum total number of channels per team, including both active and archived channels.',\n                        placeholder: t('admin.team.maxChannelsExample'),\n                        placeholder_default: 'E.g.: \"100\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'TeamSettings.RestrictDirectMessage',\n                        label: t('admin.team.restrictDirectMessage'),\n                        label_default: 'Enable users to open Direct Message channels with:',\n                        help_text: t('admin.team.restrictDirectMessageDesc'),\n                        help_text_default: '\"Any user on the Mattermost server\" enables users to open a Direct Message channel with any user on the server, even if they are not on any teams together. \"Any member of the team\" limits the ability in the Direct Messages \"More\" menu to only open Direct Message channels with users who are in the same team.\\n \\nNote: This setting only affects the UI, not permissions on the server.',\n                        options: [\n                            {\n                                value: 'any',\n                                display_name: t('admin.team.restrict_direct_message_any'),\n                                display_name_default: 'Any user on the Mattermost server',\n                            },\n                            {\n                                value: 'team',\n                                display_name: t('admin.team.restrict_direct_message_team'),\n                                display_name_default: 'Any member of the team',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'TeamSettings.TeammateNameDisplay',\n                        label: t('admin.team.teammateNameDisplay'),\n                        label_default: 'Teammate Name Display:',\n                        help_text: t('admin.team.teammateNameDisplayDesc'),\n                        help_text_default: 'Set how to display users\\' names in posts and the Direct Messages list.',\n                        options: [\n                            {\n                                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_USERNAME,\n                                display_name: t('admin.team.showUsername'),\n                                display_name_default: 'Show username (default)',\n                            },\n                            {\n                                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_NICKNAME_FULLNAME,\n                                display_name: t('admin.team.showNickname'),\n                                display_name_default: 'Show nickname if one exists, otherwise show first and last name',\n                            },\n                            {\n                                value: Constants.TEAMMATE_NAME_DISPLAY.SHOW_FULLNAME,\n                                display_name: t('admin.team.showFullname'),\n                                display_name_default: 'Show first and last name',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.LockTeammateNameDisplay',\n                        label: t('admin.lockTeammateNameDisplay'),\n                        label_default: 'Lock Teammate Name Display for all users: ',\n                        help_text: t('admin.lockTeammateNameDisplayHelpText'),\n                        help_text_default: 'When true, disables users\\' ability to change settings under Main Menu > Account Settings > Display > Teammate Name Display.',\n                        isHidden: it.isnt(it.licensedForFeature('LockTeammateNameDisplay'))\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_PERMISSION,\n                        key: 'TeamSettings.EditOthersPosts',\n                        label: t('admin.team.editOthersPostsTitle'),\n                        label_default: 'Allow Team Administrators to edit others posts:',\n                        help_text: t('admin.team.editOthersPostsDesc'),\n                        help_text_default: 'When true, Team Administrators and System Administrators can edit other user\\'s posts.  When false, only System Administrators can edit other user\\'s posts.',\n                        permissions_mapping_name: 'editOthersPosts',\n                        isHidden: it.licensed,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalViewArchivedChannels',\n                        label: t('admin.viewArchivedChannelsTitle'),\n                        label_default: 'Allow users to view archived channels: ',\n                        help_text: t('admin.viewArchivedChannelsHelpText'),\n                        help_text_default: '(Beta) When true, allows users to view, share and search for content of channels that have been archived. Users can only view the content in channels of which they were a member before the channel was archived.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'PrivacySettings.ShowEmailAddress',\n                        label: t('admin.privacy.showEmailTitle'),\n                        label_default: 'Show Email Address:',\n                        help_text: t('admin.privacy.showEmailDescription'),\n                        help_text_default: 'When false, hides the email address of members from everyone except System Administrators.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'PrivacySettings.ShowFullName',\n                        label: t('admin.privacy.showFullNameTitle'),\n                        label_default: 'Show Full Name:',\n                        help_text: t('admin.privacy.showFullNameDescription'),\n                        help_text_default: 'When false, hides the full name of members from everyone except System Administrators. Username is shown in place of full name.',\n                    },\n                ],\n            },\n        },\n        notifications: {\n            url: 'environment/notifications',\n            title: t('admin.sidebar.notifications'),\n            title_default: 'Notifications',\n            schema: {\n                id: 'notifications',\n                name: t('admin.environment.notifications'),\n                name_default: 'Notifications',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableConfirmNotificationsToChannel',\n                        label: t('admin.environment.notifications.enableConfirmNotificationsToChannel.label'),\n                        label_default: 'Show @channel and @all confirmation dialog:',\n                        help_text: t('admin.environment.notifications.enableConfirmNotificationsToChannel.help'),\n                        help_text_default: 'When true, users will be prompted to confirm when posting @channel and @all in channels with over five members. When false, no confirmation is required.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.SendEmailNotifications',\n                        label: t('admin.environment.notifications.enable.label'),\n                        label_default: 'Enable Email Notifications:',\n                        help_text: t('admin.environment.notifications.enable.help'),\n                        help_text_default: 'Typically set to true in production. When true, Mattermost attempts to send email notifications. When false, email invitations and user account setting change emails are still sent as long as the SMTP server is configured. Developers may set this field to false to skip email setup for faster development.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnablePreviewModeBanner',\n                        label: t('admin.environment.notifications.enablePreviewModeBanner.label'),\n                        label_default: 'Enable Preview Mode Banner:',\n                        help_text: t('admin.environment.notifications.enablePreviewModeBanner.help'),\n                        help_text_default: 'When true, the Preview Mode banner is displayed so users are aware that email notifications are disabled. When false, the Preview Mode banner is not displayed to users.',\n                        isDisabled: it.either(\n                            it.stateIsTrue('EmailSettings.SendEmailNotifications'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableEmailBatching',\n                        label: t('admin.environment.notifications.enableEmailBatching.label'),\n                        label_default: 'Enable Email Batching:',\n                        help_text: t('admin.environment.notifications.enableEmailBatching.help'),\n                        help_text_default: 'When true, users will have email notifications for multiple direct messages and mentions combined into a single email. Batching will occur at a default interval of 15 minutes, configurable in Account Settings > Notifications.',\n                        isDisabled: it.either(\n                            it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                            it.configIsTrue('ClusterSettings', 'Enable'),\n                            it.configIsFalse('ServiceSettings', 'SiteURL'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.EmailNotificationContentsType',\n                        label: t('admin.environment.notifications.contents.label'),\n                        label_default: 'Email Notification Contents:',\n                        help_text: t('admin.environment.notifications.contents.help'),\n                        help_text_default: '**Send full message contents** - Sender name and channel are included in email notifications. Typically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.\\n  **Send generic description with only sender name** - Only the name of the person who sent the message, with no information about channel name or message contents are included in email notifications. Typically used for compliance reasons if Mattermost contains confidential information and policy dictates it cannot be stored in email.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensedForFeature('EmailNotificationContents')),\n                        options: [\n                            {\n                                value: 'full',\n                                display_name: t('admin.environment.notifications.contents.full'),\n                                display_name_default: 'Send full message contents',\n                            },\n                            {\n                                value: 'generic',\n                                display_name: t('admin.environment.notifications.contents.generic'),\n                                display_name_default: 'Send generic description with only sender name',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.FeedbackName',\n                        label: t('admin.environment.notifications.notificationDisplay.label'),\n                        label_default: 'Notification Display Name:',\n                        placeholder: t('admin.environment.notifications.notificationDisplay.placeholder'),\n                        placeholder_default: 'Ex: \"Mattermost Notification\", \"System\", \"No-Reply\"',\n                        help_text: t('admin.environment.notifications.notificationDisplay.help'),\n                        help_text_default: 'Display name on email account used when sending notification emails from Mattermost.',\n                        isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.FeedbackEmail',\n                        label: t('admin.environment.notifications.feedbackEmail.label'),\n                        label_default: 'Notification From Address:',\n                        placeholder: t('admin.environment.notifications.feedbackEmail.placeholder'),\n                        placeholder_default: 'Ex: \"mattermost@yourcompany.com\", \"admin@yourcompany.com\"',\n                        help_text: t('admin.environment.notifications.feedbackEmail.help'),\n                        help_text_default: 'Email address displayed on email account used when sending notification emails from Mattermost.',\n                        isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.ReplyToAddress',\n                        label: t('admin.environment.notifications.replyToAddress.label'),\n                        label_default: 'Notification Reply-To Address:',\n                        placeholder: t('admin.environment.notifications.replyToAddress.placeholder'),\n                        placeholder_default: 'Ex: \"mattermost@yourcompany.com\", \"admin@yourcompany.com\"',\n                        help_text: t('admin.environment.notifications.replyToAddress.help'),\n                        help_text_default: 'Email address used in the Reply-To header when sending notification emails from Mattermost.',\n                        isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.FeedbackOrganization',\n                        label: t('admin.environment.notifications.feedbackOrganization.label'),\n                        label_default: 'Notification Footer Mailing Address:',\n                        placeholder: t('admin.environment.notifications.feedbackOrganization.placeholder'),\n                        placeholder_default: 'Ex: \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\"',\n                        help_text: t('admin.environment.notifications.feedbackOrganization.help'),\n                        help_text_default: 'Organization name and address displayed on email notifications from Mattermost, such as \"© ABC Corporation, 565 Knight Way, Palo Alto, California, 94305, USA\". If the field is left empty, the organization name and address will not be displayed.',\n                        isDisabled: it.stateIsFalse('EmailSettings.SendEmailNotifications'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.PushNotificationContents',\n                        label: t('admin.environment.notifications.pushContents.label'),\n                        label_default: 'Push Notification Contents:',\n                        help_text: t('admin.environment.notifications.pushContents.help'),\n                        help_text_default: '**Generic description with only sender name** - Includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.\\n **Generic description with sender and channel names** - Includes the name of the person who sent the message and the channel it was sent in, but not the message contents.\\n **Full message content sent in the notification payload** - Includes the message contents in the push notification payload that is relayed through Apple\\'s Push Notification Service (APNS) or Google\\'s Firebase Cloud Messaging (FCM). It is **highly recommended** this option only be used with an \"https\" protocol to encrypt the connection and protect confidential information sent in messages.',\n                        help_text_markdown: true,\n                        isHidden: it.licensedForFeature('IDLoadedPushNotifications'),\n                        options: [\n                            {\n                                value: 'generic_no_channel',\n                                display_name: t('admin.environment.notifications.pushContents.genericNoChannel'),\n                                display_name_default: 'Generic description with only sender name',\n                            },\n                            {\n                                value: 'generic',\n                                display_name: t('admin.environment.notifications.pushContents.generic'),\n                                display_name_default: 'Generic description with sender and channel names',\n                            },\n                            {\n                                value: 'full',\n                                display_name: t('admin.environment.notifications.pushContents.full'),\n                                display_name_default: 'Full message content sent in the notification payload',\n                            }\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'EmailSettings.PushNotificationContents',\n                        label: t('admin.environment.notifications.pushContents.label'),\n                        label_default: 'Push Notification Contents:',\n                        help_text: t('admin.environment.notifications.pushContents.withIdLoaded.help'),\n                        help_text_default: '**Generic description with only sender name** - Includes only the name of the person who sent the message in push notifications, with no information about channel name or message contents.\\n **Generic description with sender and channel names** - Includes the name of the person who sent the message and the channel it was sent in, but not the message contents.\\n **Full message content sent in the notification payload** - Includes the message contents in the push notification payload that is relayed through Apple\\'s Push Notification Service (APNS) or Google\\'s Firebase Cloud Messaging (FCM). It is **highly recommended** this option only be used with an \"https\" protocol to encrypt the connection and protect confidential information sent in messages.\\n **Full message content fetched from the server on receipt** - The notification payload relayed through APNS or FCM contains no message content, instead it contains a unique message ID used to fetch message content from the server when a push notification is received by a device. If the server cannot be reached, a generic notification will be displayed.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensedForFeature('IDLoadedPushNotifications')),\n                        options: [\n                            {\n                                value: 'generic_no_channel',\n                                display_name: t('admin.environment.notifications.pushContents.genericNoChannel'),\n                                display_name_default: 'Generic description with only sender name',\n                            },\n                            {\n                                value: 'generic',\n                                display_name: t('admin.environment.notifications.pushContents.generic'),\n                                display_name_default: 'Generic description with sender and channel names',\n                            },\n                            {\n                                value: 'full',\n                                display_name: t('admin.environment.notifications.pushContents.full'),\n                                display_name_default: 'Full message content sent in the notification payload',\n                            },\n                            {\n                                value: 'id_loaded',\n                                display_name: t('admin.environment.notifications.pushContents.idLoaded'),\n                                display_name_default: 'Full message content fetched from the server on receipt',\n                            },\n                        ],\n                    },\n                ],\n            },\n        },\n        announcement_banner: {\n            url: 'site_config/announcement_banner',\n            title: t('admin.sidebar.announcement'),\n            title_default: 'Announcement Banner',\n            isHidden: it.isnt(it.licensed),\n            schema: {\n                id: 'AnnouncementSettings',\n                name: t('admin.site.announcementBanner'),\n                name_default: 'Announcement Banner',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'AnnouncementSettings.EnableBanner',\n                        label: t('admin.customization.announcement.enableBannerTitle'),\n                        label_default: 'Enable Announcement Banner:',\n                        help_text: t('admin.customization.announcement.enableBannerDesc'),\n                        help_text_default: 'Enable an announcement banner across all teams.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'AnnouncementSettings.BannerText',\n                        label: t('admin.customization.announcement.bannerTextTitle'),\n                        label_default: 'Banner Text:',\n                        help_text: t('admin.customization.announcement.bannerTextDesc'),\n                        help_text_default: 'Text that will appear in the announcement banner.',\n                        isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'AnnouncementSettings.BannerColor',\n                        label: t('admin.customization.announcement.bannerColorTitle'),\n                        label_default: 'Banner Color:',\n                        isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_COLOR,\n                        key: 'AnnouncementSettings.BannerTextColor',\n                        label: t('admin.customization.announcement.bannerTextColorTitle'),\n                        label_default: 'Banner Text Color:',\n                        isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'AnnouncementSettings.AllowBannerDismissal',\n                        label: t('admin.customization.announcement.allowBannerDismissalTitle'),\n                        label_default: 'Allow Banner Dismissal:',\n                        help_text: t('admin.customization.announcement.allowBannerDismissalDesc'),\n                        help_text_default: 'When true, users can dismiss the banner until its next update. When false, the banner is permanently visible until it is turned off by the System Admin.',\n                        isDisabled: it.stateIsFalse('AnnouncementSettings.EnableBanner'),\n                    },\n                ],\n            },\n        },\n        emoji: {\n            url: 'site_config/emoji',\n            title: t('admin.sidebar.emoji'),\n            title_default: 'Emoji',\n            schema: {\n                id: 'EmojiSettings',\n                name: t('admin.site.emoji'),\n                name_default: 'Emoji',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableEmojiPicker',\n                        label: t('admin.customization.enableEmojiPickerTitle'),\n                        label_default: 'Enable Emoji Picker:',\n                        help_text: t('admin.customization.enableEmojiPickerDesc'),\n                        help_text_default: 'The emoji picker allows users to select emoji to add as reactions or use in messages. Enabling the emoji picker with a large number of custom emoji may slow down performance.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableCustomEmoji',\n                        label: t('admin.customization.enableCustomEmojiTitle'),\n                        label_default: 'Enable Custom Emoji:',\n                        help_text: t('admin.customization.enableCustomEmojiDesc'),\n                        help_text_default: 'Enable users to create custom emoji for use in messages. When enabled, Custom Emoji settings can be accessed by switching to a team and clicking the three dots above the channel sidebar, and selecting \"Custom Emoji\".',\n                    },\n                ],\n            },\n        },\n        posts: {\n            url: 'site_config/posts',\n            title: t('admin.sidebar.posts'),\n            title_default: 'Posts',\n            schema: {\n                id: 'PostSettings',\n                name: t('admin.site.posts'),\n                name_default: 'Posts',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableLinkPreviews',\n                        label: t('admin.customization.enableLinkPreviewsTitle'),\n                        label_default: 'Enable Link Previews:',\n                        help_text: t('admin.customization.enableLinkPreviewsDesc'),\n                        help_text_default: 'Display a preview of website content, image links and YouTube links below the message when available. The server must be connected to the internet and have access through the firewall (if applicable) to the websites from which previews are expected. Users can disable these previews from Account Settings > Display > Website Link Previews.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableSVGs',\n                        label: t('admin.customization.enableSVGsTitle'),\n                        label_default: 'Enable SVGs:',\n                        help_text: t('admin.customization.enableSVGsDesc'),\n                        help_text_default: 'Enable previews for SVG file attachments and allow them to appear in messages.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableLatex',\n                        label: t('admin.customization.enableLatexTitle'),\n                        label_default: 'Enable Latex Rendering:',\n                        help_text: t('admin.customization.enableLatexDesc'),\n                        help_text_default: 'Enable rending of Latex code. If false, Latex code will be highlighted only.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: CustomUrlSchemesSetting,\n                        key: 'DisplaySettings.CustomUrlSchemes',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.GoogleDeveloperKey',\n                        label: t('admin.service.googleTitle'),\n                        label_default: 'Google API Key:',\n                        placeholder: t('admin.service.googleExample'),\n                        placeholder_default: 'E.g.: \"7rAh6iwQCkV4cA1Gsg3fgGOXJAQ43QV\"',\n                        help_text: t('admin.service.googleDescription'),\n                        help_text_default: 'Set this key to enable the display of titles for embedded YouTube video previews. Without the key, YouTube previews will still be created based on hyperlinks appearing in messages or comments but they will not show the video title. View a [Google Developers Tutorial](!https://www.youtube.com/watch?v=Im69kzhpR3I) for instructions on how to obtain a key and add YouTube Data API v3 as a service to your key.',\n                        help_text_markdown: true,\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                ],\n            },\n        },\n        file_sharing_downloads: {\n            url: 'site_config/file_sharing_downloads',\n            title: t('admin.sidebar.fileSharingDownloads'),\n            title_default: 'File Sharing and Downloads',\n            schema: {\n                id: 'FileSharingDownloads',\n                name: t('admin.site.fileSharingDownloads'),\n                name_default: 'File Sharing and Downloads',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnableFileAttachments',\n                        label: t('admin.file.enableFileAttachments'),\n                        label_default: 'Allow File Sharing:',\n                        help_text: t('admin.file.enableFileAttachmentsDesc'),\n                        help_text_default: 'When false, disables file sharing on the server. All file and image uploads on messages are forbidden across clients and devices, including mobile.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnableMobileUpload',\n                        label: t('admin.file.enableMobileUploadTitle'),\n                        label_default: 'Allow File Uploads on Mobile:',\n                        help_text: t('admin.file.enableMobileUploadDesc'),\n                        help_text_default: 'When false, disables file uploads on mobile apps. If Allow File Sharing is set to true, users can still upload files from a mobile web browser.',\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnableMobileDownload',\n                        label: t('admin.file.enableMobileDownloadTitle'),\n                        label_default: 'Allow File Downloads on Mobile:',\n                        help_text: t('admin.file.enableMobileDownloadDesc'),\n                        help_text_default: 'When false, disables file downloads on mobile apps. Users can still download files from a mobile web browser.',\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                    },\n                ],\n            },\n        },\n        public_links: {\n            url: 'site_config/public_links',\n            title: t('admin.sidebar.publicLinks'),\n            title_default: 'Public Links',\n            schema: {\n                id: 'PublicLinkSettings',\n                name: t('admin.site.public_links'),\n                name_default: 'Public Links',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'FileSettings.EnablePublicLink',\n                        label: t('admin.image.shareTitle'),\n                        label_default: 'Enable Public File Links: ',\n                        help_text: t('admin.image.shareDescription'),\n                        help_text_default: 'Allow users to share public links to files and images.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_GENERATED,\n                        key: 'FileSettings.PublicLinkSalt',\n                        label: t('admin.image.publicLinkTitle'),\n                        label_default: 'Public Link Salt:',\n                        help_text: t('admin.image.publicLinkDescription'),\n                        help_text_default: '32-character salt added to signing of public image links. Randomly generated on install. Click \"Regenerate\" to create new salt.',\n                    },\n                ],\n            },\n        },\n    },\n    authentication: {\n        icon: 'fa-shield',\n        sectionTitle: t('admin.sidebar.authentication'),\n        sectionTitleDefault: 'Authentication',\n        signup: {\n            url: 'authentication/signup',\n            title: t('admin.sidebar.signup'),\n            title_default: 'Signup',\n            schema: {\n                id: 'SignupSettings',\n                name: t('admin.authentication.signup'),\n                name_default: 'Signup',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableUserCreation',\n                        label: t('admin.team.userCreationTitle'),\n                        label_default: 'Enable Account Creation: ',\n                        help_text: t('admin.team.userCreationDescription'),\n                        help_text_default: 'When false, the ability to create accounts is disabled. The create account button displays error when pressed.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.RestrictCreationToDomains',\n                        label: t('admin.team.restrictTitle'),\n                        label_default: 'Restrict account creation to specified email domains:',\n                        help_text: t('admin.team.restrictDescription'),\n                        help_text_default: 'User accounts can only be created from a specific domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\"). This setting only affects email login for users.',\n                        placeholder: t('admin.team.restrictExample'),\n                        placeholder_default: 'E.g.: \"corp.mattermost.com, mattermost.org\"',\n                        isHidden: it.licensed,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.RestrictCreationToDomains',\n                        label: t('admin.team.restrictTitle'),\n                        label_default: 'Restrict account creation to specified email domains:',\n                        help_text: t('admin.team.restrictGuestDescription'),\n                        help_text_default: 'User accounts can only be created from a specific domain (e.g. \"mattermost.org\") or list of comma-separated domains (e.g. \"corp.mattermost.com, mattermost.org\"). This setting only affects email login for users. For Guest users, please add domains under Signup > Guest Access.',\n                        placeholder: t('admin.team.restrictExample'),\n                        placeholder_default: 'E.g.: \"corp.mattermost.com, mattermost.org\"',\n                        isHidden: it.isnt(it.licensed),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableOpenServer',\n                        label: t('admin.team.openServerTitle'),\n                        label_default: 'Enable Open Server: ',\n                        help_text: t('admin.team.openServerDescription'),\n                        help_text_default: 'When true, anyone can signup for a user account on this server without the need to be invited.',\n                        isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableEmailInvitations',\n                        label: t('admin.team.emailInvitationsTitle'),\n                        label_default: 'Enable Email Invitations: ',\n                        help_text: t('admin.team.emailInvitationsDescription'),\n                        help_text_default: 'When true users can invite others to the system using email.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'InvalidateEmailInvitesButton',\n                        action: invalidateAllEmailInvites,\n                        label: t('admin.team.invalidateEmailInvitesTitle'),\n                        label_default: 'Invalidate pending email invites',\n                        help_text: t('admin.team.invalidateEmailInvitesDescription'),\n                        help_text_default: 'This will invalidate active email invitations that have not been accepted by the user.  By default email invitations expire after 48 hours.',\n                        error_message: t('admin.team.invalidateEmailInvitesFail'),\n                        error_message_default: 'Unable to invalidate pending email invites: {error}',\n                        success_message: t('admin.team.invalidateEmailInvitesSuccess'),\n                        success_message_default: 'Pending email invitations invalidated successfully',\n                    },\n                ],\n            },\n        },\n        email: {\n            url: 'authentication/email',\n            title: t('admin.sidebar.email'),\n            title_default: 'Email',\n            schema: {\n                id: 'EmailSettings',\n                name: t('admin.authentication.email'),\n                name_default: 'Email',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSignUpWithEmail',\n                        label: t('admin.email.allowSignupTitle'),\n                        label_default: 'Enable account creation with email:',\n                        help_text: t('admin.email.allowSignupDescription'),\n                        help_text_default: 'When true, Mattermost allows account creation using email and password. This value should be false only when you want to limit sign up to a single sign-on service like AD/LDAP, SAML or GitLab.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.RequireEmailVerification',\n                        label: t('admin.email.requireVerificationTitle'),\n                        label_default: 'Require Email Verification: ',\n                        help_text: t('admin.email.requireVerificationDescription'),\n                        help_text_default: 'Typically set to true in production. When true, Mattermost requires email verification after account creation prior to allowing login. Developers may set this field to false to skip sending verification emails for faster development.',\n                        disabled_help_text: t('admin.security.requireEmailVerification.disabled'),\n                        disabled_help_text_default: 'Email verification cannot be changed while sending emails is disabled.',\n                        isDisabled: (config) => !config.EmailSettings.SendEmailNotifications,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSignInWithEmail',\n                        label: t('admin.email.allowEmailSignInTitle'),\n                        label_default: 'Enable sign-in with email:',\n                        help_text: t('admin.email.allowEmailSignInDescription'),\n                        help_text_default: 'When true, Mattermost allows users to sign in using their email and password.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.EnableSignInWithUsername',\n                        label: t('admin.email.allowUsernameSignInTitle'),\n                        label_default: 'Enable sign-in with username:',\n                        help_text: t('admin.email.allowUsernameSignInDescription'),\n                        help_text_default: 'When true, users with email login can sign in using their username and password. This setting does not affect AD/LDAP login.',\n                    },\n                ],\n            },\n        },\n        password: {\n            url: 'authentication/password',\n            title: t('admin.sidebar.password'),\n            title_default: 'Password',\n            searchableStrings: [\n                'user.settings.security.passwordMinLength',\n                'admin.security.password',\n                ['admin.password.minimumLength', {max: '', min: ''}],\n                ['admin.password.minimumLengthDescription', {max: '', min: ''}],\n                'passwordRequirements',\n                'admin.password.lowercase',\n                'admin.password.uppercase',\n                'admin.password.number',\n                'admin.password.symbol',\n                'admin.password.preview',\n                'admin.service.attemptTitle',\n                'admin.service.attemptDescription',\n            ],\n            schema: {\n                id: 'PasswordSettings',\n                component: PasswordSettings,\n            },\n        },\n        mfa: {\n            url: 'authentication/mfa',\n            title: t('admin.sidebar.mfa'),\n            title_default: 'MFA',\n            schema: {\n                id: 'ServiceSettings',\n                name: t('admin.authentication.mfa'),\n                name_default: 'Multi-factor Authentication',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.mfa.bannerDesc'),\n                        label_default: '[Multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is available for accounts with AD/LDAP or email login. If other login methods are used, MFA should be configured with the authentication provider.',\n                        label_markdown: true,\n                        banner_type: 'info',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableMultifactorAuthentication',\n                        label: t('admin.service.mfaTitle'),\n                        label_default: 'Enable Multi-factor Authentication:',\n                        help_text: t('admin.service.mfaDesc'),\n                        help_text_default: 'When true, users with AD/LDAP or email login can add multi-factor authentication to their account using Google Authenticator.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.service.enforceMfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication:',\n                        help_text: t('admin.service.enforceMfaDesc'),\n                        help_text_markdown: true,\n                        help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) is required for login. New users will be required to configure MFA on signup. Logged in users without MFA configured are redirected to the MFA setup page until configuration is complete.\\n \\nIf your system has users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',\n                        isDisabled: it.stateIsFalse('ServiceSettings.EnableMultifactorAuthentication'),\n                        isHidden: it.isnt(it.licensedForFeature('MFA')),\n                    },\n                ],\n            },\n        },\n        ldap: {\n            url: 'authentication/ldap',\n            title: t('admin.sidebar.ldap'),\n            title_default: 'AD/LDAP',\n            isHidden: it.isnt(it.licensedForFeature('LDAP')),\n            schema: {\n                id: 'LdapSettings',\n                name: t('admin.authentication.ldap'),\n                name_default: 'AD/LDAP',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LdapSettings.Enable',\n                        label: t('admin.ldap.enableTitle'),\n                        label_default: 'Enable sign-in with AD/LDAP:',\n                        help_text: t('admin.ldap.enableDesc'),\n                        help_text_default: 'When true, Mattermost allows login using AD/LDAP',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LdapSettings.EnableSync',\n                        label: t('admin.ldap.enableSyncTitle'),\n                        label_default: 'Enable Synchronization with AD/LDAP:',\n                        help_text: t('admin.ldap.enableSyncDesc'),\n                        help_text_default: 'When true, Mattermost periodically synchronizes users from AD/LDAP. When false, user attributes are updated from AD/LDAP during user login only.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.LdapServer',\n                        label: t('admin.ldap.serverTitle'),\n                        label_default: 'AD/LDAP Server:',\n                        help_text: t('admin.ldap.serverDesc'),\n                        help_text_default: 'The domain or IP address of AD/LDAP server.',\n                        placeholder: t('admin.ldap.serverEx'),\n                        placeholder_default: 'E.g.: \"10.0.0.23\"',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'LdapSettings.LdapPort',\n                        label: t('admin.ldap.portTitle'),\n                        label_default: 'AD/LDAP Port:',\n                        help_text: t('admin.ldap.portDesc'),\n                        help_text_default: 'The port Mattermost will use to connect to the AD/LDAP server. Default is 389.',\n                        placeholder: t('admin.ldap.portEx'),\n                        placeholder_default: 'E.g.: \"389\"',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'LdapSettings.ConnectionSecurity',\n                        label: t('admin.connectionSecurityTitle'),\n                        label_default: 'Connection Security:',\n                        help_text: DefinitionConstants.CONNECTION_SECURITY_HELP_TEXT_LDAP,\n                        options: [\n                            {\n                                value: '',\n                                display_name: t('admin.connectionSecurityNone'),\n                                display_name_default: 'None',\n                            },\n                            {\n                                value: 'TLS',\n                                display_name: t('admin.connectionSecurityTls'),\n                                display_name_default: 'TLS (Recommended)',\n                            },\n                            {\n                                value: 'STARTTLS',\n                                display_name: t('admin.connectionSecurityStart'),\n                                display_name_default: 'STARTTLS',\n                            },\n                        ],\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LdapSettings.SkipCertificateVerification',\n                        label: t('admin.ldap.skipCertificateVerification'),\n                        label_default: 'Skip Certificate Verification:',\n                        help_text: t('admin.ldap.skipCertificateVerificationDesc'),\n                        help_text_default: 'Skips the certificate verification step for TLS or STARTTLS connections. Skipping certificate verification is not recommended for production environments where TLS is required.',\n                        isDisabled: it.stateIsFalse('LdapSettings.ConnectionSecurity'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.BaseDN',\n                        label: t('admin.ldap.baseTitle'),\n                        label_default: 'BaseDN:',\n                        help_text: t('admin.ldap.baseDesc'),\n                        help_text_default: 'The Base DN is the Distinguished Name of the location where Mattermost should start its search for user and group objects in the AD/LDAP tree.',\n                        placeholder: t('admin.ldap.baseEx'),\n                        placeholder_default: 'E.g.: \"ou=Unit Name,dc=corp,dc=example,dc=com\"',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.BindUsername',\n                        label: t('admin.ldap.bindUserTitle'),\n                        label_default: 'Bind Username:',\n                        help_text: t('admin.ldap.bindUserDesc'),\n                        help_text_default: 'The username used to perform the AD/LDAP search. This should typically be an account created specifically for use with Mattermost. It should have access limited to read the portion of the AD/LDAP tree specified in the BaseDN field.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.BindPassword',\n                        label: t('admin.ldap.bindPwdTitle'),\n                        label_default: 'Bind Password:',\n                        help_text: t('admin.ldap.bindPwdDesc'),\n                        help_text_default: 'Password of the user given in \"Bind Username\".',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.UserFilter',\n                        label: t('admin.ldap.userFilterTitle'),\n                        label_default: 'User Filter:',\n                        help_text: t('admin.ldap.userFilterDisc'),\n                        help_text_default: '(Optional) Enter an AD/LDAP filter to use when searching for user objects. Only the users selected by the query will be able to access Mattermost. For Active Directory, the query to filter out disabled users is (&(objectCategory=Person)(!(UserAccountControl:1.2.840.113556.1.4.803:=2))).',\n                        placeholder: t('admin.ldap.userFilterEx'),\n                        placeholder_default: 'Ex. \"(objectClass=user)\"',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.GuestFilter',\n                        label: t('admin.ldap.guestFilterTitle'),\n                        label_default: 'Guest Filter:',\n                        help_text: t('admin.ldap.guestFilterFilterDesc'),\n                        help_text_default: '(Optional) Requires Guest Access to be enabled before being applied. Enter an AD/LDAP filter to use when searching for guest objects. Only the users selected by the query will be able to access Mattermost as Guests. Guests are prevented from accessing teams or channels upon logging in until they are assigned a team and at least one channel.\\n \\nNote: If this filter is removed/changed, active guests will not be promoted to a member and will retain their Guest role. Guests can be promoted in **System Console > User Management**.\\n \\n \\nExisting members that are identified by this attribute as a guest will be demoted from a member to a guest when they are asked to login next. The next login is based upon Session lengths set in **System Console > Session Lengths**. It is highly recommend to manually demote users to guests in **System Console > User Management ** to ensure access is restricted immediately.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.ldap.guestFilterEx'),\n                        placeholder_default: 'E.g.: \"(objectClass=guests)\"',\n                        isDisabled: it.either(\n                            it.configIsFalse('GuestAccountsSettings', 'Enable'),\n                            it.both(\n                                it.stateIsFalse('LdapSettings.Enable'),\n                                it.stateIsFalse('LdapSettings.EnableSync'),\n                            )\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'LdapSettings.EnableAdminFilter',\n                        label: t('admin.ldap.enableAdminFilterTitle'),\n                        label_default: 'Enable Admin Filter:',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.AdminFilter',\n                        label: t('admin.ldap.adminFilterTitle'),\n                        label_default: 'Admin Filter:',\n                        help_text: t('admin.ldap.adminFilterFilterDesc'),\n                        help_text_default: '(Optional) Enter an AD/LDAP filter to use for designating System Admins. The users selected by the query will have access to your Mattermost server as System Admins. By default, System Admins have complete access to the Mattermost System Console.\\n \\nExisting members that are identified by this attribute will be promoted from member to System Admin upon next login. The next login is based upon Session lengths set in **System Console > Session Lengths**. It is highly recommend to manually demote users to members in **System Console > User Management** to ensure access is restricted immediately.\\n \\nNote: If this filter is removed/changed, System Admins that were promoted via this filter will be demoted to members and will not retain access to the System Console. When this filter is not in use, System Admins can be manually promoted/demoted in **System Console > User Management**.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.ldap.adminFilterEx'),\n                        placeholder_default: 'E.g.: \"(objectClass=admins)\"',\n                        isDisabled: it.either(\n                            it.stateIsFalse('LdapSettings.EnableAdminFilter'),\n                            it.both(\n                                it.stateIsFalse('LdapSettings.Enable'),\n                                it.stateIsFalse('LdapSettings.EnableSync'),\n                            )\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.GroupFilter',\n                        label: t('admin.ldap.groupFilterTitle'),\n                        label_default: 'Group Filter:',\n                        help_text: t('admin.ldap.groupFilterFilterDesc'),\n                        help_text_markdown: true,\n                        help_text_default: '(Optional) Enter an AD/LDAP filter to use when searching for group objects. Only the groups selected by the query will be available to Mattermost. From [User Management > Groups]({siteURL}/admin_console/user_management/groups), select which AD/LDAP groups should be linked and configured.',\n                        help_text_values: {siteURL: getSiteURL()},\n                        placeholder: t('admin.ldap.groupFilterEx'),\n                        placeholder_default: 'E.g.: \"(objectClass=group)\"',\n                        isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),\n                        isHidden: it.isnt(it.licensedForFeature('LDAPGroups'))\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.GroupDisplayNameAttribute',\n                        label: t('admin.ldap.groupDisplayNameAttributeTitle'),\n                        label_default: 'Group Display Name Attribute:',\n                        help_text: t('admin.ldap.groupDisplayNameAttributeDesc'),\n                        help_text_default: 'The attribute in the AD/LDAP server used to populate the group display names.',\n                        placeholder: t('admin.ldap.groupDisplayNameAttributeEx'),\n                        placeholder_default: 'E.g.: \"cn\"',\n                        isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),\n                        isHidden: it.isnt(it.licensedForFeature('LDAPGroups'))\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.GroupIdAttribute',\n                        label: t('admin.ldap.groupIdAttributeTitle'),\n                        label_default: 'Group ID Attribute:',\n                        help_text: t('admin.ldap.groupIdAttributeDesc'),\n                        help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier for Groups. This should be a AD/LDAP attribute with a value that does not change such as `entryUUID` for LDAP or `objectGUID` for Active Directory.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.ldap.groupIdAttributeEx'),\n                        placeholder_default: 'E.g.: \"objectGUID\" or \"entryUUID\"',\n                        isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),\n                        isHidden: it.isnt(it.licensedForFeature('LDAPGroups'))\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.FirstNameAttribute',\n                        label: t('admin.ldap.firstnameAttrTitle'),\n                        label_default: 'First Name Attribute:',\n                        placeholder: t('admin.ldap.firstnameAttrEx'),\n                        placeholder_default: 'E.g.: \"givenName\"',\n                        help_text: t('admin.ldap.firstnameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the first name of users in Mattermost. When set, users cannot edit their first name, since it is synchronized with the LDAP server. When left blank, users can set their first name in Account Settings.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.LastNameAttribute',\n                        label: t('admin.ldap.lastnameAttrTitle'),\n                        label_default: 'Last Name Attribute:',\n                        placeholder: t('admin.ldap.lastnameAttrEx'),\n                        placeholder_default: 'E.g.: \"sn\"',\n                        help_text: t('admin.ldap.lastnameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the last name of users in Mattermost. When set, users cannot edit their last name, since it is synchronized with the LDAP server. When left blank, users can set their last name in Account Settings.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.NicknameAttribute',\n                        label: t('admin.ldap.nicknameAttrTitle'),\n                        label_default: 'Nickname Attribute:',\n                        placeholder: t('admin.ldap.nicknameAttrEx'),\n                        placeholder_default: 'E.g.: \"nickname\"',\n                        help_text: t('admin.ldap.nicknameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the nickname of users in Mattermost. When set, users cannot edit their nickname, since it is synchronized with the LDAP server. When left blank, users can set their nickname in Account Settings.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.PositionAttribute',\n                        label: t('admin.ldap.positionAttrTitle'),\n                        label_default: 'Position Attribute:',\n                        placeholder: t('admin.ldap.positionAttrEx'),\n                        placeholder_default: 'E.g.: \"title\"',\n                        help_text: t('admin.ldap.positionAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the AD/LDAP server used to populate the position field in Mattermost. When set, users cannot edit their position, since it is synchronized with the LDAP server. When left blank, users can set their position in Account Settings.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.EmailAttribute',\n                        label: t('admin.ldap.emailAttrTitle'),\n                        label_default: 'Email Attribute:',\n                        placeholder: t('admin.ldap.emailAttrEx'),\n                        placeholder_default: 'E.g.: \"mail\" or \"userPrincipalName\"',\n                        help_text: t('admin.ldap.emailAttrDesc'),\n                        help_text_default: 'The attribute in the AD/LDAP server used to populate the email address field in Mattermost.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.UsernameAttribute',\n                        label: t('admin.ldap.usernameAttrTitle'),\n                        label_default: 'Username Attribute:',\n                        placeholder: t('admin.ldap.usernameAttrEx'),\n                        placeholder_default: 'E.g.: \"sAMAccountName\"',\n                        help_text: t('admin.ldap.usernameAttrDesc'),\n                        help_text_default: 'The attribute in the AD/LDAP server used to populate the username field in Mattermost. This may be the same as the Login ID Attribute.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.IdAttribute',\n                        label: t('admin.ldap.idAttrTitle'),\n                        label_default: 'ID Attribute: ',\n                        placeholder: t('admin.ldap.idAttrEx'),\n                        placeholder_default: 'E.g.: \"objectGUID\" or \"entryUUID\"',\n                        help_text: t('admin.ldap.idAttrDesc'),\n                        help_text_markdown: true,\n                        help_text_default: 'The attribute in the AD/LDAP server used as a unique identifier in Mattermost. It should be an AD/LDAP attribute with a value that does not change such as `entryUUID` for LDAP or `objectGUID` for Active Directory. If a user\\'s ID Attribute changes, it will create a new Mattermost account unassociated with their old one.\\n \\nIf you need to change this field after users have already logged in, use the [mattermost ldap idmigrate](!https://about.mattermost.com/default-mattermost-ldap-idmigrate) CLI tool.',\n                        isDisabled: it.both(\n                            it.stateEquals('LdapSettings.Enable', false),\n                            it.stateEquals('LdapSettings.EnableSync', false),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.LoginIdAttribute',\n                        label: t('admin.ldap.loginAttrTitle'),\n                        label_default: 'Login ID Attribute: ',\n                        placeholder: t('admin.ldap.loginIdAttrEx'),\n                        placeholder_default: 'E.g.: \"sAMAccountName\"',\n                        help_text: t('admin.ldap.loginAttrDesc'),\n                        help_text_markdown: true,\n                        help_text_default: 'The attribute in the AD/LDAP server used to log in to Mattermost. Normally this attribute is the same as the \"Username Attribute\" field above.\\n \\nIf your team typically uses domain/username to log in to other services with AD/LDAP, you may enter domain/username in this field to maintain consistency between sites.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.LoginFieldName',\n                        label: t('admin.ldap.loginNameTitle'),\n                        label_default: 'Sign-in Field Default Text:',\n                        placeholder: t('admin.ldap.loginNameEx'),\n                        placeholder_default: 'E.g.: \"AD/LDAP Username\"',\n                        help_text: t('admin.ldap.loginNameDesc'),\n                        help_text_default: 'The placeholder text that appears in the login field on the login page. Defaults to \"AD/LDAP Username\".',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'LdapSettings.SyncIntervalMinutes',\n                        label: t('admin.ldap.syncIntervalTitle'),\n                        label_default: 'Synchronization Interval (minutes):',\n                        help_text: t('admin.ldap.syncIntervalHelpText'),\n                        help_text_default: 'AD/LDAP Synchronization updates Mattermost user information to reflect updates on the AD/LDAP server. For example, when a user\\'s name changes on the AD/LDAP server, the change updates in Mattermost when synchronization is performed. Accounts removed from or disabled in the AD/LDAP server have their Mattermost accounts set to \"Inactive\" and have their account sessions revoked. Mattermost performs synchronization on the interval entered. For example, if 60 is entered, Mattermost synchronizes every 60 minutes.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'LdapSettings.MaxPageSize',\n                        label: t('admin.ldap.maxPageSizeTitle'),\n                        label_default: 'Maximum Page Size:',\n                        placeholder: t('admin.ldap.maxPageSizeEx'),\n                        placeholder_default: 'E.g.: \"2000\"',\n                        help_text: t('admin.ldap.maxPageSizeHelpText'),\n                        help_text_default: 'The maximum number of users the Mattermost server will request from the AD/LDAP server at one time. 0 is unlimited.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'LdapSettings.QueryTimeout',\n                        label: t('admin.ldap.queryTitle'),\n                        label_default: 'Query Timeout (seconds):',\n                        placeholder: t('admin.ldap.queryEx'),\n                        placeholder_default: 'E.g.: \"60\"',\n                        help_text: t('admin.ldap.queryDesc'),\n                        help_text_default: 'The timeout value for queries to the AD/LDAP server. Increase if you are getting timeout errors caused by a slow AD/LDAP server.',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        action: ldapTest,\n                        key: 'LdapSettings.LdapTest',\n                        label: t('admin.ldap.ldap_test_button'),\n                        label_default: 'AD/LDAP Test',\n                        help_text: t('admin.ldap.testHelpText'),\n                        help_text_markdown: true,\n                        help_text_default: 'Tests if the Mattermost server can connect to the AD/LDAP server specified. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                        error_message: t('admin.ldap.testFailure'),\n                        error_message_default: 'AD/LDAP Test Failure: {error}',\n                        success_message: t('admin.ldap.testSuccess'),\n                        success_message_default: 'AD/LDAP Test Successful',\n                        isDisabled: it.both(\n                            it.stateIsFalse('LdapSettings.Enable'),\n                            it.stateIsFalse('LdapSettings.EnableSync'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_JOBSTABLE,\n                        job_type: Constants.JobTypes.LDAP_SYNC,\n                        label: t('admin.ldap.sync_button'),\n                        label_default: 'AD/LDAP Synchronize Now',\n                        help_text: t('admin.ldap.syncNowHelpText'),\n                        help_text_markdown: true,\n                        help_text_default: 'Initiates an AD/LDAP synchronization immediately. See the table below for status of each synchronization. Please review \"System Console > Logs\" and [documentation](!https://mattermost.com/default-ldap-docs) to troubleshoot errors.',\n                        isDisabled: it.stateIsFalse('LdapSettings.EnableSync'),\n                        render_job: (job) => {\n                            let ldapUsers = 0;\n                            let deleteCount = 0;\n                            let updateCount = 0;\n                            let linkedLdapGroupsCount; // Deprecated.\n                            let totalLdapGroupsCount = 0;\n                            let groupDeleteCount = 0;\n                            let groupMemberDeleteCount = 0;\n                            let groupMemberAddCount = 0;\n\n                            if (job && job.data) {\n                                if (job.data.ldap_users_count && job.data.ldap_users_count.length > 0) {\n                                    ldapUsers = job.data.ldap_users_count;\n                                }\n\n                                if (job.data.delete_count && job.data.delete_count.length > 0) {\n                                    deleteCount = job.data.delete_count;\n                                }\n\n                                if (job.data.update_count && job.data.update_count.length > 0) {\n                                    updateCount = job.data.update_count;\n                                }\n\n                                // Deprecated groups count representing the number of linked LDAP groups.\n                                if (job.data.ldap_groups_count) {\n                                    linkedLdapGroupsCount = job.data.ldap_groups_count;\n                                }\n\n                                // Groups count representing the total number of LDAP groups available based on\n                                // the configured based DN and groups filter.\n                                if (job.data.total_ldap_groups_count) {\n                                    totalLdapGroupsCount = job.data.total_ldap_groups_count;\n                                }\n\n                                if (job.data.group_delete_count) {\n                                    groupDeleteCount = job.data.group_delete_count;\n                                }\n\n                                if (job.data.group_member_delete_count) {\n                                    groupMemberDeleteCount = job.data.group_member_delete_count;\n                                }\n\n                                if (job.data.group_member_add_count) {\n                                    groupMemberAddCount = job.data.group_member_add_count;\n                                }\n                            }\n\n                            return (\n                                <span>\n                                    <FormattedMessage\n                                        id={linkedLdapGroupsCount ? 'admin.ldap.jobExtraInfo' : 'admin.ldap.jobExtraInfoTotal'}\n                                        defaultMessage={linkedLdapGroupsCount ? 'Scanned {ldapUsers, number} LDAP users and {ldapGroups, number} linked groups.' : 'Scanned {ldapUsers, number} LDAP users and {ldapGroups, number} groups.'}\n                                        values={{\n                                            ldapUsers,\n                                            ldapGroups: linkedLdapGroupsCount || totalLdapGroupsCount, // Show the old count for jobs records containing the old JSON key.\n                                        }}\n                                    />\n                                    <ul>\n                                        {updateCount > 0 &&\n                                            <li>\n                                                <FormattedMessage\n                                                    id='admin.ldap.jobExtraInfo.updatedUsers'\n                                                    defaultMessage='Updated {updateCount, number} users.'\n                                                    values={{\n                                                        updateCount,\n                                                    }}\n                                                />\n                                            </li>\n                                        }\n                                        {deleteCount > 0 &&\n                                            <li>\n                                                <FormattedMessage\n                                                    id='admin.ldap.jobExtraInfo.deactivatedUsers'\n                                                    defaultMessage='Deactivated {deleteCount, number} users.'\n                                                    values={{\n                                                        deleteCount,\n                                                    }}\n                                                />\n                                            </li>\n                                        }\n                                        {groupDeleteCount > 0 &&\n                                            <li>\n                                                <FormattedMessage\n                                                    id='admin.ldap.jobExtraInfo.deletedGroups'\n                                                    defaultMessage='Deleted {groupDeleteCount, number} groups.'\n                                                    values={{\n                                                        groupDeleteCount,\n                                                    }}\n                                                />\n                                            </li>\n                                        }\n                                        {groupMemberDeleteCount > 0 &&\n                                            <li>\n                                                <FormattedMessage\n                                                    id='admin.ldap.jobExtraInfo.deletedGroupMembers'\n                                                    defaultMessage='Deleted {groupMemberDeleteCount, number} group members.'\n                                                    values={{\n                                                        groupMemberDeleteCount,\n                                                    }}\n                                                />\n                                            </li>\n                                        }\n                                        {groupMemberAddCount > 0 &&\n                                            <li>\n                                                <FormattedMessage\n                                                    id='admin.ldap.jobExtraInfo.addedGroupMembers'\n                                                    defaultMessage='Added {groupMemberAddCount, number} group members.'\n                                                    values={{\n                                                        groupMemberAddCount,\n                                                    }}\n                                                />\n                                            </li>\n                                        }\n                                    </ul>\n                                </span>\n                            );\n                        },\n                    },\n                ],\n            },\n        },\n        saml: {\n            url: 'authentication/saml',\n            title: t('admin.sidebar.saml'),\n            title_default: 'SAML 2.0',\n            isHidden: it.isnt(it.licensedForFeature('SAML')),\n            schema: {\n                id: 'SamlSettings',\n                name: t('admin.authentication.saml'),\n                name_default: 'SAML 2.0',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.Enable',\n                        label: t('admin.saml.enableTitle'),\n                        label_default: 'Enable Login With SAML 2.0:',\n                        help_text: t('admin.saml.enableDescription'),\n                        help_text_default: 'When true, Mattermost allows login using SAML 2.0. Please see [documentation](!http://docs.mattermost.com/deployment/sso-saml.html) to learn more about configuring SAML for Mattermost.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.EnableSyncWithLdap',\n                        label: t('admin.saml.enableSyncWithLdapTitle'),\n                        label_default: 'Enable Synchronizing SAML Accounts With AD/LDAP:',\n                        help_text: t('admin.saml.enableSyncWithLdapDescription'),\n                        help_text_default: 'When true, Mattermost periodically synchronizes SAML user attributes, including user deactivation and removal, from AD/LDAP. Enable and configure synchronization settings at **Authentication > AD/LDAP**. When false, user attributes are updated from SAML during user login. See [documentation](!https://about.mattermost.com/default-saml-ldap-sync) to learn more.',\n                        help_text_markdown: true,\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.EnableSyncWithLdapIncludeAuth',\n                        label: t('admin.saml.enableSyncWithLdapIncludeAuthTitle'),\n                        label_default: 'Override SAML bind data with AD/LDAP information:',\n                        help_text: t('admin.saml.enableSyncWithLdapIncludeAuthDescription'),\n                        help_text_default: 'When true, Mattermost will override the SAML ID attribute with the AD/LDAP ID attribute if configured or override the SAML Email attribute with the AD/LDAP Email attribute if SAML ID attribute is not present.  This will allow you automatically migrate users from Email binding to ID binding to prevent creation of new users when an email address changes for a user. Moving from true to false, will remove the override from happening.\\n \\n**Note:** SAML IDs must match the LDAP IDs to prevent disabling of user accounts.  Please review [documentation](!https://docs.mattermost.com/deployment/sso-saml-ldapsync.html) for more information.',\n                        help_text_markdown: true,\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateIsFalse('SamlSettings.EnableSyncWithLdap'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdpMetadataUrl',\n                        label: t('admin.saml.idpMetadataUrlTitle'),\n                        label_default: 'Identity Provider Metadata URL:',\n                        help_text: t('admin.saml.idpMetadataUrlDesc'),\n                        help_text_default: 'The Metadata URL for the Identity Provider you use for SAML requests',\n                        placeholder: t('admin.saml.idpMetadataUrlEx'),\n                        placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/saml/metadata\"',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BUTTON,\n                        key: 'getSamlMetadataFromIDPButton',\n                        action: getSamlMetadataFromIdp,\n                        label: t('admin.saml.getSamlMetadataFromIDPUrl'),\n                        label_default: 'Get SAML Metadata from IdP',\n                        loading: t('admin.saml.getSamlMetadataFromIDPFetching'),\n                        loading_default: 'Fetching...',\n                        error_message: t('admin.saml.getSamlMetadataFromIDPFail'),\n                        error_message_default: 'SAML Metadata URL did not connect and pull data successfully',\n                        success_message: t('admin.saml.getSamlMetadataFromIDPSuccess'),\n                        success_message_default: 'SAML Metadata retrieved successfully. Two fields below have been updated',\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateEquals('SamlSettings.IdpMetadataUrl', '')\n                        ),\n                        sourceUrlKey: 'SamlSettings.IdpMetadataUrl',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdpUrl',\n                        label: t('admin.saml.idpUrlTitle'),\n                        label_default: 'SAML SSO URL:',\n                        help_text: t('admin.saml.idpUrlDesc'),\n                        help_text_default: 'The URL where Mattermost sends a SAML request to start login sequence.',\n                        placeholder: t('admin.saml.idpUrlEx'),\n                        placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/SSO/Login\"',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                        setFromMetadataField: 'idp_url',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdpDescriptorUrl',\n                        label: t('admin.saml.idpDescriptorUrlTitle'),\n                        label_default: 'Identity Provider Issuer URL:',\n                        help_text: t('admin.saml.idpDescriptorUrlDesc'),\n                        help_text_default: 'The issuer URL for the Identity Provider you use for SAML requests.',\n                        placeholder: t('admin.saml.idpDescriptorUrlEx'),\n                        placeholder_default: 'E.g.: \"https://idp.example.org/SAML2/issuer\"',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                        setFromMetadataField: 'idp_descriptor_url',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                        key: 'SamlSettings.IdpCertificateFile',\n                        label: t('admin.saml.idpCertificateFileTitle'),\n                        label_default: 'Identity Provider Public Certificate:',\n                        help_text: t('admin.saml.idpCertificateFileDesc'),\n                        help_text_default: 'The public authentication certificate issued by your Identity Provider.',\n                        remove_help_text: t('admin.saml.idpCertificateFileRemoveDesc'),\n                        remove_help_text_default: 'Remove the public authentication certificate issued by your Identity Provider.',\n                        remove_button_text: t('admin.saml.remove.idp_certificate'),\n                        remove_button_text_default: 'Remove Identity Provider Certificate',\n                        removing_text: t('admin.saml.removing.certificate'),\n                        removing_text_default: 'Removing Certificate...',\n                        uploading_text: t('admin.saml.uploading.certificate'),\n                        uploading_text_default: 'Uploading Certificate...',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                        fileType: '.crt,.cer,.cert,.pem',\n                        upload_action: uploadIdpSamlCertificate,\n                        set_action: setSamlIdpCertificateFromMetadata,\n                        remove_action: removeIdpSamlCertificate,\n                        setFromMetadataField: 'idp_public_certificate',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.Verify',\n                        label: t('admin.saml.verifyTitle'),\n                        label_default: 'Verify Signature:',\n                        help_text: t('admin.saml.verifyDescription'),\n                        help_text_default: 'When false, Mattermost will not verify that the signature sent from a SAML Response matches the Service Provider Login URL. Disabling verification is not recommended for production environments.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.AssertionConsumerServiceURL',\n                        label: t('admin.saml.assertionConsumerServiceURLTitle'),\n                        label_default: 'Service Provider Login URL:',\n                        help_text: t('admin.saml.assertionConsumerServiceURLPopulatedDesc'),\n                        help_text_default: 'This field is also known as the Assertion Consumer Service URL.',\n                        placeholder: t('admin.saml.assertionConsumerServiceURLEx'),\n                        placeholder_default: 'E.g.: \"https://<your-mattermost-url>/login/sso/saml\"',\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateIsFalse('SamlSettings.Verify'),\n                        ),\n                        onConfigLoad: (value, config) => {\n                            const siteUrl = config.ServiceSettings.SiteURL;\n                            if (siteUrl.length > 0 && value.length === 0) {\n                                const addSlashIfNeeded = siteUrl[siteUrl.length - 1] === '/' ? '' : '/';\n                                return `${siteUrl}${addSlashIfNeeded}login/sso/saml`;\n                            }\n                            return value;\n                        },\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.Encrypt',\n                        label: t('admin.saml.encryptTitle'),\n                        label_default: 'Enable Encryption:',\n                        help_text: t('admin.saml.encryptDescription'),\n                        help_text_default: 'When false, Mattermost will not decrypt SAML Assertions encrypted with your Service Provider Public Certificate. Disabling encryption is not recommended for production environments.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                        key: 'SamlSettings.PrivateKeyFile',\n                        label: t('admin.saml.privateKeyFileTitle'),\n                        label_default: 'Service Provider Private Key:',\n                        help_text: t('admin.saml.privateKeyFileFileDesc'),\n                        help_text_default: 'The private key used to decrypt SAML Assertions from the Identity Provider.',\n                        remove_help_text: t('admin.saml.privateKeyFileFileRemoveDesc'),\n                        remove_help_text_default: 'Remove the private key used to decrypt SAML Assertions from the Identity Provider.',\n                        remove_button_text: t('admin.saml.remove.privKey'),\n                        remove_button_text_default: 'Remove Service Provider Private Key',\n                        removing_text: t('admin.saml.removing.privKey'),\n                        removing_text_default: 'Removing Private Key...',\n                        uploading_text: t('admin.saml.uploading.privateKey'),\n                        uploading_text_default: 'Uploading Private Key...',\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                        ),\n                        fileType: '.key',\n                        upload_action: uploadPrivateSamlCertificate,\n                        remove_action: removePrivateSamlCertificate,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_FILE_UPLOAD,\n                        key: 'SamlSettings.PublicCertificateFile',\n                        label: t('admin.saml.publicCertificateFileTitle'),\n                        label_default: 'Service Provider Public Certificate:',\n                        help_text: t('admin.saml.publicCertificateFileDesc'),\n                        help_text_default: 'The certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',\n                        remove_help_text: t('admin.saml.publicCertificateFileRemoveDesc'),\n                        remove_help_text_default: 'Remove the certificate used to generate the signature on a SAML request to the Identity Provider for a service provider initiated SAML login, when Mattermost is the Service Provider.',\n                        remove_button_text: t('admin.saml.remove.sp_certificate'),\n                        remove_button_text_default: 'Remove Service Provider Certificate',\n                        removing_text: t('admin.saml.removing.certificate'),\n                        removing_text_default: 'Removing Certificate...',\n                        uploading_text: t('admin.saml.uploading.certificate'),\n                        uploading_text_default: 'Uploading Certificate...',\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Enable'),\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                        ),\n                        fileType: '.crt,.cer',\n                        upload_action: uploadPublicSamlCertificate,\n                        remove_action: removePublicSamlCertificate,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.SignRequest',\n                        label: t('admin.saml.signRequestTitle'),\n                        label_default: 'Sign Request:',\n                        help_text: t('admin.saml.signRequestDescription'),\n                        help_text_default: 'When true, Mattermost will sign the SAML request using your private key. When false, Mattermost will not sign the SAML request.',\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                            it.stateIsFalse('SamlSettings.PrivateKeyFile'),\n                            it.stateIsFalse('SamlSettings.PublicCertificateFile')\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'SamlSettings.SignatureAlgorithm',\n                        label: t('admin.saml.signatureAlgorithmTitle'),\n                        label_default: 'Signature Algorithm',\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                            it.stateIsFalse('SamlSettings.SignRequest'),\n                        ),\n                        options: [\n                            {\n                                value: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA1,\n                                display_name: t('admin.saml.signatureAlgorithmDisplay.sha1'),\n                                display_name_default: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA1,\n                                help_text: t('admin.saml.signatureAlgorithmDescription.sha1'),\n                                help_text_default: 'Specify the Signature algorithm used to sign the request (RSAwithSHA1). Please see more information provided at http://www.w3.org/2000/09/xmldsig#rsa-sha1',\n                            },\n                            {\n                                value: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA256,\n                                display_name: t('admin.saml.signatureAlgorithmDisplay.sha256'),\n                                display_name_default: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA256,\n                                help_text: t('admin.saml.signatureAlgorithmDescription.sha256'),\n                                help_text_default: 'Specify the Signature algorithm used to sign the request (RSAwithSHA256). Please see more information provided at http://www.w3.org/2001/04/xmldsig-more#rsa-sha256 [section 6.4.2 RSA (PKCS#1 v1.5)]',\n                            },\n                            {\n                                value: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA512,\n                                display_name: t('admin.saml.signatureAlgorithmDisplay.sha512'),\n                                display_name_default: SAML_SETTINGS_SIGNATURE_ALGORITHM_SHA512,\n                                help_text: t('admin.saml.signatureAlgorithmDescription.sha512'),\n                                help_text_default: 'Specify the Signature algorithm used to sign the request (RSAwithSHA512). Please see more information provided at http://www.w3.org/2001/04/xmldsig-more#rsa-sha512',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'SamlSettings.CanonicalAlgorithm',\n                        label: t('admin.saml.canonicalAlgorithmTitle'),\n                        label_default: 'Canonicalization Algorithm',\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.Encrypt'),\n                            it.stateIsFalse('SamlSettings.SignRequest'),\n                        ),\n                        options: [\n                            {\n                                value: SAML_SETTINGS_CANONICAL_ALGORITHM_C14N,\n                                display_name: t('admin.saml.canonicalAlgorithmDisplay.n10'),\n                                display_name_default: 'Exclusive XML Canonicalization 1.0 (omit comments)',\n                                help_text: t('admin.saml.canonicalAlgorithmDescription.exc'),\n                                help_text_default: 'Specify the Canonicalization algorithm (Exclusive XML Canonicalization 1.0).  Please see more information provided at http://www.w3.org/2001/10/xml-exc-c14n#',\n                            },\n                            {\n                                value: SAML_SETTINGS_CANONICAL_ALGORITHM_C14N11,\n                                display_name: t('admin.saml.canonicalAlgorithmDisplay.n11'),\n                                display_name_default: 'Canonical XML 1.1 (omit comments)',\n                                help_text: t('admin.saml.canonicalAlgorithmDescription.c14'),\n                                help_text_default: 'Specify the Canonicalization algorithm (Canonical XML 1.1).  Please see more information provided at http://www.w3.org/2006/12/xml-c14n11',\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.EmailAttribute',\n                        label: t('admin.saml.emailAttrTitle'),\n                        label_default: 'Email Attribute:',\n                        placeholder: t('admin.saml.emailAttrEx'),\n                        placeholder_default: 'E.g.: \"Email\" or \"PrimaryEmail\"',\n                        help_text: t('admin.saml.emailAttrDesc'),\n                        help_text_default: 'The attribute in the SAML Assertion that will be used to populate the email addresses of users in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.UsernameAttribute',\n                        label: t('admin.saml.usernameAttrTitle'),\n                        label_default: 'Username Attribute:',\n                        placeholder: t('admin.saml.usernameAttrEx'),\n                        placeholder_default: 'E.g.: \"Username\"',\n                        help_text: t('admin.saml.usernameAttrDesc'),\n                        help_text_default: 'The attribute in the SAML Assertion that will be used to populate the username field in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.IdAttribute',\n                        label: t('admin.saml.idAttrTitle'),\n                        label_default: 'Id Attribute:',\n                        placeholder: t('admin.saml.idAttrEx'),\n                        placeholder_default: 'E.g.: \"Id\"',\n                        help_text: t('admin.saml.idAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to bind users from SAML to users in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.GuestAttribute',\n                        label: t('admin.saml.guestAttrTitle'),\n                        label_default: 'Guest Attribute:',\n                        placeholder: t('admin.saml.guestAttrEx'),\n                        placeholder_default: 'E.g.: \"usertype=Guest\" or \"isGuest=true\"',\n                        help_text: t('admin.saml.guestAttrDesc'),\n                        help_text_default: '(Optional) Requires Guest Access to be enabled before being applied. The attribute in the SAML Assertion that will be used to apply a guest role to users in Mattermost. Guests are prevented from accessing teams or channels upon logging in until they are assigned a team and at least one channel.\\n \\nNote: If this attribute is removed/changed from your guest user in SAML and the user is still active, they will not be promoted to a member and will retain their Guest role. Guests can be promoted in **System Console > User Management**.\\n \\n \\nExisting members that are identified by this attribute as a guest will be demoted from a member to a guest when they are asked to login next. The next login is based upon Session lengths set in **System Console > Session Lengths**. It is highly recommend to manually demote users to guests in **System Console > User Management ** to ensure access is restricted immediately.',\n                        help_text_markdown: true,\n                        isDisabled: it.either(\n                            it.configIsFalse('GuestAccountsSettings', 'Enable'),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'SamlSettings.EnableAdminAttribute',\n                        label: t('admin.saml.enableAdminAttrTitle'),\n                        label_default: 'Enable Admin Attribute:',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.AdminAttribute',\n                        label: t('admin.saml.adminAttrTitle'),\n                        label_default: 'Admin Attribute:',\n                        placeholder: t('admin.saml.adminAttrEx'),\n                        placeholder_default: 'E.g.: \"usertype=Admin\" or \"isAdmin=true\"',\n                        help_text: t('admin.saml.adminAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion for designating System Admins. The users selected by the query will have access to your Mattermost server as System Admins. By default, System Admins have complete access to the Mattermost System Console.\\n \\nExisting members that are identified by this attribute will be promoted from member to System Admin upon next login. The next login is based upon Session lengths set in **System Console > Session Lengths.** It is highly recommend to manually demote users to members in **System Console > User Management** to ensure access is restricted immediately.\\n \\nNote: If this filter is removed/changed, System Admins that were promoted via this filter will be demoted to members and will not retain access to the System Console. When this filter is not in use, System Admins can be manually promoted/demoted in **System Console > User Management**.',\n                        help_text_markdown: true,\n                        isDisabled: it.either(\n                            it.stateIsFalse('SamlSettings.EnableAdminAttribute'),\n                            it.stateIsFalse('SamlSettings.Enable'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.FirstNameAttribute',\n                        label: t('admin.saml.firstnameAttrTitle'),\n                        label_default: 'First Name Attribute:',\n                        placeholder: t('admin.saml.firstnameAttrEx'),\n                        placeholder_default: 'E.g.: \"FirstName\"',\n                        help_text: t('admin.saml.firstnameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the first name of users in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LastNameAttribute',\n                        label: t('admin.saml.lastnameAttrTitle'),\n                        label_default: 'Last Name Attribute:',\n                        placeholder: t('admin.saml.lastnameAttrEx'),\n                        placeholder_default: 'E.g.: \"LastName\"',\n                        help_text: t('admin.saml.lastnameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the last name of users in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.NicknameAttribute',\n                        label: t('admin.saml.nicknameAttrTitle'),\n                        label_default: 'Nickname Attribute:',\n                        placeholder: t('admin.saml.nicknameAttrEx'),\n                        placeholder_default: 'E.g.: \"Nickname\"',\n                        help_text: t('admin.saml.nicknameAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the nickname of users in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.PositionAttribute',\n                        label: t('admin.saml.positionAttrTitle'),\n                        label_default: 'Position Attribute:',\n                        placeholder: t('admin.saml.positionAttrEx'),\n                        placeholder_default: 'E.g.: \"Role\"',\n                        help_text: t('admin.saml.positionAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the position of users in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LocaleAttribute',\n                        label: t('admin.saml.localeAttrTitle'),\n                        label_default: 'Preferred Language Attribute:',\n                        placeholder: t('admin.saml.localeAttrEx'),\n                        placeholder_default: 'E.g.: \"Locale\" or \"PrimaryLanguage\"',\n                        help_text: t('admin.saml.localeAttrDesc'),\n                        help_text_default: '(Optional) The attribute in the SAML Assertion that will be used to populate the language of users in Mattermost.',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LoginButtonText',\n                        label: t('admin.saml.loginButtonTextTitle'),\n                        label_default: 'Login Button Text:',\n                        placeholder: t('admin.saml.loginButtonTextEx'),\n                        placeholder_default: 'E.g.: \"OKTA\"',\n                        help_text: t('admin.saml.loginButtonTextDesc'),\n                        help_text_default: '(Optional) The text that appears in the login button on the login page. Defaults to \"SAML\".',\n                        isDisabled: it.stateIsFalse('SamlSettings.Enable'),\n                    },\n                ],\n            },\n        },\n        gitlab: {\n            url: 'authentication/gitlab',\n            title: t('admin.sidebar.gitlab'),\n            title_default: 'GitLab',\n            isHidden: it.licensed,\n            schema: {\n                id: 'GitLabSettings',\n                name: t('admin.authentication.gitlab'),\n                name_default: 'GitLab',\n                onConfigLoad: (config) => {\n                    const newState = {};\n                    newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n                    return newState;\n                },\n                onConfigSave: (config) => {\n                    const newConfig = {...config};\n                    newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n                    return newConfig;\n                },\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GitLabSettings.Enable',\n                        label: t('admin.gitlab.enableTitle'),\n                        label_default: 'Enable authentication with GitLab: ',\n                        help_text: t('admin.gitlab.enableDescription'),\n                        help_text_default: 'When true, Mattermost allows team creation and account signup using GitLab OAuth.\\n \\n1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Id',\n                        label: t('admin.gitlab.clientIdTitle'),\n                        label_default: 'Application ID:',\n                        help_text: t('admin.gitlab.clientIdDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientIdExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isDisabled: it.stateIsFalse('GitLabSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Secret',\n                        label: t('admin.gitlab.clientSecretTitle'),\n                        label_default: 'Application Secret Key:',\n                        help_text: t('admin.gitlab.clientSecretDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isDisabled: it.stateIsFalse('GitLabSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Url',\n                        label: t('admin.gitlab.siteUrl'),\n                        label_default: 'GitLab Site URL:',\n                        help_text: t('admin.gitlab.siteUrlDescription'),\n                        help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                        placeholder: t('admin.gitlab.siteUrlExample'),\n                        placeholder_default: 'E.g.: https://',\n                        isDisabled: it.stateIsFalse('GitLabSettings.Enable'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.UserApiEndpoint',\n                        label: t('admin.gitlab.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.AuthEndpoint',\n                        label: t('admin.gitlab.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.TokenEndpoint',\n                        label: t('admin.gitlab.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                    },\n                ],\n            },\n        },\n        oauth: {\n            url: 'authentication/oauth',\n            title: t('admin.sidebar.oauth'),\n            title_default: 'OAuth 2.0',\n            isHidden: it.isnt(it.licensed),\n            schema: {\n                id: 'OAuthSettings',\n                name: t('admin.authentication.oauth'),\n                name_default: 'OAuth 2.0',\n                onConfigLoad: (config) => {\n                    const newState = {};\n                    if (config.GitLabSettings && config.GitLabSettings.Enable) {\n                        newState.oauthType = Constants.GITLAB_SERVICE;\n                    }\n                    if (config.Office365Settings && config.Office365Settings.Enable) {\n                        newState.oauthType = Constants.OFFICE365_SERVICE;\n                    }\n                    if (config.GoogleSettings && config.GoogleSettings.Enable) {\n                        newState.oauthType = Constants.GOOGLE_SERVICE;\n                    }\n\n                    newState['GitLabSettings.Url'] = config.GitLabSettings.UserApiEndpoint.replace('/api/v4/user', '');\n\n                    return newState;\n                },\n                onConfigSave: (config) => {\n                    const newConfig = {...config};\n                    newConfig.GitLabSettings = config.GitLabSettings || {};\n                    newConfig.Office365Settings = config.Office365Settings || {};\n                    newConfig.GoogleSettings = config.GoogleSettings || {};\n\n                    newConfig.GitLabSettings.Enable = false;\n                    newConfig.Office365Settings.Enable = false;\n                    newConfig.GoogleSettings.Enable = false;\n                    newConfig.GitLabSettings.UserApiEndpoint = config.GitLabSettings.Url.replace(/\\/$/, '') + '/api/v4/user';\n\n                    if (config.oauthType === Constants.GITLAB_SERVICE) {\n                        newConfig.GitLabSettings.Enable = true;\n                    }\n                    if (config.oauthType === Constants.OFFICE365_SERVICE) {\n                        newConfig.Office365Settings.Enable = true;\n                    }\n                    if (config.oauthType === Constants.GOOGLE_SERVICE) {\n                        newConfig.GoogleSettings.Enable = true;\n                    }\n                    delete newConfig.oauthType;\n                    return newConfig;\n                },\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'oauthType',\n                        label: t('admin.oauth.select'),\n                        label_default: 'Select OAuth 2.0 Service Provider:',\n                        options: [\n                            {\n                                value: 'off',\n                                display_name: t('admin.oauth.off'),\n                                display_name_default: 'Do not allow sign-in via an OAuth 2.0 provider.',\n                            },\n                            {\n                                value: Constants.GITLAB_SERVICE,\n                                display_name: t('admin.oauth.gitlab'),\n                                display_name_default: 'GitLab',\n                                help_text: t('admin.gitlab.EnableMarkdownDesc'),\n                                help_text_default: '1. Log in to your GitLab account and go to Profile Settings -> Applications.\\n2. Enter Redirect URIs \"<your-mattermost-url>/login/gitlab/complete\" (example: http://localhost:8065/login/gitlab/complete) and \"<your-mattermost-url>/signup/gitlab/complete\".\\n3. Then use \"Application Secret Key\" and \"Application ID\" fields from GitLab to complete the options below.\\n4. Complete the Endpoint URLs below.',\n                                help_text_markdown: true,\n                            },\n                            {\n                                value: Constants.GOOGLE_SERVICE,\n                                display_name: t('admin.oauth.google'),\n                                display_name_default: 'Google Apps',\n                                isHidden: it.isnt(it.licensedForFeature('GoogleOAuth')),\n                                help_text: t('admin.google.EnableMarkdownDesc'),\n                                help_text_default: '1. [Log in](!https://accounts.google.com/login) to your Google account.\\n2. Go to [https://console.developers.google.com](!https://console.developers.google.com), click **Credentials** in the left hand sidebar and enter \"Mattermost - your-company-name\" as the **Project Name**, then click **Create**.\\n3. Click the **OAuth consent screen** header and enter \"Mattermost\" as the **Product name shown to users**, then click **Save**.\\n4. Under the **Credentials** header, click **Create credentials**, choose **OAuth client ID** and select **Web Application**.\\n5. Under **Restrictions** and **Authorized redirect URIs** enter **your-mattermost-url/signup/google/complete** (example: http://localhost:8065/signup/google/complete). Click **Create**.\\n6. Paste the **Client ID** and **Client Secret** to the fields below, then click **Save**.\\n7. Go to the [Google People API](!https://console.developers.google.com/apis/library/people.googleapis.com) and click *Enable*.\\n8. Finally, go to [Google+ API](!https://console.developers.google.com/apis/api/plus/overview) and click *Enable*. This setting might take a few minutes to propagate.',\n                                help_text_markdown: true,\n                            },\n                            {\n                                value: Constants.OFFICE365_SERVICE,\n                                display_name: t('admin.oauth.office365'),\n                                display_name_default: 'Office 365',\n                                isHidden: it.isnt(it.licensedForFeature('Office365OAuth')),\n                                help_text: t('admin.office365.EnableMarkdownDesc'),\n                                help_text_default: '1. [Log in](!https://login.microsoftonline.com/) to your Microsoft or Office 365 account. Make sure it`s the account on the same [tenant](!https://msdn.microsoft.com/en-us/library/azure/jj573650.aspx#Anchor_0) that you would like users to log in with.\\n2. Go to [https://apps.dev.microsoft.com](!https://apps.dev.microsoft.com), click **Go to app list** > **Add an app** and use \"Mattermost - your-company-name\" as the **Application Name**.\\n3. Under **Application Secrets**, click **Generate New Password** and paste it to the **Application Secret Password** field below.\\n4. Under **Platforms**, click **Add Platform**, choose **Web** and enter **your-mattermost-url/signup/office365/complete** (example: http://localhost:8065/signup/office365/complete) under **Redirect URIs**. Also uncheck **Allow Implicit Flow**.\\n5. Finally, click **Save** and then paste the **Application ID** below.',\n                                help_text_markdown: true,\n                            },\n                        ],\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Id',\n                        label: t('admin.gitlab.clientIdTitle'),\n                        label_default: 'Application ID:',\n                        help_text: t('admin.gitlab.clientIdDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientIdExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Secret',\n                        label: t('admin.gitlab.clientSecretTitle'),\n                        label_default: 'Application Secret Key:',\n                        help_text: t('admin.gitlab.clientSecretDescription'),\n                        help_text_default: 'Obtain this value via the instructions above for logging into GitLab.',\n                        placeholder: t('admin.gitlab.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"jcuS8PuvcpGhpgHhlcpT1Mx42pnqMxQY\"',\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.Url',\n                        label: t('admin.gitlab.siteUrl'),\n                        label_default: 'GitLab Site URL:',\n                        help_text: t('admin.gitlab.siteUrlDescription'),\n                        help_text_default: 'Enter the URL of your GitLab instance, e.g. https://example.com:3000. If your GitLab instance is not set up with SSL, start the URL with http:// instead of https://.',\n                        placeholder: t('admin.gitlab.siteUrlExample'),\n                        placeholder_default: 'E.g.: https://',\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.UserApiEndpoint',\n                        label: t('admin.gitlab.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/api/v4/user';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.AuthEndpoint',\n                        label: t('admin.gitlab.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/authorize';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GitLabSettings.TokenEndpoint',\n                        label: t('admin.gitlab.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: (value, config, state) => {\n                            if (state['GitLabSettings.Url']) {\n                                return state['GitLabSettings.Url'].replace(/\\/$/, '') + '/oauth/token';\n                            }\n                            return '';\n                        },\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'gitlab')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.Id',\n                        label: t('admin.google.clientIdTitle'),\n                        label_default: 'Client ID:',\n                        help_text: t('admin.google.clientIdDescription'),\n                        help_text_default: 'The Client ID you received when registering your application with Google.',\n                        placeholder: t('admin.google.clientIdExample'),\n                        placeholder_default: 'E.g.: \"7602141235235-url0fhs1mayfasbmop5qlfns8dh4.apps.googleusercontent.com\"',\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.Secret',\n                        label: t('admin.google.clientSecretTitle'),\n                        label_default: 'Client Secret:',\n                        help_text: t('admin.google.clientSecretDescription'),\n                        help_text_default: 'The Client Secret you received when registering your application with Google.',\n                        placeholder: t('admin.google.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"H8sz0Az-dDs2p15-7QzD231\"',\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.UserApiEndpoint',\n                        label: t('admin.google.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: () => 'https://people.googleapis.com/v1/people/me?personFields=names,emailAddresses,nicknames,metadata',\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.AuthEndpoint',\n                        label: t('admin.google.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: () => 'https://accounts.google.com/o/oauth2/v2/auth',\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GoogleSettings.TokenEndpoint',\n                        label: t('admin.google.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: () => 'https://www.googleapis.com/oauth2/v4/token',\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'google')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.Id',\n                        label: t('admin.office365.clientIdTitle'),\n                        label_default: 'Application ID:',\n                        help_text: t('admin.office365.clientIdDescription'),\n                        help_text_default: 'The Application/Client ID you received when registering your application with Microsoft.',\n                        placeholder: t('admin.office365.clientIdExample'),\n                        placeholder_default: 'E.g.: \"adf3sfa2-ag3f-sn4n-ids0-sh1hdax192qq\"',\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'office365')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.Secret',\n                        label: t('admin.office365.clientSecretTitle'),\n                        label_default: 'Application Secret Password:',\n                        help_text: t('admin.office365.clientSecretDescription'),\n                        help_text_default: 'The Application Secret Password you generated when registering your application with Microsoft.',\n                        placeholder: t('admin.office365.clientSecretExample'),\n                        placeholder_default: 'E.g.: \"shAieM47sNBfgl20f8ci294\"',\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'office365')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.UserApiEndpoint',\n                        label: t('admin.office365.userTitle'),\n                        label_default: 'User API Endpoint:',\n                        dynamic_value: () => 'https://graph.microsoft.com/v1.0/me',\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'office365')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.AuthEndpoint',\n                        label: t('admin.office365.authTitle'),\n                        label_default: 'Auth Endpoint:',\n                        dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/authorize',\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'office365')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'Office365Settings.TokenEndpoint',\n                        label: t('admin.office365.tokenTitle'),\n                        label_default: 'Token Endpoint:',\n                        dynamic_value: () => 'https://login.microsoftonline.com/common/oauth2/v2.0/token',\n                        isDisabled: true,\n                        isHidden: it.isnt(it.stateEquals('oauthType', 'office365')),\n                    },\n                ],\n            },\n        },\n        guest_access: {\n            url: 'authentication/guest_access',\n            title: t('admin.sidebar.guest_access'),\n            title_default: 'Guest Access (Beta)',\n            isHidden: it.isnt(it.licensed),\n            schema: {\n                id: 'GuestAccountsSettings',\n                name: t('admin.authentication.guest_access'),\n                name_default: 'Guest Access (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_CUSTOM,\n                        component: CustomEnableDisableGuestAccountsSetting,\n                        key: 'GuestAccountsSettings.Enable',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'GuestAccountsSettings.RestrictCreationToDomains',\n                        label: t('admin.guest_access.whitelistedDomainsTitle'),\n                        label_default: 'Whitelisted Guest Domains:',\n                        help_text: t('admin.guest_access.whitelistedDomainsDescription'),\n                        help_text_default: '(Optional) Guest accounts can be created at the system level from this list of allowed guest domains.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.guest_access.whitelistedDomainsExample'),\n                        placeholder_default: 'E.g.: \"company.com, othercorp.org\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GuestAccountsSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.guest_access.mfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication: ',\n                        help_text: t('admin.guest_access.mfaDescriptionMFANotEnabled'),\n                        help_text_default: '[Multi-factor authentication](./mfa) is currently not enabled.',\n                        help_text_markdown: true,\n                        isDisabled: () => true,\n                        isHidden: it.configIsTrue('ServiceSettings', 'EnableMultifactorAuthentication'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GuestAccountsSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.guest_access.mfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication: ',\n                        help_text: t('admin.guest_access.mfaDescriptionMFANotEnforced'),\n                        help_text_default: '[Multi-factor authentication](./mfa) is currently not enforced.',\n                        help_text_markdown: true,\n                        isDisabled: () => true,\n                        isHidden: it.either(\n                            it.configIsFalse('ServiceSettings', 'EnableMultifactorAuthentication'),\n                            it.configIsTrue('ServiceSettings', 'EnforceMultifactorAuthentication'),\n                        ),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'GuestAccountsSettings.EnforceMultifactorAuthentication',\n                        label: t('admin.guest_access.mfaTitle'),\n                        label_default: 'Enforce Multi-factor Authentication: ',\n                        help_text: t('admin.guest_access.mfaDescription'),\n                        help_text_default: 'When true, [multi-factor authentication](!https://docs.mattermost.com/deployment/auth.html) for guests is required for login. New guest users will be required to configure MFA on signup. Logged in guest users without MFA configured are redirected to the MFA setup page until configuration is complete.\\n \\nIf your system has guest users with login methods other than AD/LDAP and email, MFA must be enforced with the authentication provider outside of Mattermost.',\n                        help_text_markdown: true,\n                        isHidden: it.either(\n                            it.configIsFalse('ServiceSettings', 'EnableMultifactorAuthentication'),\n                            it.configIsFalse('ServiceSettings', 'EnforceMultifactorAuthentication'),\n                        ),\n                    },\n                ],\n            },\n        },\n    },\n    plugins: {\n        icon: 'fa-plug',\n        sectionTitle: t('admin.sidebar.plugins'),\n        sectionTitleDefault: 'Plugins (Beta)',\n        id: 'plugins',\n        plugin_management: {\n            url: 'plugins/plugin_management',\n            title: t('admin.plugins.pluginManagement'),\n            title_default: 'Plugin Management',\n            searchableStrings: [\n                'admin.plugin.management.title',\n                'admin.plugins.settings.enable',\n                'admin.plugins.settings.enableDesc',\n                'admin.plugin.uploadTitle',\n                'admin.plugin.installedTitle',\n                'admin.plugin.installedDesc',\n                'admin.plugin.uploadDesc',\n                'admin.plugin.uploadDisabledDesc',\n                'admin.plugins.settings.enableMarketplace',\n                'admin.plugins.settings.enableMarketplaceDesc',\n                'admin.plugins.settings.enableRemoteMarketplace',\n                'admin.plugins.settings.enableRemoteMarketplaceDesc',\n                'admin.plugins.settings.automaticPrepackagedPlugins',\n                'admin.plugins.settings.automaticPrepackagedPluginsDesc',\n                'admin.plugins.settings.marketplaceUrl',\n                'admin.plugins.settings.marketplaceUrlDesc',\n            ],\n            schema: {\n                id: 'PluginManagementSettings',\n                component: PluginManagement,\n            },\n        },\n        custom: {\n            url: 'plugins/plugin_:plugin_id',\n            schema: {\n                id: 'CustomPluginSettings',\n                component: CustomPluginSettings,\n            },\n        },\n    },\n    integrations: {\n        icon: 'fa-sitemap',\n        sectionTitle: t('admin.sidebar.integrations'),\n        sectionTitleDefault: 'Integrations',\n        id: 'integrations',\n        integration_management: {\n            url: 'integrations/integration_management',\n            title: t('admin.integrations.integrationManagement'),\n            title_default: 'Integration Management',\n            schema: {\n                id: 'CustomIntegrationSettings',\n                name: t('admin.integrations.integrationManagement.title'),\n                name_default: 'Integration Management',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableIncomingWebhooks',\n                        label: t('admin.service.webhooksTitle'),\n                        label_default: 'Enable Incoming Webhooks: ',\n                        help_text: t('admin.service.webhooksDescription'),\n                        help_text_default: 'When true, incoming webhooks will be allowed. To help combat phishing attacks, all posts from webhooks will be labelled by a BOT tag. See [documentation](!http://docs.mattermost.com/developer/webhooks-incoming.html) to learn more.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableOutgoingWebhooks',\n                        label: t('admin.service.outWebhooksTitle'),\n                        label_default: 'Enable Outgoing Webhooks: ',\n                        help_text: t('admin.service.outWebhooksDesc'),\n                        help_text_default: 'When true, outgoing webhooks will be allowed. See [documentation](!http://docs.mattermost.com/developer/webhooks-outgoing.html) to learn more.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableCommands',\n                        label: t('admin.service.cmdsTitle'),\n                        label_default: 'Enable Custom Slash Commands: ',\n                        help_text: t('admin.service.cmdsDesc'),\n                        help_text_default: 'When true, custom slash commands will be allowed. See [documentation](!http://docs.mattermost.com/developer/slash-commands.html) to learn more.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableOAuthServiceProvider',\n                        label: t('admin.oauth.providerTitle'),\n                        label_default: 'Enable OAuth 2.0 Service Provider: ',\n                        help_text: t('admin.oauth.providerDescription'),\n                        help_text_default: 'When true, Mattermost can act as an OAuth 2.0 service provider allowing Mattermost to authorize API requests from external applications. See [documentation](!https://docs.mattermost.com/developer/oauth-2-0-applications.html) to learn more.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_PERMISSION,\n                        key: 'ServiceSettings.EnableOnlyAdminIntegrations',\n                        label: t('admin.service.integrationAdmin'),\n                        label_default: 'Restrict managing integrations to Admins:',\n                        help_text: t('admin.service.integrationAdminDesc'),\n                        help_text_default: 'When true, webhooks and slash commands can only be created, edited and viewed by Team and System Admins, and OAuth 2.0 applications by System Admins. Integrations are available to all users after they have been created by the Admin.',\n                        permissions_mapping_name: 'enableOnlyAdminIntegrations',\n                        isHidden: it.licensed,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnablePostUsernameOverride',\n                        label: t('admin.service.overrideTitle'),\n                        label_default: 'Enable integrations to override usernames:',\n                        help_text: t('admin.service.overrideDescription'),\n                        help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the username they are posting as. Note: Combined with allowing integrations to override profile picture icons, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnablePostIconOverride',\n                        label: t('admin.service.iconTitle'),\n                        label_default: 'Enable integrations to override profile picture icons:',\n                        help_text: t('admin.service.iconDescription'),\n                        help_text_default: 'When true, webhooks, slash commands and other integrations, such as [Zapier](!https://docs.mattermost.com/integrations/zapier.html), will be allowed to change the profile picture they post with. Note: Combined with allowing integrations to override usernames, users may be able to perform phishing attacks by attempting to impersonate other users.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableUserAccessTokens',\n                        label: t('admin.service.userAccessTokensTitle'),\n                        label_default: 'Enable User Access Tokens: ',\n                        help_text: t('admin.service.userAccessTokensDescription'),\n                        help_text_default: 'When true, users can create [user access tokens](!https://about.mattermost.com/default-user-access-tokens) for integrations in **Account Settings > Security**. They can be used to authenticate against the API and give full access to the account.\\n\\n To manage who can create personal access tokens or to search users by token ID, go to the **User Management > Users** page.',\n                        help_text_markdown: true,\n                    },\n                ],\n            },\n        },\n        bot_accounts: {\n            url: 'integrations/bot_accounts',\n            title: t('admin.integrations.botAccounts'),\n            title_default: 'Bot Accounts',\n            schema: {\n                id: 'BotAccountSettings',\n                name: t('admin.integrations.botAccounts.title'),\n                name_default: 'Bot Accounts',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableBotAccountCreation',\n                        label: t('admin.service.enableBotTitle'),\n                        label_default: 'Enable Bot Account Creation: ',\n                        help_text: t('admin.service.enableBotAccountCreation'),\n                        help_text_default: 'When true, System Admins can create bot accounts for integrations in [Integrations > Bot Accounts]({siteURL}/_redirect/integrations/bots). Bot accounts are similar to user accounts except they cannot be used to log in. See [documentation](https://mattermost.com/pl/default-bot-accounts) to learn more.',\n                        help_text_markdown: true,\n                        help_text_values: {siteURL: getSiteURL()},\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.DisableBotsWhenOwnerIsDeactivated',\n                        label: t('admin.service.disableBotOwnerDeactivatedTitle'),\n                        label_default: 'Disable bot accounts when owner is deactivated:',\n                        help_text: t('admin.service.disableBotWhenOwnerIsDeactivated'),\n                        help_text_default: 'When a user is deactivated, disables all bot accounts managed by the user. To re-enable bot accounts, go to [Integrations > Bot Accounts]({siteURL}/_redirect/integrations/bots).',\n                        help_text_markdown: true,\n                        help_text_values: {siteURL: getSiteURL()},\n                    },\n                ],\n            },\n        },\n        gif: {\n            url: 'integrations/gif',\n            title: t('admin.sidebar.gif'),\n            title_default: 'GIF (Beta)',\n            schema: {\n                id: 'GifSettings',\n                name: t('admin.integrations.gif'),\n                name_default: 'GIF (Beta)',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableGifPicker',\n                        label: t('admin.customization.enableGifPickerTitle'),\n                        label_default: 'Enable GIF Picker:',\n                        help_text: t('admin.customization.enableGifPickerDesc'),\n                        help_text_default: 'Allow users to select GIFs from the emoji picker via a Gfycat integration.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.GfycatApiKey',\n                        label: t('admin.customization.gfycatApiKey'),\n                        label_default: 'Gfycat API Key:',\n                        help_text: t('admin.customization.gfycatApiKeyDescription'),\n                        help_text_default: 'Request an API key at [https://developers.gfycat.com/signup/#](!https://developers.gfycat.com/signup/#). Enter the client ID you receive via email to this field. When blank, uses the default API key provided by Gfycat.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.GfycatApiSecret',\n                        label: t('admin.customization.gfycatApiSecret'),\n                        label_default: 'Gfycat API Secret:',\n                        help_text: t('admin.customization.gfycatApiSecretDescription'),\n                        help_text_default: 'The API secret generated by Gfycat for your API key. When blank, uses the default API secret provided by Gfycat.',\n                    },\n                ],\n            },\n        },\n        cors: {\n            url: 'integrations/cors',\n            title: t('admin.sidebar.cors'),\n            title_default: 'CORS',\n            isHidden: it.configIsTrue('ExperimentalSettings', 'RestrictSystemAdmin'),\n            schema: {\n                id: 'CORS',\n                name: t('admin.integrations.cors'),\n                name_default: 'CORS',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.AllowCorsFrom',\n                        label: t('admin.service.corsTitle'),\n                        label_default: 'Enable cross-origin requests from:',\n                        placeholder: t('admin.service.corsEx'),\n                        placeholder_default: 'http://example.com',\n                        help_text: t('admin.service.corsDescription'),\n                        help_text_default: 'Enable HTTP Cross origin request from a specific domain. Use \"*\" if you want to allow CORS from any domain or leave it blank to disable it. Should not be set to \"*\" in production.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ServiceSettings.CorsExposedHeaders',\n                        label: t('admin.service.corsExposedHeadersTitle'),\n                        label_default: 'CORS Exposed Headers:',\n                        placeholder: t('admin.service.corsHeadersEx'),\n                        placeholder_default: 'X-My-Header',\n                        help_text: t('admin.service.corsExposedHeadersDescription'),\n                        help_text_default: 'Whitelist of headers that will be accessible to the requester.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.CorsAllowCredentials',\n                        label: t('admin.service.corsAllowCredentialsLabel'),\n                        label_default: 'CORS Allow Credentials:',\n                        help_text: t('admin.service.corsAllowCredentialsDescription'),\n                        help_text_default: 'When true, requests that pass validation will include the Access-Control-Allow-Credentials header.',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.CorsDebug',\n                        label: t('admin.service.CorsDebugLabel'),\n                        label_default: 'CORS Debug:',\n                        help_text: t('admin.service.corsDebugDescription'),\n                        help_text_default: 'When true, prints messages to the logs to help when developing an integration that uses CORS. These messages will include the structured key value pair \"source\":\"cors\".',\n                    },\n                ],\n            },\n        },\n    },\n    compliance: {\n        icon: 'fa-list',\n        sectionTitle: t('admin.sidebar.compliance'),\n        sectionTitleDefault: 'Compliance',\n        data_retention: {\n            url: 'compliance/data_retention',\n            title: t('admin.sidebar.dataRetentionPolicy'),\n            title_default: 'Data Retention Policy',\n            isHidden: it.isnt(it.licensedForFeature('DataRetention')),\n            searchableStrings: [\n                'admin.data_retention.title',\n                'admin.data_retention.messageRetentionDays.description',\n                'admin.data_retention.fileRetentionDays.description',\n                ['admin.data_retention.note.description', {documentationLink: ''}],\n                'admin.data_retention.enableMessageDeletion.title',\n                'admin.data_retention.enableMessageDeletion.description',\n                'admin.data_retention.enableFileDeletion.title',\n                'admin.data_retention.enableFileDeletion.description',\n                'admin.data_retention.deletionJobStartTime.title',\n                'admin.data_retention.deletionJobStartTime.description',\n                'admin.data_retention.createJob.title',\n                'admin.data_retention.createJob.help',\n            ],\n            schema: {\n                id: 'DataRetentionSettings',\n                component: DataRetentionSettings,\n            },\n        },\n        message_export: {\n            url: 'compliance/export',\n            title: t('admin.sidebar.complianceExport'),\n            title_default: 'Compliance Export (Beta)',\n            isHidden: it.isnt(it.licensedForFeature('MessageExport')),\n            searchableStrings: [\n                'admin.service.complianceExportTitle',\n                'admin.service.complianceExportDesc',\n                'admin.complianceExport.exportJobStartTime.title',\n                'admin.complianceExport.exportJobStartTime.description',\n                'admin.complianceExport.exportFormat.title',\n                ['admin.complianceExport.exportFormat.description', {siteURL: ''}],\n                'admin.complianceExport.createJob.title',\n                'admin.complianceExport.createJob.help',\n                'admin.complianceExport.globalRelayCustomerType.title',\n                'admin.complianceExport.globalRelayCustomerType.description',\n                'admin.complianceExport.globalRelaySmtpUsername.title',\n                'admin.complianceExport.globalRelaySmtpUsername.description',\n                'admin.complianceExport.globalRelaySmtpPassword.title',\n                'admin.complianceExport.globalRelaySmtpPassword.description',\n                'admin.complianceExport.globalRelayEmailAddress.title',\n                'admin.complianceExport.globalRelayEmailAddress.description',\n            ],\n            schema: {\n                id: 'MessageExportSettings',\n                component: MessageExportSettings,\n            },\n        },\n        audits: {\n            url: 'compliance/monitoring',\n            title: t('admin.sidebar.complianceMonitoring'),\n            title_default: 'Compliance Monitoring',\n            isHidden: it.isnt(it.licensed),\n            searchableStrings: [\n                'admin.audits.title',\n                'admin.audits.reload',\n            ],\n            schema: {\n                id: 'Audits',\n                name: t('admin.compliance.complianceMonitoring'),\n                name_default: 'Compliance Monitoring',\n                component: Audits,\n                isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_BANNER,\n                        label: t('admin.compliance.newComplianceExportBanner'),\n                        label_markdown: true,\n                        label_default: 'This feature is replaced by a new [Compliance Export]({siteURL}/admin_console/compliance/export) feature, and will be removed in a future release. We recommend migrating to the new system.',\n                        label_values: {siteURL: getSiteURL()},\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                        banner_type: 'info',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ComplianceSettings.Enable',\n                        label: t('admin.compliance.enableTitle'),\n                        label_default: 'Enable Compliance Reporting:',\n                        help_text: t('admin.compliance.enableDesc'),\n                        help_text_default: 'When true, Mattermost allows compliance reporting from the **Compliance and Auditing** tab. See [documentation](!https://docs.mattermost.com/administration/compliance.html) to learn more.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ComplianceSettings.Directory',\n                        label: t('admin.compliance.directoryTitle'),\n                        label_default: 'Compliance Report Directory:',\n                        help_text: t('admin.compliance.directoryDescription'),\n                        help_text_default: 'Directory to which compliance reports are written. If blank, will be set to ./data/.',\n                        placeholder: t('admin.compliance.directoryExample'),\n                        placeholder_default: 'E.g.: \"./data/\"',\n                        isDisabled: it.stateIsFalse('ComplianceSettings.Enable'),\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ComplianceSettings.EnableDaily',\n                        label: t('admin.compliance.enableDailyTitle'),\n                        label_default: 'Enable Daily Report:',\n                        help_text: t('admin.compliance.enableDailyDesc'),\n                        help_text_default: 'When true, Mattermost will generate a daily compliance report.',\n                        isDisabled: it.stateIsFalse('ComplianceSettings.Enable'),\n                        isHidden: it.isnt(it.licensedForFeature('Compliance')),\n                    },\n                ],\n            },\n        },\n        custom_terms_of_service: {\n            url: 'compliance/custom_terms_of_service',\n            title: t('admin.sidebar.customTermsOfService'),\n            title_default: 'Custom Terms of Service (Beta)',\n            isHidden: it.isnt(it.licensedForFeature('CustomTermsOfService')),\n            searchableStrings: [\n                'admin.support.termsOfServiceTitle',\n                'admin.support.enableTermsOfServiceTitle',\n                'admin.support.enableTermsOfServiceHelp',\n                'admin.support.termsOfServiceTextTitle',\n                'admin.support.termsOfServiceTextHelp',\n                'admin.support.termsOfServiceReAcceptanceTitle',\n                'admin.support.termsOfServiceReAcceptanceHelp',\n            ],\n            schema: {\n                id: 'TermsOfServiceSettings',\n                component: CustomTermsOfServiceSettings,\n            },\n        },\n    },\n    experimental: {\n        icon: 'fa-flask',\n        sectionTitle: t('admin.sidebar.experimental'),\n        sectionTitleDefault: 'Experimental',\n        experimental_features: {\n            url: 'experimental/features',\n            title: t('admin.sidebar.experimentalFeatures'),\n            title_default: 'Features',\n            schema: {\n                id: 'ExperimentalSettings',\n                name: t('admin.experimental.experimentalFeatures'),\n                name_default: 'Experimental Features',\n                settings: [\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.LoginButtonColor',\n                        label: t('admin.experimental.ldapSettingsLoginButtonColor.title'),\n                        label_default: 'AD/LDAP Login Button Color:',\n                        help_text: t('admin.experimental.ldapSettingsLoginButtonColor.desc'),\n                        help_text_default: 'Specify the color of the AD/LDAP login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.isnt(it.licensedForFeature('LDAP')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.LoginButtonBorderColor',\n                        label: t('admin.experimental.ldapSettingsLoginButtonBorderColor.title'),\n                        label_default: 'AD/LDAP Login Button Border Color:',\n                        help_text: t('admin.experimental.ldapSettingsLoginButtonBorderColor.desc'),\n                        help_text_default: 'Specify the color of the AD/LDAP login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.isnt(it.licensedForFeature('LDAP')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'LdapSettings.LoginButtonTextColor',\n                        label: t('admin.experimental.ldapSettingsLoginButtonTextColor.title'),\n                        label_default: 'AD/LDAP Login Button Text Color:',\n                        help_text: t('admin.experimental.ldapSettingsLoginButtonTextColor.desc'),\n                        help_text_default: 'Specify the color of the AD/LDAP login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.isnt(it.licensedForFeature('LDAP')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalEnableAuthenticationTransfer',\n                        label: t('admin.experimental.experimentalEnableAuthenticationTransfer.title'),\n                        label_default: 'Allow Authentication Transfer:',\n                        help_text: t('admin.experimental.experimentalEnableAuthenticationTransfer.desc'),\n                        help_text_default: 'When true, users can change their sign-in method to any that is enabled on the server, either via Account Settings or the APIs. When false, Users cannot change their sign-in method, regardless of which authentication options are enabled.',\n                        help_text_markdown: false,\n                        isHidden: it.isnt(it.licensed), // documented as E20 and higher, but only E10 in the code\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.CloseUnusedDirectMessages',\n                        label: t('admin.experimental.closeUnusedDirectMessages.title'),\n                        label_default: 'Autoclose Direct Messages in Sidebar:',\n                        help_text: t('admin.experimental.closeUnusedDirectMessages.desc'),\n                        help_text_default: 'When true, direct message conversations with no activity for 7 days will be hidden from the sidebar. When false, conversations remain in the sidebar until they are manually closed.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ExperimentalSettings.LinkMetadataTimeoutMilliseconds',\n                        label: t('admin.experimental.linkMetadataTimeoutMilliseconds.title'),\n                        label_default: 'Link Metadata Timeout:',\n                        help_text: t('admin.experimental.linkMetadataTimeoutMilliseconds.desc'),\n                        help_text_default: 'The number of milliseconds to wait for metadata from a third-party link. Used with Post Metadata.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.linkMetadataTimeoutMilliseconds.example'),\n                        placeholder_default: 'E.g.: \"5000\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'EmailSettings.EmailBatchingBufferSize',\n                        label: t('admin.experimental.emailBatchingBufferSize.title'),\n                        label_default: 'Email Batching Buffer Size:',\n                        help_text: t('admin.experimental.emailBatchingBufferSize.desc'),\n                        help_text_default: 'Specify the maximum number of notifications batched into a single email.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.emailBatchingBufferSize.example'),\n                        placeholder_default: 'E.g.: \"256\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'EmailSettings.EmailBatchingInterval',\n                        label: t('admin.experimental.emailBatchingInterval.title'),\n                        label_default: 'Email Batching Interval:',\n                        help_text: t('admin.experimental.emailBatchingInterval.desc'),\n                        help_text_default: 'Specify the maximum frequency, in seconds, which the batching job checks for new notifications. Longer batching intervals will increase performance.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.emailBatchingInterval.example'),\n                        placeholder_default: 'E.g.: \"30\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.LoginButtonColor',\n                        label: t('admin.experimental.emailSettingsLoginButtonColor.title'),\n                        label_default: 'Email Login Button Color:',\n                        help_text: t('admin.experimental.emailSettingsLoginButtonColor.desc'),\n                        help_text_default: 'Specify the color of the email login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.LoginButtonBorderColor',\n                        label: t('admin.experimental.emailSettingsLoginButtonBorderColor.title'),\n                        label_default: 'Email Login Button Border Color:',\n                        help_text: t('admin.experimental.emailSettingsLoginButtonBorderColor.desc'),\n                        help_text_default: 'Specify the color of the email login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'EmailSettings.LoginButtonTextColor',\n                        label: t('admin.experimental.emailSettingsLoginButtonTextColor.title'),\n                        label_default: 'Email Login Button Text Color:',\n                        help_text: t('admin.experimental.emailSettingsLoginButtonTextColor.desc'),\n                        help_text_default: 'Specify the color of the email login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableUserDeactivation',\n                        label: t('admin.experimental.enableUserDeactivation.title'),\n                        label_default: 'Enable Account Deactivation:',\n                        help_text: t('admin.experimental.enableUserDeactivation.desc'),\n                        help_text_default: 'When true, users may deactivate their own account from **Account Settings > Advanced**. If a user deactivates their own account, they will get an email notification confirming they were deactivated. When false, users may not deactivate their own account.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalEnableAutomaticReplies',\n                        label: t('admin.experimental.experimentalEnableAutomaticReplies.title'),\n                        label_default: 'Enable Automatic Replies:',\n                        help_text: t('admin.experimental.experimentalEnableAutomaticReplies.desc'),\n                        help_text_default: 'When true, users can enable Automatic Replies in **Account Settings > Notifications**. Users set a custom message that will be automatically sent in response to Direct Messages. When false, disables the Automatic Direct Message Replies feature and hides it from Account Settings.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableChannelViewedMessages',\n                        label: t('admin.experimental.enableChannelViewedMessages.title'),\n                        label_default: 'Enable Channel Viewed WebSocket Messages:',\n                        help_text: t('admin.experimental.enableChannelViewedMessages.desc'),\n                        help_text_default: 'This setting determines whether `channel_viewed` WebSocket events are sent, which synchronize unread notifications across clients and devices. Disabling the setting in larger deployments may improve server performance.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ExperimentalSettings.ClientSideCertEnable',\n                        label: t('admin.experimental.clientSideCertEnable.title'),\n                        label_default: 'Enable Client-Side Certification:',\n                        help_text: t('admin.experimental.clientSideCertEnable.desc'),\n                        help_text_default: 'Enables client-side certification for your Mattermost server. See [documentation](!https://docs.mattermost.com/deployment/certificate-based-authentication.html) to learn more.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensedForFeature('SAML')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_DROPDOWN,\n                        key: 'ExperimentalSettings.ClientSideCertCheck',\n                        label: t('admin.experimental.clientSideCertCheck.title'),\n                        label_default: 'Client-Side Certification Login Method:',\n                        help_text: t('admin.experimental.clientSideCertCheck.desc'),\n                        help_text_default: 'When **primary**, after the client side certificate is verified, user’s email is retrieved from the certificate and is used to log in without a password. When **secondary**, after the client side certificate is verified, user’s email is retrieved from the certificate and matched against the one supplied by the user. If they match, the user logs in with regular email/password credentials.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'primary',\n                                display_name: 'primary',\n                                display_name_default: 'primary',\n                            },\n                            {\n                                value: 'secondary',\n                                display_name: 'secondary',\n                                display_name_default: 'secondary',\n                            },\n                        ],\n                        isDisabled: it.stateIsFalse('ExperimentalSettings.ClientSideCertEnable'),\n                        isHidden: it.isnt(it.licensedForFeature('SAML')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalEnableDefaultChannelLeaveJoinMessages',\n                        label: t('admin.experimental.experimentalEnableDefaultChannelLeaveJoinMessages.title'),\n                        label_default: 'Enable Default Channel Leave/Join System Messages:',\n                        help_text: t('admin.experimental.experimentalEnableDefaultChannelLeaveJoinMessages.desc'),\n                        help_text_default: 'This setting determines whether team leave/join system messages are posted in the default town-square channel.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalEnableHardenedMode',\n                        label: t('admin.experimental.experimentalEnableHardenedMode.title'),\n                        label_default: 'Enable Hardened Mode:',\n                        help_text: t('admin.experimental.experimentalEnableHardenedMode.desc'),\n                        help_text_default: 'Enables a hardened mode for Mattermost that makes user experience trade-offs in the interest of security. See [documentation](!https://docs.mattermost.com/administration/config-settings.html#enable-hardened-mode-experimental) to learn more.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnablePreviewFeatures',\n                        label: t('admin.experimental.enablePreviewFeatures.title'),\n                        label_default: 'Enable Preview Features:',\n                        help_text: t('admin.experimental.enablePreviewFeatures.desc'),\n                        help_text_default: 'When true, preview features can be enabled from **Account Settings > Advanced > Preview pre-release features**. When false, disables and hides preview features from **Account Settings > Advanced > Preview pre-release features**.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ThemeSettings.EnableThemeSelection',\n                        label: t('admin.experimental.enableThemeSelection.title'),\n                        label_default: 'Enable Theme Selection:',\n                        help_text: t('admin.experimental.enableThemeSelection.desc'),\n                        help_text_default: 'Enables the **Display > Theme** tab in Account Settings so users can select their theme.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensed), // E10 and higher\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ThemeSettings.AllowCustomThemes',\n                        label: t('admin.experimental.allowCustomThemes.title'),\n                        label_default: 'Allow Custom Themes:',\n                        help_text: t('admin.experimental.allowCustomThemes.desc'),\n                        help_text_default: 'Enables the **Display > Theme > Custom Theme** section in Account Settings.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensed), // E10 and higher\n                        isDisabled: it.stateIsFalse('ThemeSettings.EnableThemeSelection'),\n                    },\n\n                    // {\n                    //     type: Constants.SettingsTypes.TYPE_LIST,\n                    //     key: 'ThemeSettings.AllowedThemes',\n                    //     label: t('admin.experimental.allowedThemes.title'),\n                    //     label_default: 'Allowed Themes:',\n                    //     help_text: t('admin.experimental.allowedThemes.desc'),\n                    //     help_text_default: 'A comma-separated list of themes that can be chosen by users when \"EnableThemeSelection\" is set to true.',\n                    //     help_text_markdown: true,\n                    //     placeholder: t('admin.experimental.allowedThemes.example'),\n                    //     placeholder_default: 'E.g.: \"default, organization, mattermostDark, windows10\"',\n                    //     isHidden: it.isnt(it.licensed), // E10 and higher\n                    //     isDisabled: it.stateIsTrue('ThemeSettings.EnableThemeSelection'),\n                    // },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'ThemeSettings.DefaultTheme',\n                        label: t('admin.experimental.defaultTheme.title'),\n                        label_default: 'Default Theme:',\n                        help_text: t('admin.experimental.defaultTheme.desc'),\n                        help_text_default: 'Set a default theme that applies to all new users on the system.',\n                        help_text_markdown: true,\n                        options: [\n                            {\n                                value: 'default',\n                                display_name: 'default',\n                                display_name_default: 'default',\n                            },\n                            {\n                                value: 'organization',\n                                display_name: 'organization',\n                                display_name_default: 'organization',\n                            },\n                            {\n                                value: 'mattermostDark',\n                                display_name: 'mattermostDark',\n                                display_name_default: 'mattermostDark',\n                            },\n                            {\n                                value: 'windows10',\n                                display_name: 'windows10',\n                                display_name_default: 'windows10',\n                            },\n                        ],\n                        isHidden: it.isnt(it.licensed), // E10 and higher\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableTutorial',\n                        label: t('admin.experimental.enableTutorial.title'),\n                        label_default: 'Enable Tutorial:',\n                        help_text: t('admin.experimental.enableTutorial.desc'),\n                        help_text_default: 'When true, users are prompted with a tutorial when they open Mattermost for the first time after account creation. When false, the tutorial is disabled, and users are placed in Town Square when they open Mattermost for the first time after account creation.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.EnableUserTypingMessages',\n                        label: t('admin.experimental.enableUserTypingMessages.title'),\n                        label_default: 'Enable User Typing Messages:',\n                        help_text: t('admin.experimental.enableUserTypingMessages.desc'),\n                        help_text_default: 'This setting determines whether \"user is typing...\" messages are displayed below the message box. Disabling the setting in larger deployments may improve server performance.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'ServiceSettings.TimeBetweenUserTypingUpdatesMilliseconds',\n                        label: t('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.title'),\n                        label_default: 'User Typing Timeout:',\n                        help_text: t('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.desc'),\n                        help_text_default: 'The number of milliseconds to wait between emitting user typing websocket events.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.timeBetweenUserTypingUpdatesMilliseconds.example'),\n                        placeholder_default: 'E.g.: \"5000\"',\n                        isDisabled: it.stateIsFalse('ServiceSettings.EnableUserTypingMessages'),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.EnableXToLeaveChannelsFromLHS',\n                        label: t('admin.experimental.enableXToLeaveChannelsFromLHS.title'),\n                        label_default: 'Enable X to Leave Channels from Left-Hand Sidebar:',\n                        help_text: t('admin.experimental.enableXToLeaveChannelsFromLHS.desc'),\n                        help_text_default: 'When true, users can leave Public and Private Channels by clicking the “x” beside the channel name. When false, users must use the **Leave Channel** option from the channel menu to leave channels.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'TeamSettings.ExperimentalPrimaryTeam',\n                        label: t('admin.experimental.experimentalPrimaryTeam.title'),\n                        label_default: 'Primary Team:',\n                        help_text: t('admin.experimental.experimentalPrimaryTeam.desc'),\n                        help_text_default: 'The primary team of which users on the server are members. When a primary team is set, the options to join other teams or leave the primary team are disabled.',\n                        help_text_markdown: true,\n                        placeholder: t('admin.experimental.experimentalPrimaryTeam.example'),\n                        placeholder_default: 'E.g.: \"teamname\"',\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ExperimentalSettings.UseNewSAMLLibrary',\n                        label: t('admin.experimental.experimentalUseNewSAMLLibrary.title'),\n                        label_default: 'Use Improved SAML Library (Beta):',\n                        help_text: t('admin.experimental.experimentalUseNewSAMLLibrary.desc'),\n                        help_text_default: 'Enable an updated SAML Library, which does not require the XML Security Library (xmlsec1) to be installed. Warning: Not all providers have been tested. If you experience issues, please contact support: [https://about.mattermost.com/support/](!https://about.mattermost.com/support/). Changing this setting requires a server restart before taking effect.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensedForFeature('SAML'))\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LoginButtonColor',\n                        label: t('admin.experimental.samlSettingsLoginButtonColor.title'),\n                        label_default: 'SAML Login Button Color:',\n                        help_text: t('admin.experimental.samlSettingsLoginButtonColor.desc'),\n                        help_text_default: 'Specify the color of the SAML login button for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.isnt(it.licensedForFeature('SAML')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LoginButtonBorderColor',\n                        label: t('admin.experimental.samlSettingsLoginButtonBorderColor.title'),\n                        label_default: 'SAML Login Button Border Color:',\n                        help_text: t('admin.experimental.samlSettingsLoginButtonBorderColor.desc'),\n                        help_text_default: 'Specify the color of the SAML login button border for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.isnt(it.licensedForFeature('SAML')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_TEXT,\n                        key: 'SamlSettings.LoginButtonTextColor',\n                        label: t('admin.experimental.samlSettingsLoginButtonTextColor.title'),\n                        label_default: 'SAML Login Button Text Color:',\n                        help_text: t('admin.experimental.samlSettingsLoginButtonTextColor.desc'),\n                        help_text_default: 'Specify the color of the SAML login button text for white labeling purposes. Use a hex code with a #-sign before the code. This setting only applies to the mobile apps.',\n                        help_text_markdown: false,\n                        isHidden: it.isnt(it.licensedForFeature('SAML')),\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'ServiceSettings.ExperimentalChannelOrganization',\n                        label: t('admin.experimental.experimentalChannelOrganization.title'),\n                        label_default: 'Sidebar Organization:',\n                        help_text: t('admin.experimental.experimentalChannelOrganization.desc'),\n                        help_text_default: 'Enables channel sidebar organization options in **Account Settings > Sidebar > Channel grouping and sorting** including options for grouping unread channels, sorting channels by most recent post and combining all channel types into a single list.',\n                        help_text_markdown: true,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'DisplaySettings.ExperimentalTimezone',\n                        label: t('admin.experimental.experimentalTimezone.title'),\n                        label_default: 'Timezone:',\n                        help_text: t('admin.experimental.experimentalTimezone.desc'),\n                        help_text_default: 'Select the timezone used for timestamps in the user interface and email notifications. When true, the Timezone setting is visible in the Account Settings and a time zone is automatically assigned in the next active session. When false, the Timezone setting is hidden in the Account Settings.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalHideTownSquareinLHS',\n                        label: t('admin.experimental.experimentalHideTownSquareinLHS.title'),\n                        label_default: 'Town Square is Hidden in Left-Hand Sidebar:',\n                        help_text: t('admin.experimental.experimentalHideTownSquareinLHS.desc'),\n                        help_text_default: 'When true, hides Town Square in the left-hand sidebar if there are no unread messages in the channel. When false, Town Square is always visible in the left-hand sidebar even if all messages have been read.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensed), // E10 and higher\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'TeamSettings.ExperimentalTownSquareIsReadOnly',\n                        label: t('admin.experimental.experimentalTownSquareIsReadOnly.title'),\n                        label_default: 'Town Square is Read-Only:',\n                        help_text: t('admin.experimental.experimentalTownSquareIsReadOnly.desc'),\n                        help_text_default: 'When true, only System Admins can post in Town Square. Other members are not able to post, reply, upload files, emoji react or pin messages to Town Square, nor are they able to change the channel name, header or purpose. When false, anyone can post in Town Square.',\n                        help_text_markdown: true,\n                        isHidden: it.isnt(it.licensed), // E10 and higher\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_BOOL,\n                        key: 'EmailSettings.UseChannelInEmailNotifications',\n                        label: t('admin.experimental.useChannelInEmailNotifications.title'),\n                        label_default: 'Use Channel Name in Email Notifications:',\n                        help_text: t('admin.experimental.useChannelInEmailNotifications.desc'),\n                        help_text_default: 'When true, channel and team name appears in email notification subject lines. Useful for servers using only one team. When false, only team name appears in email notification subject line.',\n                        help_text_markdown: false,\n                    },\n                    {\n                        type: Constants.SettingsTypes.TYPE_NUMBER,\n                        key: 'TeamSettings.UserStatusAwayTimeout',\n                        label: t('admin.experimental.userStatusAwayTimeout.title'),\n                        label_default: 'User Status Away Timeout:',\n                        help_text: t('admin.experimental.userStatusAwayTimeout.desc'),\n                        help_text_default: 'This setting defines the number of seconds after which the user’s status indicator changes to \"Away\", when they are away from Mattermost.',\n                        help_text_markdown: false,\n                        placeholder: t('admin.experimental.userStatusAwayTimeout.example'),\n                        placeholder_default: 'E.g.: \"300\"',\n                    }, // eslint-disable-next-line lines-around-comment\n                    // {\n                    //     type: Constants.SettingsTypes.TYPE_BOOL,\n                    //     key: 'ServiceSettings.ExperimentalStrictCSRFEnforcement',\n                    //     label: t('admin.experimental.experimentalStrictCSRFEnforcement.title'),\n                    //     label_default: 'TODO:',\n                    //     help_text: t('admin.experimental.experimentalStrictCSRFEnforcement.desc'),\n                    //     help_text_default: 'TODO',\n                    //     help_text_markdown: false,\n                    // },\n                    // {\n                    //     type: Constants.SettingsTypes.TYPE_LIST,\n                    //     key: 'TeamSettings.ExperimentalDefaultChannels',\n                    //     label: t('admin.experimental.experimentalDefaultChannels.title'),\n                    //     label_default: 'Default Channels:',\n                    //     help_text: t('admin.experimental.experimentalDefaultChannels.desc'),\n                    //     help_text_default: 'A comma-separated list of default channels every user is added to automatically after joining a new team. Only applies to public channels, but affects all teams on the server. When not set, every user is added to `off-topic` and `town-square` channel by default. Note that even if `town-square` is not listed, every user is added to that channel after joining a new team.',\n                    //     help_text_markdown: true,\n                    //     placeholder: t('admin.experimental.experimentalDefaultChannels.example'),\n                    //     placeholder_default: 'E.g.: \"channel1, channel2, off-topic\"',\n                    // },\n                    // {\n                    //     type: Constants.SettingsTypes.TYPE_TEXT,\n                    //     key: 'EmailSettings.ReplyToAddress',\n                    //     label: t('admin.experimental.replyToAddress.title'),\n                    //     label_default: 'Reply To Address:',\n                    //     help_text: t('admin.experimental.replyToAddress.desc'),\n                    //     help_text_default: 'TODO',\n                    //     help_text_markdown: true,\n                    //     placeholder: t('admin.experimental.replyToAddress.example'),\n                    //     placeholder_default: 'E.g.: \"reply-to@example.com\"',\n                    // },\n                ],\n            },\n        },\n    },\n};\n\nt('admin.field_names.allowBannerDismissal');\nt('admin.field_names.bannerColor');\nt('admin.field_names.bannerText');\nt('admin.field_names.bannerTextColor');\nt('admin.field_names.enableBanner');\nt('admin.field_names.enableCommands');\nt('admin.field_names.enableConfirmNotificationsToChannel');\nt('admin.field_names.enableIncomingWebhooks');\nt('admin.field_names.enableOAuthServiceProvider');\nt('admin.field_names.enableOutgoingWebhooks');\nt('admin.field_names.enablePostIconOverride');\nt('admin.field_names.enablePostUsernameOverride');\nt('admin.field_names.enableUserAccessTokens');\nt('admin.field_names.enableUserCreation');\nt('admin.field_names.maxChannelsPerTeam');\nt('admin.field_names.maxNotificationsPerChannel');\nt('admin.field_names.maxUsersPerTeam');\nt('admin.field_names.postEditTimeLimit');\nt('admin.field_names.restrictCreationToDomains');\nt('admin.field_names.restrictDirectMessage');\nt('admin.field_names.teammateNameDisplay');\n\nexport default AdminDefinition;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport FormattedMarkdownMessage from 'components/formatted_markdown_message';\nimport {recycleDatabaseConnection} from 'actions/admin_actions.jsx';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class DatabaseSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        // driverName and dataSource are read-only from the UI\n\n        config.SqlSettings.MaxIdleConns = this.parseIntNonZero(this.state.maxIdleConns);\n        config.SqlSettings.MaxOpenConns = this.parseIntNonZero(this.state.maxOpenConns);\n        config.SqlSettings.Trace = this.state.trace;\n        config.SqlSettings.QueryTimeout = this.parseIntNonZero(this.state.queryTimeout);\n        config.SqlSettings.ConnMaxLifetimeMilliseconds = this.parseIntNonNegative(this.state.connMaxLifetimeMilliseconds);\n        config.ServiceSettings.MinimumHashtagLength = this.parseIntNonZero(this.state.minimumHashtagLength, 3, 2);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            driverName: config.SqlSettings.DriverName,\n            dataSource: config.SqlSettings.DataSource,\n            maxIdleConns: config.SqlSettings.MaxIdleConns,\n            maxOpenConns: config.SqlSettings.MaxOpenConns,\n            trace: config.SqlSettings.Trace,\n            queryTimeout: config.SqlSettings.QueryTimeout,\n            connMaxLifetimeMilliseconds: config.SqlSettings.ConnMaxLifetimeMilliseconds,\n            minimumHashtagLength: config.ServiceSettings.MinimumHashtagLength,\n        };\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.database.title'\n                defaultMessage='Database Settings'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const dataSource = '**********' + this.state.dataSource.substring(this.state.dataSource.indexOf('@'));\n\n        let recycleDbButton = <div/>;\n        if (this.props.license.IsLicensed === 'true') {\n            recycleDbButton = (\n                <RequestButton\n                    requestAction={recycleDatabaseConnection}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.recycle.recycleDescription'\n                            defaultMessage='Deployments using multiple databases can switch from one master database to another without restarting the Mattermost server by updating \"config.json\" to the new desired configuration and using the {reloadConfiguration} feature to load the new settings while the server is running. The administrator should then use {featureName} feature to recycle the database connections based on the new settings.'\n                            values={{\n                                featureName: (\n                                    <b>\n                                        <FormattedMessage\n                                            id='admin.recycle.recycleDescription.featureName'\n                                            defaultMessage='Recycle Database Connections'\n                                        />\n                                    </b>\n                                ),\n                                reloadConfiguration: (\n                                    <a href='../environment/web_server'>\n                                        <b>\n                                            <FormattedMessage\n                                                id='admin.recycle.recycleDescription.reloadConfiguration'\n                                                defaultMessage='Environment > Web Server > Reload Configuration from Disk'\n                                            />\n                                        </b>\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.recycle.button'\n                            defaultMessage='Recycle Database Connections'\n                        />\n                    }\n                    showSuccessMessage={false}\n                    errorMessage={{\n                        id: t('admin.recycle.reloadFail'),\n                        defaultMessage: 'Recycling unsuccessful: {error}',\n                    }}\n                    includeDetailedError={true}\n                />\n            );\n        }\n\n        return (\n            <SettingsGroup>\n                <div className='banner'>\n                    <FormattedMessage\n                        id='admin.sql.noteDescription'\n                        defaultMessage='Changing properties in this section will require a server restart before taking effect.'\n                    />\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DriverName'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.driverName'\n                            defaultMessage='Driver Name:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={this.state.driverName}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.driverNameDescription'\n                                defaultMessage='Set the database driver in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                        htmlFor='DataSource'\n                    >\n                        <FormattedMessage\n                            id='admin.sql.dataSource'\n                            defaultMessage='Data Source:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <input\n                            type='text'\n                            className='form-control'\n                            value={dataSource}\n                            disabled={true}\n                        />\n                        <div className='help-text'>\n                            <FormattedMessage\n                                id='admin.sql.dataSourceDescription'\n                                defaultMessage='Set the database source in the config.json file.'\n                            />\n                        </div>\n                    </div>\n                </div>\n                <TextSetting\n                    id='maxIdleConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsTitle'\n                            defaultMessage='Maximum Idle Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxConnectionsExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxConnectionsDescription'\n                            defaultMessage='Maximum number of idle connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxIdleConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxIdleConns')}\n                />\n                <TextSetting\n                    id='maxOpenConns'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenTitle'\n                            defaultMessage='Maximum Open Connections:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.maxOpenExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.maxOpenDescription'\n                            defaultMessage='Maximum number of open connections held open to the database.'\n                        />\n                    }\n                    value={this.state.maxOpenConns}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.MaxOpenConns')}\n                />\n                <TextSetting\n                    id='queryTimeout'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutTitle'\n                            defaultMessage='Query Timeout:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.queryTimeoutExample', 'E.g.: \"30\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.queryTimeoutDescription'\n                            defaultMessage='The number of seconds to wait for a response from the database after opening a connection and sending the query. Errors that you see in the UI or in the logs as a result of a query timeout can vary depending on the type of query.'\n                        />\n                    }\n                    value={this.state.queryTimeout}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.QueryTimeout')}\n                />\n                <TextSetting\n                    id='connMaxLifetimeMilliseconds'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeTitle'\n                            defaultMessage='Maximum Connection Lifetime:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.sql.connMaxLifetimeExample', 'E.g.: \"3600000\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.connMaxLifetimeDescription'\n                            defaultMessage='Maximum lifetime for a connection to the database in milliseconds.'\n                        />\n                    }\n                    value={this.state.connMaxLifetimeMilliseconds}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.ConnMaxLifetimeMilliseconds')}\n                />\n                <TextSetting\n                    id='minimumHashtagLength'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.minimumHashtagLengthTitle'\n                            defaultMessage='Minimum Hashtag Length:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.minimumHashtagLengthExample', 'E.g.: \"3\"')}\n                    helpText={\n                        <FormattedMarkdownMessage\n                            id='admin.service.minimumHashtagLengthDescription'\n                            defaultMessage='Minimum number of characters in a hashtag. This must be greater than or equal to 2. MySQL databases must be configured to support searching strings shorter than three characters, [see documentation](!https://dev.mysql.com/doc/refman/8.0/en/fulltext-fine-tuning.html).'\n                        />\n                    }\n                    value={this.state.minimumHashtagLength}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.MinimumHashtagLength')}\n                />\n                <BooleanSetting\n                    id='trace'\n                    label={\n                        <FormattedMessage\n                            id='admin.sql.traceTitle'\n                            defaultMessage='SQL Statement Logging: '\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.sql.traceDescription'\n                            defaultMessage='(Development Mode) When true, executing SQL statements are written to the log.'\n                        />\n                    }\n                    value={this.state.trace}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('SqlSettings.Trace')}\n                />\n                {recycleDbButton}\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {elasticsearchPurgeIndexes, elasticsearchTest} from 'actions/admin_actions.jsx';\nimport {JobStatuses, JobTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings';\nimport BooleanSetting from './boolean_setting';\nimport JobsTable from './jobs';\nimport RequestButton from './request_button/request_button.jsx';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class ElasticsearchSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.ElasticsearchSettings.ConnectionUrl = this.state.connectionUrl;\n        config.ElasticsearchSettings.SkipTLSVerification = this.state.skipTLSVerification;\n        config.ElasticsearchSettings.Username = this.state.username;\n        config.ElasticsearchSettings.Password = this.state.password;\n        config.ElasticsearchSettings.Sniff = this.state.sniff;\n        config.ElasticsearchSettings.EnableIndexing = this.state.enableIndexing;\n        config.ElasticsearchSettings.EnableSearching = this.state.enableSearching;\n        config.ElasticsearchSettings.EnableAutocomplete = this.state.enableAutocomplete;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            connectionUrl: config.ElasticsearchSettings.ConnectionUrl,\n            skipTLSVerification: config.ElasticsearchSettings.SkipTLSVerification,\n            username: config.ElasticsearchSettings.Username,\n            password: config.ElasticsearchSettings.Password,\n            sniff: config.ElasticsearchSettings.Sniff,\n            enableIndexing: config.ElasticsearchSettings.EnableIndexing,\n            enableSearching: config.ElasticsearchSettings.EnableSearching,\n            enableAutocomplete: config.ElasticsearchSettings.EnableAutocomplete,\n            configTested: true,\n            canSave: true,\n            canPurgeAndIndex: config.ElasticsearchSettings.EnableIndexing,\n        };\n    }\n\n    handleSettingChanged = (id, value) => {\n        if (id === 'enableIndexing') {\n            if (value === false) {\n                this.setState({\n                    enableSearching: false,\n                    enableAutocomplete: false,\n                });\n            } else {\n                this.setState({\n                    canSave: false,\n                    configTested: false,\n                });\n            }\n        }\n\n        if (id === 'connectionUrl' || id === 'skipTLSVerification' || id === 'username' || id === 'password' || id === 'sniff') {\n            this.setState({\n                configTested: false,\n                canSave: false,\n            });\n        }\n\n        if (id !== 'enableSearching' && id !== 'enableAutocomplete') {\n            this.setState({\n                canPurgeAndIndex: false,\n            });\n        }\n\n        this.handleChange(id, value);\n    }\n\n    handleSaved = () => {\n        this.setState({\n            canPurgeAndIndex: this.state.enableIndexing,\n        });\n    }\n\n    canSave = () => {\n        return this.state.canSave;\n    }\n\n    doTestConfig = (success, error) => {\n        const config = JSON.parse(JSON.stringify(this.props.config));\n        this.getConfigFromState(config);\n\n        elasticsearchTest(\n            config,\n            () => {\n                this.setState({\n                    configTested: true,\n                    canSave: true,\n                });\n                success();\n                this.doSubmit();\n            },\n            (err) => {\n                this.setState({\n                    configTested: false,\n                    canSave: false,\n                });\n                error(err);\n            }\n        );\n    }\n\n    getExtraInfo(job) {\n        if (job.status === JobStatuses.IN_PROGRESS) {\n            return (\n                <FormattedMessage\n                    id='admin.elasticsearch.percentComplete'\n                    defaultMessage='{percent}% Complete'\n                    values={{percent: Number(job.progress)}}\n                />\n            );\n        }\n\n        return null;\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.elasticsearch.title'\n                defaultMessage='Elasticsearch'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        return (\n            <SettingsGroup>\n                <BooleanSetting\n                    id='enableIndexing'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingTitle'\n                            defaultMessage='Enable Elasticsearch Indexing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableIndexingDescription'\n                            defaultMessage='When true, indexing of new posts occurs automatically. Search queries will use database search until \"Enable Elasticsearch for search queries\" is enabled. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.enableIndexingDescription.documentationLinkText'\n                                            defaultMessage='Learn more about Elasticsearch in our documentation.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableIndexing')}\n                />\n                <TextSetting\n                    id='connectionUrl'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlTitle'\n                            defaultMessage='Server Connection Address:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.connectionUrlExample', 'E.g.: \"https://elasticsearch.example.org:9200\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.connectionUrlDescription'\n                            defaultMessage='The address of the Elasticsearch server. {documentationLink}'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-elasticsearch-server-setup/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.elasticsearch.connectionUrlExample.documentationLinkText'\n                                            defaultMessage='Please see documentation with server setup instructions.'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    }\n                    value={this.state.connectionUrl}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.ConnectionUrl')}\n                />\n                <BooleanSetting\n                    id='skipTLSVerification'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.skipTLSVerificationTitle'\n                            defaultMessage='Skip TLS Verification:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.skipTLSVerificationDescription'\n                            defaultMessage='When true, Mattermost will not require the Elasticsearch certificate to be signed by a trusted Certificate Authority.'\n                        />\n                    }\n                    value={this.state.skipTLSVerification}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.SkipTLSVerification')}\n                />\n                <TextSetting\n                    id='username'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameTitle'\n                            defaultMessage='Server Username:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.usernameExample', 'E.g.: \"elastic\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.usernameDescription'\n                            defaultMessage='(Optional) The username to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.username}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Username')}\n                />\n                <TextSetting\n                    id='password'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordTitle'\n                            defaultMessage='Server Password:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.elasticsearch.password', 'E.g.: \"yourpassword\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.passwordDescription'\n                            defaultMessage='(Optional) The password to authenticate to the Elasticsearch server.'\n                        />\n                    }\n                    value={this.state.password}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Password')}\n                />\n                <BooleanSetting\n                    id='sniff'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffTitle'\n                            defaultMessage='Enable Cluster Sniffing:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.sniffDescription'\n                            defaultMessage='When true, sniffing finds and connects to all data nodes in your cluster automatically.'\n                        />\n                    }\n                    value={this.state.sniff}\n                    disabled={!this.state.enableIndexing}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.Sniff')}\n                />\n                <RequestButton\n                    id='testConfig'\n                    requestAction={this.doTestConfig}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.testHelpText'\n                            defaultMessage='Tests if the Mattermost server can connect to the Elasticsearch server specified. Testing the connection only saves the configuration if the test is successful. See log file for more detailed error messages.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.elasticsearch_test_button'\n                            defaultMessage='Test Connection'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.testConfigSuccess'),\n                        defaultMessage: 'Test successful. Configuration saved.',\n                    }}\n                    disabled={!this.state.enableIndexing}\n                />\n                <div className='form-group'>\n                    <label\n                        className='control-label col-sm-4'\n                    >\n                        <FormattedMessage\n                            id='admin.elasticsearch.bulkIndexingTitle'\n                            defaultMessage='Bulk Indexing:'\n                        />\n                    </label>\n                    <div className='col-sm-8'>\n                        <div className='job-table-setting'>\n                            <JobsTable\n                                jobType={JobTypes.ELASTICSEARCH_POST_INDEXING}\n                                disabled={!this.state.canPurgeAndIndex}\n                                createJobButtonText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.title'\n                                        defaultMessage='Index Now'\n                                    />\n                                }\n                                createJobHelpText={\n                                    <FormattedMessage\n                                        id='admin.elasticsearch.createJob.help'\n                                        defaultMessage='All users, channels and posts in the database will be indexed from oldest to newest. Elasticsearch is available during indexing but search results may be incomplete until the indexing job is complete.'\n                                    />\n                                }\n                                getExtraInfoText={this.getExtraInfo}\n                            />\n                        </div>\n                    </div>\n                </div>\n                <RequestButton\n                    id='purgeIndexesSection'\n                    requestAction={elasticsearchPurgeIndexes}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesHelpText'\n                            defaultMessage='Purging will entirely remove the indexes on the Elasticsearch server. Search results may be incomplete until a bulk index of the existing database is rebuilt.'\n                        />\n                    }\n                    buttonText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton'\n                            defaultMessage='Purge Index'\n                        />\n                    }\n                    successMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.success'),\n                        defaultMessage: 'Indexes purged successfully.',\n                    }}\n                    errorMessage={{\n                        id: t('admin.elasticsearch.purgeIndexesButton.error'),\n                        defaultMessage: 'Failed to purge indexes: {error}',\n                    }}\n                    disabled={!this.state.canPurgeAndIndex}\n                    label={(\n                        <FormattedMessage\n                            id='admin.elasticsearch.purgeIndexesButton.label'\n                            defaultMessage='Purge Indexes:'\n                        />\n                    )}\n                />\n                <BooleanSetting\n                    id='enableSearching'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingTitle'\n                            defaultMessage='Enable Elasticsearch for search queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableSearchingDescription'\n                            defaultMessage='Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all search queries using the latest index. Search results may be incomplete until a bulk index of the existing post database is finished. When false, database search is used.'\n                        />\n                    }\n                    value={this.state.enableSearching}\n                    disabled={!this.state.enableIndexing || !this.state.configTested}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableSearching')}\n                />\n                <BooleanSetting\n                    id='enableAutocomplete'\n                    label={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableAutocompleteTitle'\n                            defaultMessage='Enable Elasticsearch for autocomplete queries:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.elasticsearch.enableAutocompleteDescription'\n                            defaultMessage='Requires a successful connection to the Elasticsearch server. When true, Elasticsearch will be used for all autocompletion queries on users and channels using the latest index. Autocompletion results may be incomplete until a bulk index of the existing users and channels database is finished. When false, database autocomplete is used.'\n                        />\n                    }\n                    value={this.state.enableAutocomplete}\n                    disabled={!this.state.enableIndexing || !this.state.configTested}\n                    onChange={this.handleSettingChanged}\n                    setByEnv={this.isSetByEnv('ElasticsearchSettings.EnableAutocomplete')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport Constants from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport {t} from 'utils/i18n';\n\nimport AdminSettings from './admin_settings';\nimport Setting from './setting';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class PasswordSettings extends AdminSettings {\n    constructor(props) {\n        super(props);\n\n        this.state = Object.assign(this.state, {\n            passwordMinimumLength: props.config.PasswordSettings.MinimumLength,\n            passwordLowercase: props.config.PasswordSettings.Lowercase,\n            passwordNumber: props.config.PasswordSettings.Number,\n            passwordUppercase: props.config.PasswordSettings.Uppercase,\n            passwordSymbol: props.config.PasswordSettings.Symbol,\n            maximumLoginAttempts: props.config.ServiceSettings.MaximumLoginAttempts,\n        });\n\n        // Update sample message from config settings\n        t('user.settings.security.passwordErrorLowercase');\n        t('user.settings.security.passwordErrorLowercaseUppercase');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseUppercaseSymbol');\n        t('user.settings.security.passwordErrorLowercaseNumber');\n        t('user.settings.security.passwordErrorLowercaseNumberSymbol');\n        t('user.settings.security.passwordErrorLowercaseSymbol');\n        t('user.settings.security.passwordErrorUppercase');\n        t('user.settings.security.passwordErrorUppercaseNumber');\n        t('user.settings.security.passwordErrorUppercaseNumberSymbol');\n        t('user.settings.security.passwordErrorUppercaseSymbol');\n        t('user.settings.security.passwordErrorNumber');\n        t('user.settings.security.passwordErrorNumberSymbol');\n        t('user.settings.security.passwordErrorSymbol');\n\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (props.config.PasswordSettings.Lowercase) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (props.config.PasswordSettings.Uppercase) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (props.config.PasswordSettings.Number) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (props.config.PasswordSettings.Symbol) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        this.sampleErrorMsg = (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (this.state.passwordMinimumLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    getConfigFromState = (config) => {\n        config.PasswordSettings.MinimumLength = this.parseIntNonZero(this.state.passwordMinimumLength, Constants.MIN_PASSWORD_LENGTH);\n        config.PasswordSettings.Lowercase = this.refs.lowercase.checked;\n        config.PasswordSettings.Uppercase = this.refs.uppercase.checked;\n        config.PasswordSettings.Number = this.refs.number.checked;\n        config.PasswordSettings.Symbol = this.refs.symbol.checked;\n\n        config.ServiceSettings.MaximumLoginAttempts = this.parseIntNonZero(this.state.maximumLoginAttempts);\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            passwordMinimumLength: config.PasswordSettings.MinimumLength,\n            passwordLowercase: config.PasswordSettings.Lowercase,\n            passwordNumber: config.PasswordSettings.Number,\n            passwordUppercase: config.PasswordSettings.Uppercase,\n            passwordSymbol: config.PasswordSettings.Symbol,\n            maximumLoginAttempts: config.ServiceSettings.MaximumLoginAttempts,\n        };\n    }\n\n    getSampleErrorMsg = (minLength) => {\n        if (this.props.config.PasswordSettings.MinimumLength > Constants.MAX_PASSWORD_LENGTH || this.props.config.PasswordSettings.MinimumLength < Constants.MIN_PASSWORD_LENGTH) {\n            return (\n                <FormattedMessage\n                    id='user.settings.security.passwordMinLength'\n                    default='Invalid minimum length, cannot show preview.'\n                />\n            );\n        }\n        let sampleErrorMsgId = 'user.settings.security.passwordError';\n        if (this.refs.lowercase.checked) {\n            sampleErrorMsgId += 'Lowercase';\n        }\n        if (this.refs.uppercase.checked) {\n            sampleErrorMsgId += 'Uppercase';\n        }\n        if (this.refs.number.checked) {\n            sampleErrorMsgId += 'Number';\n        }\n        if (this.refs.symbol.checked) {\n            sampleErrorMsgId += 'Symbol';\n        }\n        return (\n            <FormattedMessage\n                id={sampleErrorMsgId}\n                default='Your password must contain between {min} and {max} characters.'\n                values={{\n                    min: (minLength || Constants.MIN_PASSWORD_LENGTH),\n                    max: Constants.MAX_PASSWORD_LENGTH,\n                }}\n            />\n        );\n    }\n\n    handlePasswordLengthChange = (id, value) => {\n        this.sampleErrorMsg = this.getSampleErrorMsg(value);\n        this.handleChange(id, value);\n    }\n\n    handleCheckboxChange = (id, value) => {\n        this.sampleErrorMsg = this.getSampleErrorMsg(this.state.passwordMinimumLength);\n        this.handleChange(id, value);\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.security.password'\n                defaultMessage='Password'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        return (\n            <SettingsGroup>\n                <div>\n                    <TextSetting\n                        id='passwordMinimumLength'\n                        label={\n                            <FormattedMessage\n                                id='admin.password.minimumLength'\n                                defaultMessage='Minimum Password Length:'\n                            />\n                        }\n                        placeholder={Utils.localizeMessage('admin.password.minimumLengthExample', 'E.g.: \"5\"')}\n                        helpText={\n                            <FormattedMessage\n                                id='admin.password.minimumLengthDescription'\n                                defaultMessage='Minimum number of characters required for a valid password. Must be a whole number greater than or equal to {min} and less than or equal to {max}.'\n                                values={{\n                                    min: Constants.MIN_PASSWORD_LENGTH,\n                                    max: Constants.MAX_PASSWORD_LENGTH,\n                                }}\n                            />\n                        }\n                        value={this.state.passwordMinimumLength}\n                        onChange={this.handlePasswordLengthChange}\n                        setByEnv={this.isSetByEnv('PasswordSettings.MinimumLength')}\n                    />\n                    <Setting\n                        label={\n                            <FormattedMessage\n                                id='passwordRequirements'\n                                defaultMessage='Password Requirements:'\n                            />\n                        }\n                    >\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='lowercase'\n                                    defaultChecked={this.state.passwordLowercase}\n                                    name='admin.password.lowercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.lowercase'\n                                    defaultMessage='At least one lowercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='uppercase'\n                                    defaultChecked={this.state.passwordUppercase}\n                                    name='admin.password.uppercase'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.uppercase'\n                                    defaultMessage='At least one uppercase letter'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='number'\n                                    defaultChecked={this.state.passwordNumber}\n                                    name='admin.password.number'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.number'\n                                    defaultMessage='At least one number'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <label className='checkbox-inline'>\n                                <input\n                                    type='checkbox'\n                                    ref='symbol'\n                                    defaultChecked={this.state.passwordSymbol}\n                                    name='admin.password.symbol'\n                                    onChange={this.handleCheckboxChange}\n                                />\n                                <FormattedMessage\n                                    id='admin.password.symbol'\n                                    defaultMessage='At least one symbol (e.g. \"~!@#$%^&*()\")'\n                                />\n                            </label>\n                        </div>\n                        <div>\n                            <br/>\n                            <label>\n                                <FormattedMessage\n                                    id='admin.password.preview'\n                                    defaultMessage='Error message preview:'\n                                />\n                            </label>\n                            <br/>\n                            {this.sampleErrorMsg}\n                        </div>\n                    </Setting>\n                </div>\n                <TextSetting\n                    id='maximumLoginAttempts'\n                    label={\n                        <FormattedMessage\n                            id='admin.service.attemptTitle'\n                            defaultMessage='Maximum Login Attempts:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.service.attemptExample', 'E.g.: \"10\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.service.attemptDescription'\n                            defaultMessage='Login attempts allowed before user is locked out and required to reset password via email.'\n                        />\n                    }\n                    value={this.state.maximumLoginAttempts}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('ServiceSettings.MaximumLoginAttempts')}\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport {JobTypes} from 'utils/constants';\nimport * as Utils from 'utils/utils.jsx';\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\nimport AdminSettings from './admin_settings';\nimport DropdownSetting from './dropdown_setting.jsx';\nimport JobsTable from './jobs';\nimport SettingsGroup from './settings_group.jsx';\nimport TextSetting from './text_setting';\n\nexport default class DataRetentionSettings extends AdminSettings {\n    getConfigFromState = (config) => {\n        config.DataRetentionSettings.EnableMessageDeletion = this.state.enableMessageDeletion === 'true';\n        config.DataRetentionSettings.EnableFileDeletion = this.state.enableFileDeletion === 'true';\n        config.DataRetentionSettings.MessageRetentionDays = parseInt(this.state.messageRetentionDays, 10);\n        config.DataRetentionSettings.FileRetentionDays = parseInt(this.state.fileRetentionDays, 10);\n        config.DataRetentionSettings.DeletionJobStartTime = this.state.deletionJobStartTime;\n\n        return config;\n    }\n\n    getStateFromConfig(config) {\n        return {\n            enableMessageDeletion: String(config.DataRetentionSettings.EnableMessageDeletion),\n            enableFileDeletion: String(config.DataRetentionSettings.EnableFileDeletion),\n            messageRetentionDays: config.DataRetentionSettings.MessageRetentionDays,\n            fileRetentionDays: config.DataRetentionSettings.FileRetentionDays,\n            deletionJobStartTime: config.DataRetentionSettings.DeletionJobStartTime,\n            showConfirmModal: false,\n        };\n    }\n\n    handleSubmit = (e) => {\n        e.preventDefault();\n\n        this.setState({showConfirmModal: true});\n    };\n\n    handleSaveConfirmed = () => {\n        this.setState({showConfirmModal: false});\n\n        this.doSubmit();\n    };\n\n    handleSaveCanceled = () => {\n        this.setState({showConfirmModal: false});\n    };\n\n    renderConfirmModal = () => {\n        const title = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.title'\n                defaultMessage='Confirm data retention policy'\n            />\n        );\n\n        const messageList = [];\n\n        if (this.state.enableMessageDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageDeletion'\n                    defaultMessage='All messages will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.messageRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemMessageIndefinite'\n                    defaultMessage='All messages will be retained indefinitely.'\n                />\n            );\n        }\n\n        if (this.state.enableFileDeletion === 'true') {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileDeletion'\n                    defaultMessage='All files will be permanently deleted after {days} days.'\n                    values={{\n                        days: (\n                            <strong>\n                                {this.state.fileRetentionDays}\n                            </strong>\n                        ),\n                    }}\n                />\n            );\n        } else {\n            messageList.push(\n                <FormattedMessage\n                    id='admin.data_retention.confirmChangesModal.description.itemFileIndefinite'\n                    defaultMessage='All files will be retained indefinitely.'\n                />\n            );\n        }\n\n        const message = (\n            <div>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.description'\n                        defaultMessage='Are you sure you want to apply the following data retention policy:'\n                    />\n                </p>\n                <ul>\n                    {messageList.map((item, index) => {\n                        return <li key={index}>{item}</li>;\n                    })}\n                </ul>\n                <p>\n                    <FormattedMessage\n                        id='admin.data_retention.confirmChangesModal.clarification'\n                        defaultMessage='Once deleted, messages and files cannot be retrieved.'\n                    />\n                </p>\n            </div>\n        );\n\n        const confirmButton = (\n            <FormattedMessage\n                id='admin.data_retention.confirmChangesModal.confirm'\n                defaultMessage='Confirm Settings'\n            />\n        );\n\n        return (\n            <ConfirmModal\n                show={this.state.showConfirmModal}\n                title={title}\n                message={message}\n                confirmButtonText={confirmButton}\n                onConfirm={this.handleSaveConfirmed}\n                onCancel={this.handleSaveCanceled}\n            />\n        );\n    }\n\n    renderTitle() {\n        return (\n            <FormattedMessage\n                id='admin.data_retention.title'\n                defaultMessage='Data Retention Policy'\n            />\n        );\n    }\n\n    renderSettings = () => {\n        const enableMessageDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepMessagesIndefinitely', 'Keep all messages indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepMessageForTime', 'Keep messages for a set amount of time')},\n        ];\n\n        const enableFileDeletionOptions = [\n            {value: 'false', text: Utils.localizeMessage('admin.data_retention.keepFilesIndefinitely', 'Keep all files indefinitely')},\n            {value: 'true', text: Utils.localizeMessage('admin.data_retention.keepFilesForTime', 'Keep files for a set amount of time')},\n        ];\n\n        let messageRetentionDaysSetting = '';\n        if (this.state.enableMessageDeletion === 'true') {\n            messageRetentionDaysSetting = (\n                <TextSetting\n                    id='messageRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.messageRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.messageRetentionDays.description'\n                            defaultMessage='Set how many days messages are kept in Mattermost. Messages, including file attachments older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.messageRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.MessageRetentionDays')}\n                />\n            );\n        }\n\n        let fileRetentionDaysSetting = '';\n        if (this.state.enableFileDeletion === 'true') {\n            fileRetentionDaysSetting = (\n                <TextSetting\n                    id='fileRetentionDays'\n                    label={<span/>}\n                    placeholder={Utils.localizeMessage('admin.data_retention.fileRetentionDays.example', 'E.g.: \"60\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.fileRetentionDays.description'\n                            defaultMessage='Set how many days file uploads are kept in Mattermost. Files older than the duration you set will be deleted nightly. The minimum time is one day.'\n                        />\n                    }\n                    value={this.state.fileRetentionDays}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.FileRetentionDays')}\n                />\n            );\n        }\n\n        const confirmModal = this.renderConfirmModal();\n\n        return (\n            <SettingsGroup>\n                {confirmModal}\n                <div className='banner'>\n                    <div className='banner__content'>\n                        <FormattedMessage\n                            id='admin.data_retention.note.description'\n                            defaultMessage='Caution: Once a message or a file is deleted, the action is irreversible. Please be careful when setting up a custom data retention policy. See {documentationLink} to learn more.'\n                            values={{\n                                documentationLink: (\n                                    <a\n                                        href='https://about.mattermost.com/default-dataretention-documentation/'\n                                        rel='noopener noreferrer'\n                                        target='_blank'\n                                    >\n                                        <FormattedMessage\n                                            id='admin.data_retention.note.description.documentationLinkText'\n                                            defaultMessage='documentation'\n                                        />\n                                    </a>\n                                ),\n                            }}\n                        />\n                    </div>\n                </div>\n                <DropdownSetting\n                    id='enableMessageDeletion'\n                    values={enableMessageDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.title'\n                            defaultMessage='Message Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableMessageDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps messages in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableMessageDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableMessageDeletion')}\n                />\n                {messageRetentionDaysSetting}\n                <DropdownSetting\n                    id='enableFileDeletion'\n                    values={enableFileDeletionOptions}\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.title'\n                            defaultMessage='File Retention:'\n                        />\n                    }\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.enableFileDeletion.description'\n                            defaultMessage='Set how long Mattermost keeps file uploads in channels and direct messages.'\n                        />\n                    }\n                    value={this.state.enableFileDeletion}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.EnableFileDeletion')}\n                />\n                {fileRetentionDaysSetting}\n                <TextSetting\n                    id='deletionJobStartTime'\n                    label={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.title'\n                            defaultMessage='Data Deletion Time:'\n                        />\n                    }\n                    placeholder={Utils.localizeMessage('admin.data_retention.deletionJobStartTime.example', 'E.g.: \"02:00\"')}\n                    helpText={\n                        <FormattedMessage\n                            id='admin.data_retention.deletionJobStartTime.description'\n                            defaultMessage='Set the start time of the daily scheduled data retention job. Choose a time when fewer people are using your system. Must be a 24-hour time stamp in the form HH:MM.'\n                        />\n                    }\n                    value={this.state.deletionJobStartTime}\n                    onChange={this.handleChange}\n                    setByEnv={this.isSetByEnv('DataRetentionSettings.DeletionJobStartTime')}\n                />\n                <JobsTable\n                    jobType={JobTypes.DATA_RETENTION}\n                    disabled={this.state.enableMessageDeletion !== 'true' && this.state.enableFileDeletion !== 'true'}\n                    createJobButtonText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.title'\n                            defaultMessage='Run Deletion Job Now'\n                        />\n                    }\n                    createJobHelpText={\n                        <FormattedMessage\n                            id='admin.data_retention.createJob.help'\n                            defaultMessage='Initiates a Data Retention deletion job immediately.'\n                        />\n                    }\n                />\n            </SettingsGroup>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {createSelector} from 'reselect';\nimport {cloneDeep} from 'lodash';\n\nimport AdminDefinition from 'components/admin_console/admin_definition.jsx';\n\nexport const getAdminDefinition = createSelector(\n    () => AdminDefinition,\n    (state) => state.plugins.adminConsoleReducers,\n    (adminDefinition, reducers) => {\n        let result = cloneDeep(AdminDefinition);\n        for (const reducer of Object.values(reducers)) {\n            result = reducer(result);\n        }\n        return result;\n    }\n);\n\nexport const getAdminConsoleCustomComponents = (state, pluginId) =>\n    state.plugins.adminConsoleCustomComponents[pluginId] || {};\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport {FormattedMessage} from 'react-intl';\n\nimport ConfirmModal from 'components/confirm_modal.jsx';\n\ntype Props = {\n    show: boolean;\n    onConfirm: (event: React.MouseEvent<HTMLButtonElement>) => void;\n    onCancel: (event: React.MouseEvent<HTMLButtonElement>) => void;\n}\n\nexport default class DiscardChangesModal extends React.Component<Props> {\n    public render(): JSX.Element {\n        const title: JSX.Element = (\n            <FormattedMessage\n                id='discard_changes_modal.title'\n                defaultMessage='Discard Changes?'\n            />\n        );\n\n        const message: JSX.Element = (\n            <FormattedMessage\n                id='discard_changes_modal.message'\n                defaultMessage='You have unsaved changes, are you sure you want to discard them?'\n            />\n        );\n\n        const buttonClass = 'btn btn-primary';\n        const button: JSX.Element = (\n            <FormattedMessage\n                id='discard_changes_modal.leave'\n                defaultMessage='Yes, Discard'\n            />\n        );\n\n        const modalClass = 'discard-changes-modal';\n\n        const {show, onConfirm, onCancel} = this.props;\n\n        return (\n            <ConfirmModal\n                show={show}\n                title={title}\n                message={message}\n                modalClass={modalClass}\n                confirmButtonClass={buttonClass}\n                confirmButtonText={button}\n                onConfirm={onConfirm}\n                onCancel={onCancel}\n            />\n        );\n    }\n}","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {stripMarkdown} from 'utils/markdown';\nimport getEnablePluginSetting from 'components/admin_console/custom_plugin_settings/enable_plugin_setting';\n\nfunction extractTextsFromPlugin(plugin) {\n    const texts = extractTextFromSetting(getEnablePluginSetting(plugin));\n    if (plugin.name) {\n        texts.push(plugin.name);\n    }\n    if (plugin.id) {\n        texts.push(plugin.id);\n    }\n    if (plugin.settings_schema) {\n        if (plugin.settings_schema.footer) {\n            texts.push(stripMarkdown(plugin.settings_schema.footer));\n        }\n        if (plugin.settings_schema.header) {\n            texts.push(stripMarkdown(plugin.settings_schema.header));\n        }\n\n        if (plugin.settings_schema.settings) {\n            const settings = Object.values(plugin.settings_schema.settings);\n\n            for (const setting of settings) {\n                const settingsTexts = extractTextFromSetting(setting, texts);\n                texts.push(...settingsTexts);\n            }\n        }\n    }\n    return texts;\n}\n\nfunction extractTextFromSetting(setting) {\n    const texts = [];\n    if (setting.label) {\n        texts.push(setting.label);\n    }\n    if (setting.display_name) {\n        texts.push(setting.display_name);\n    }\n    if (setting.help_text) {\n        texts.push(stripMarkdown(setting.help_text));\n    }\n    if (setting.key) {\n        texts.push(setting.key);\n    }\n    return texts;\n}\n\nexport function getPluginEntries(pluginsObj = {}) {\n    const entries = {};\n    const plugins = pluginsObj || {};\n    for (const pluginId of Object.keys(plugins)) {\n        const url = `plugin_${pluginId}`;\n        entries[url] = extractTextsFromPlugin(plugins[pluginId]);\n    }\n    return entries;\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport FlexSearch from 'flexsearch/dist/flexsearch.es5';\n\nimport {getPluginEntries} from './admin_console_plugin_index';\n\nfunction extractTextsFromSection(section, intl) {\n    const texts = [];\n    if (section.title) {\n        texts.push(intl.formatMessage({id: section.title, defaultMessage: section.title_default}));\n    }\n    if (section.schema && section.schema.name) {\n        texts.push(section.schema.name);\n    }\n    if (section.searchableStrings) {\n        for (const searchableString of section.searchableStrings) {\n            if (typeof searchableString === 'string') {\n                texts.push(intl.formatMessage({id: searchableString, defaultMessage: searchableString}));\n            } else {\n                texts.push(intl.formatMessage({id: searchableString[0], defaultMessage: ''}, searchableString[1]));\n            }\n        }\n    }\n\n    if (section.schema && section.schema.settings) {\n        for (const setting of Object.values(section.schema.settings)) {\n            if (setting.label) {\n                texts.push(intl.formatMessage({id: setting.label, defaultMessage: setting.label_default}, setting.label_values));\n            }\n            if (setting.help_text && typeof setting.help_text === 'string') {\n                texts.push(intl.formatMessage({id: setting.help_text, defaultMessage: setting.help_text_default}, setting.help_text_values));\n            }\n            if (setting.remove_help_text) {\n                texts.push(intl.formatMessage({id: setting.remove_help_text, defaultMessage: setting.remove_help_text_default}));\n            }\n            if (setting.remove_button_text) {\n                texts.push(intl.formatMessage({id: setting.remove_button_text, defaultMessage: setting.remove_button_text_default}));\n            }\n        }\n    }\n    return texts;\n}\n\nexport function adminDefinitionsToUrlsAndTexts(adminDefinition, intl) {\n    const entries = {};\n    for (const item of Object.values(adminDefinition.about)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.reporting)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.user_management)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.environment)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.site)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.authentication)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.plugins)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.integrations)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.compliance)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    for (const item of Object.values(adminDefinition.experimental)) {\n        entries[item.url] = extractTextsFromSection(item, intl);\n    }\n    return entries;\n}\n\nexport function generateIndex(AdminDefinition, plugins, intl) {\n    const idx = new FlexSearch();\n\n    addToIndex(adminDefinitionsToUrlsAndTexts(AdminDefinition, intl), idx);\n\n    addToIndex(getPluginEntries(plugins), idx);\n\n    return idx;\n}\n\nfunction addToIndex(entries, idx) {\n    for (const key of Object.keys(entries)) {\n        let text = '';\n        for (const str of entries[key]) {\n            text += ' ' + str;\n        }\n        idx.add(key, text);\n    }\n}\n\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {NavLink, Route} from 'react-router-dom';\n\nexport default class AdminSidebarCategory extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string,\n            title: PropTypes.node.isRequired,\n            icon: PropTypes.string.isRequired,\n            sectionClass: PropTypes.string,\n            parentLink: PropTypes.string,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n        };\n    }\n\n    render() {\n        let link = this.props.parentLink;\n        let title = (\n            <div className='category-title category-title--active'>\n                <i className={'category-icon fa ' + this.props.icon}/>\n                <span className='category-title__text'>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </div>\n        );\n\n        if (this.props.name) {\n            link += '/' + name;\n            title = (\n                <NavLink\n                    to={link}\n                    className='category-title'\n                    activeClassName='category-title category-title--active'\n                >\n                    {title}\n                </NavLink>\n            );\n        }\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <Route\n                    path={link}\n                    render={() => (\n                        <ul className={'sections ' + this.props.sectionClass}>\n                            {\n                                React.Children.map(this.props.children, (child) => {\n                                    if (child === null) {\n                                        return null;\n                                    }\n\n                                    return React.cloneElement(child, {\n                                        parentLink: link,\n                                    });\n                                })\n                            }\n                        </ul>\n                    )}\n                />\n            );\n        }\n\n        return (\n            <li className='sidebar-category'>\n                {title}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport menuItem from 'components/widgets/menu/menu_items/menu_item';\n\nexport const MenuItemBlockableLinkImpl = ({to, text}) => <BlockableLink to={to}>{text}</BlockableLink>;\nMenuItemBlockableLinkImpl.propTypes = {\n    to: PropTypes.string.isRequired,\n    text: PropTypes.oneOfType([PropTypes.string, PropTypes.node]).isRequired,\n};\n\nconst MenuItemBlockableLink = menuItem(MenuItemBlockableLinkImpl);\nMenuItemBlockableLink.displayName = 'MenuItemBlockableLinkImpl';\n\nexport default MenuItemBlockableLink;\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\n\nimport * as GlobalActions from 'actions/global_actions.jsx';\n\nimport {filterAndSortTeamsByDisplayName} from 'utils/team_utils.jsx';\nimport {ModalIdentifiers} from 'utils/constants';\nimport {intlShape} from 'utils/react_intl';\n\nimport AboutBuildModal from 'components/about_build_modal';\n\nimport Menu from 'components/widgets/menu/menu';\n\nimport MenuItemBlockableLink from './menu_item_blockable_link';\n\nclass AdminNavbarDropdown extends React.Component {\n    static propTypes = {\n        intl: intlShape.isRequired,\n        locale: PropTypes.string.isRequired,\n        siteName: PropTypes.string,\n        navigationBlocked: PropTypes.bool,\n        teams: PropTypes.arrayOf(PropTypes.object).isRequired,\n        actions: PropTypes.shape({\n            deferNavigation: PropTypes.func,\n        }).isRequired,\n    }\n\n    handleLogout = (e) => {\n        if (this.props.navigationBlocked) {\n            e.preventDefault();\n            this.props.actions.deferNavigation(GlobalActions.emitUserLoggedOutEvent);\n        } else {\n            GlobalActions.emitUserLoggedOutEvent();\n        }\n    };\n\n    render() {\n        const {locale, teams, siteName} = this.props;\n        const {formatMessage} = this.props.intl;\n        const teamToRender = []; // Array of team components\n        let switchTeams;\n\n        if (teams && teams.length > 0) {\n            const teamsArray = filterAndSortTeamsByDisplayName(teams, locale);\n\n            for (const team of teamsArray) {\n                teamToRender.push(\n                    <MenuItemBlockableLink\n                        key={'team_' + team.name}\n                        to={'/' + team.name}\n                        text={formatMessage({id: 'navbar_dropdown.switchTo', defaultMessage: 'Switch to '}) + ' ' + team.display_name}\n                    />\n                );\n            }\n        } else {\n            switchTeams = (\n                <MenuItemBlockableLink\n                    to={'/select_team'}\n                    icon={\n                        <FormattedMessage\n                            id='select_team.icon'\n                            defaultMessage='Select Team Icon'\n                        >\n                            {(title) => (\n                                <i\n                                    className='fa fa-exchange'\n                                    title={title}\n                                />\n                            )}\n                        </FormattedMessage>\n                    }\n                    text={formatMessage({id: 'admin.nav.switch', defaultMessage: 'Team Selection'})}\n                />\n            );\n        }\n\n        return (\n            <Menu ariaLabel={formatMessage({id: 'admin.nav.menuAriaLabel', defaultMessage: 'Admin Console Menu'})}>\n                <Menu.Group>\n                    {teamToRender}\n                    {switchTeams}\n                </Menu.Group>\n                <Menu.Group>\n                    <Menu.ItemExternalLink\n                        url='https://about.mattermost.com/administrators-guide/'\n                        text={formatMessage({id: 'admin.nav.administratorsGuide', defaultMessage: 'Administrator Guide'})}\n                    />\n                    <Menu.ItemExternalLink\n                        url='https://about.mattermost.com/troubleshooting-forum/'\n                        text={formatMessage({id: 'admin.nav.troubleshootingForum', defaultMessage: 'Troubleshooting Forum'})}\n                    />\n                    <Menu.ItemExternalLink\n                        url='https://about.mattermost.com/commercial-support/'\n                        text={formatMessage({id: 'admin.nav.commercialSupport', defaultMessage: 'Commercial Support'})}\n                    />\n                    <Menu.ItemToggleModalRedux\n                        modalId={ModalIdentifiers.ABOUT}\n                        dialogType={AboutBuildModal}\n                        text={formatMessage({id: 'navbar_dropdown.about', defaultMessage: 'About {appTitle}'}, {appTitle: siteName || 'Mattermost'})}\n                    />\n                </Menu.Group>\n                <Menu.Group>\n                    <Menu.ItemAction\n                        onClick={this.handleLogout}\n                        text={formatMessage({id: 'navbar_dropdown.logout', defaultMessage: 'Log Out'})}\n                    />\n                </Menu.Group>\n            </Menu>\n        );\n    }\n}\n\nexport default injectIntl(AdminNavbarDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\n\nimport {getMyTeams} from 'mattermost-redux/selectors/entities/teams';\nimport {getConfig} from 'mattermost-redux/selectors/entities/general';\n\nimport {deferNavigation} from 'actions/admin_actions.jsx';\nimport {getCurrentLocale} from 'selectors/i18n';\nimport {getNavigationBlocked} from 'selectors/views/admin';\n\nimport AdminNavbarDropdown from './admin_navbar_dropdown.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        locale: getCurrentLocale(state),\n        teams: getMyTeams(state),\n        siteName: getConfig(state).SiteName,\n        navigationBlocked: getNavigationBlocked(state),\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            deferNavigation,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AdminNavbarDropdown);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport {FormattedMessage} from 'react-intl';\nimport {Client4} from 'mattermost-redux/client';\n\nimport MenuIcon from 'components/widgets/icons/menu_icon';\n\nimport MenuWrapper from 'components/widgets/menu/menu_wrapper';\nimport Avatar from 'components/widgets/users/avatar';\n\nimport AdminNavbarDropdown from 'components/admin_console/admin_navbar_dropdown';\n\nexport default class SidebarHeader extends React.Component {\n    static propTypes = {\n        currentUser: PropTypes.object,\n    }\n\n    render() {\n        const me = this.props.currentUser;\n        let profilePicture = null;\n\n        if (!me) {\n            return null;\n        }\n\n        if (me.last_picture_update) {\n            profilePicture = (\n                <Avatar\n                    username={me.username}\n                    url={Client4.getProfilePictureUrl(me.id, me.last_picture_update)}\n                    size='lg'\n                />\n            );\n        }\n\n        return (\n            <MenuWrapper className='AdminSidebarHeader'>\n                <div>\n                    {profilePicture}\n                    <div className='header__info'>\n                        <div className='team__name'>\n                            <FormattedMessage\n                                id='admin.sidebarHeader.systemConsole'\n                                defaultMessage='System Console'\n                            />\n                        </div>\n                        <div className='user__name overflow--ellipsis whitespace--nowrap'>{'@' + me.username}</div>\n                    </div>\n                    <button className='style--none'>\n                        <MenuIcon className='menu-icon'/>\n                    </button>\n                </div>\n                <AdminNavbarDropdown/>\n            </MenuWrapper>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\n\nimport {getCurrentUser} from 'mattermost-redux/selectors/entities/users';\n\nimport AdminSidebarHeader from './admin_sidebar_header.jsx';\n\nfunction mapStateToProps(state) {\n    return {\n        currentUser: getCurrentUser(state),\n    };\n}\n\nexport default connect(mapStateToProps)(AdminSidebarHeader);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport BlockableLink from 'components/admin_console/blockable_link';\nimport * as Utils from 'utils/utils.jsx';\n\nexport default class AdminSidebarSection extends React.Component {\n    static get propTypes() {\n        return {\n            name: PropTypes.string.isRequired,\n            title: PropTypes.node.isRequired,\n            type: PropTypes.string,\n            parentLink: PropTypes.string,\n            subsection: PropTypes.bool,\n            children: PropTypes.node,\n            action: PropTypes.node,\n        };\n    }\n\n    static get defaultProps() {\n        return {\n            parentLink: '',\n            subsection: false,\n            children: [],\n        };\n    }\n\n    getLink() {\n        return this.props.parentLink + '/' + this.props.name;\n    }\n\n    render() {\n        const link = this.getLink();\n\n        let clonedChildren = null;\n        if (this.props.children) {\n            clonedChildren = (\n                <ul className='nav nav__sub-menu subsections'>\n                    {\n                        React.Children.map(this.props.children, (child) => {\n                            if (child === null) {\n                                return null;\n                            }\n\n                            return React.cloneElement(child, {\n                                parentLink: link,\n                                subsection: true,\n                            });\n                        })\n                    }\n                </ul>\n            );\n        }\n\n        let className = 'sidebar-section';\n        if (this.props.subsection) {\n            className += ' sidebar-subsection';\n        }\n\n        let sidebarItem = (\n            <BlockableLink\n                id={Utils.createSafeId(this.props.name)}\n                className={`${className}-title`}\n                activeClassName={`${className}-title ${className}-title--active`}\n                to={link}\n            >\n                <span className={`${className}-title__text`}>\n                    {this.props.title}\n                </span>\n                {this.props.action}\n            </BlockableLink>\n        );\n\n        if (this.props.type === 'text') {\n            sidebarItem = (\n                <div\n                    className={`${className}-title`}\n                >\n                    <span className={`${className}-title__text`}>\n                        {this.props.title}\n                    </span>\n                    {this.props.action}\n                </div>\n            );\n        }\n\n        return (\n            <li className={className}>\n                {sidebarItem}\n                {clonedChildren}\n            </li>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport React from 'react';\nimport Mark from 'mark.js';\nimport debounce from 'lodash/debounce';\n\ntype Props = {\n    filter: string;\n    children: React.ReactNode;\n}\n\nexport default class Highlight extends React.Component<Props> {\n    private markInstance? : Mark;\n    private ref: React.RefObject<HTMLDivElement>;\n\n    public constructor(props: Props) {\n        super(props);\n        this.ref = React.createRef<HTMLDivElement>();\n    }\n\n    private redrawHighlight = debounce(() => {\n        if (this.markInstance) {\n            this.markInstance.unmark();\n        }\n\n        if (!this.props.filter) {\n            return;\n        }\n\n        if (!this.ref.current) {\n            return;\n        }\n\n        // Is necesary to recreate the instances to get again the DOM elements after the re-render\n        this.markInstance = new Mark(this.ref.current);\n        this.markInstance.mark(this.props.filter, {accuracy: 'complementary'});\n    }, 100, {leading: true, trailing: true});\n\n    public render() {\n        // Run on next frame\n        setTimeout(this.redrawHighlight, 0);\n        return (\n            <div ref={this.ref}>\n                {this.props.children}\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {FormattedMessage, injectIntl} from 'react-intl';\nimport {Tooltip, OverlayTrigger} from 'react-bootstrap';\nimport Scrollbars from 'react-custom-scrollbars';\nimport isEqual from 'lodash/isEqual';\n\nimport * as Utils from 'utils/utils.jsx';\nimport Constants from 'utils/constants';\nimport {generateIndex} from 'utils/admin_console_index.jsx';\nimport {browserHistory} from 'utils/browser_history';\nimport {intlShape} from 'utils/react_intl';\n\nimport AdminSidebarCategory from 'components/admin_console/admin_sidebar_category.jsx';\nimport AdminSidebarHeader from 'components/admin_console/admin_sidebar_header';\nimport AdminSidebarSection from 'components/admin_console/admin_sidebar_section.jsx';\nimport Highlight from 'components/admin_console/highlight';\nimport SearchIcon from 'components/widgets/icons/search_icon.jsx';\n\nconst renderScrollView = (props) => (\n    <div\n        {...props}\n        className='scrollbar--view'\n    />\n);\n\nconst renderScrollThumbHorizontal = (props) => (\n    <div\n        {...props}\n        className='scrollbar--horizontal'\n    />\n);\n\nconst renderScrollThumbVertical = (props) => (\n    <div\n        {...props}\n        className='scrollbar--vertical'\n    />\n);\n\nclass AdminSidebar extends React.Component {\n    static propTypes = {\n        license: PropTypes.object.isRequired,\n        config: PropTypes.object,\n        plugins: PropTypes.object,\n        adminDefinition: PropTypes.object,\n        buildEnterpriseReady: PropTypes.bool,\n        siteName: PropTypes.string,\n        onFilterChange: PropTypes.func.isRequired,\n        navigationBlocked: PropTypes.bool.isRequired,\n        intl: intlShape.isRequired,\n        actions: PropTypes.shape({\n\n            /*\n             * Function to get installed plugins\n             */\n            getPlugins: PropTypes.func.isRequired,\n        }).isRequired,\n    }\n\n    static defaultProps = {\n        plugins: {},\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            sections: null,\n            filter: '',\n        };\n        this.idx = null;\n        this.searchRef = React.createRef();\n    }\n\n    componentDidMount() {\n        if (this.props.config.PluginSettings.Enable) {\n            this.props.actions.getPlugins();\n        }\n\n        if (this.searchRef.current) {\n            this.searchRef.current.focus();\n        }\n\n        this.updateTitle();\n    }\n\n    componentDidUpdate(prevProps) {\n        if (this.idx !== null &&\n            (!isEqual(this.props.plugins, prevProps.plugins) ||\n                !isEqual(this.props.adminDefinition, prevProps.adminDefinition))) {\n            this.idx = generateIndex(this.props.adminDefinition, this.props.plugins, this.props.intl);\n        }\n    }\n\n    onFilterChange = (e) => {\n        const filter = e.target.value;\n        if (filter === '') {\n            this.setState({sections: null, filter});\n            this.props.onFilterChange(filter);\n            return;\n        }\n\n        if (this.idx === null) {\n            this.idx = generateIndex(this.props.adminDefinition, this.props.plugins, this.props.intl);\n        }\n        let query = '';\n        for (const term of filter.split(' ')) {\n            term.trim();\n            if (term !== '') {\n                query += term + ' ';\n                query += term + '* ';\n            }\n        }\n        const sections = this.idx.search(query);\n        this.setState({sections, filter});\n        this.props.onFilterChange(filter);\n\n        if (this.props.navigationBlocked) {\n            return;\n        }\n\n        const validSection = sections.indexOf(browserHistory.location.pathname.replace('/admin_console/', '')) !== -1;\n        if (!validSection) {\n            const visibleSections = this.visibleSections();\n            for (const section of sections) {\n                if (visibleSections.has(section)) {\n                    browserHistory.replace('/admin_console/' + section);\n                    break;\n                }\n            }\n        }\n    }\n\n    updateTitle = () => {\n        let currentSiteName = '';\n        if (this.props.siteName) {\n            currentSiteName = ' - ' + this.props.siteName;\n        }\n\n        document.title = Utils.localizeMessage('sidebar_right_menu.console', 'System Console') + currentSiteName;\n    }\n\n    visibleSections = () => {\n        const isVisible = (item) => {\n            if (!item.schema) {\n                return false;\n            }\n\n            if (!item.title) {\n                return false;\n            }\n\n            if (item.isHidden && item.isHidden(this.props.config, {}, this.props.license, this.props.buildEnterpriseReady)) {\n                return false;\n            }\n            return true;\n        };\n        const result = new Set();\n        for (const section of Object.values(this.props.adminDefinition)) {\n            for (const item of Object.values(section)) {\n                if (isVisible(item)) {\n                    result.add(item.url);\n                }\n            }\n        }\n        return result;\n    }\n\n    renderRootMenu = (definition) => {\n        const sidebarSections = [];\n        Object.values(definition).forEach((section, sectionIndex) => {\n            const sidebarItems = [];\n            Object.values(section).forEach((item, itemIndex) => {\n                if (!item.title) {\n                    return;\n                }\n\n                if (item.isHidden && item.isHidden(this.props.config, {}, this.props.license, this.props.buildEnterpriseReady)) {\n                    return;\n                }\n\n                if (this.state.sections !== null) {\n                    let active = false;\n                    for (const url of this.state.sections) {\n                        if (url === item.url) {\n                            active = true;\n                        }\n                    }\n                    if (!active) {\n                        return;\n                    }\n                }\n\n                sidebarItems.push((\n                    <AdminSidebarSection\n                        key={itemIndex}\n                        name={item.url}\n                        title={\n                            <FormattedMessage\n                                id={item.title}\n                                defaultMessage={item.title_default}\n                            />\n                        }\n                    />\n                ));\n            });\n\n            // Special case for plugins entries\n            let moreSidebarItems = [];\n            if (section.id === 'plugins') {\n                moreSidebarItems = this.renderPluginsMenu();\n            }\n\n            // If no visible items, don't display this section\n            if (sidebarItems.length === 0 && moreSidebarItems.length === 0) {\n                return null;\n            }\n\n            if (sidebarItems.length || moreSidebarItems.length) {\n                sidebarSections.push((\n                    <AdminSidebarCategory\n                        key={sectionIndex}\n                        parentLink='/admin_console'\n                        icon={section.icon}\n                        sectionClass=''\n                        title={\n                            <FormattedMessage\n                                id={section.sectionTitle}\n                                defaultMessage={section.sectionTitleDefault}\n                            />\n                        }\n                    >\n                        {sidebarItems}\n                        {moreSidebarItems}\n                    </AdminSidebarCategory>\n                ));\n            }\n            return null;\n        });\n        return sidebarSections;\n    }\n\n    renderPluginsMenu = () => {\n        const customPlugins = [];\n        if (this.props.config.PluginSettings.Enable) {\n            Object.values(this.props.plugins).sort((a, b) => {\n                const nameCompare = a.name.localeCompare(b.name);\n                if (nameCompare !== 0) {\n                    return nameCompare;\n                }\n\n                return a.id.localeCompare(b.id);\n            }).forEach((p) => {\n                const hasSettings = p.settings_schema && (p.settings_schema.header || p.settings_schema.footer || p.settings_schema.settings);\n                if (!hasSettings) {\n                    return;\n                }\n\n                if (p.settings_schema.settings && (!p.settings_schema.header && !p.settings_schema.footer)) {\n                    if (p.settings_schema.settings.hasOwnProperty('length')) {\n                        if (p.settings_schema.settings.length === 0) {\n                            return;\n                        }\n                    }\n                }\n\n                if (this.state.sections !== null && this.state.sections.indexOf(`plugin_${p.id}`) === -1) {\n                    return;\n                }\n                customPlugins.push(\n                    <AdminSidebarSection\n                        key={'customplugin' + p.id}\n                        name={'plugins/plugin_' + p.id}\n                        title={p.name}\n                    />\n                );\n            });\n        }\n        return customPlugins;\n    }\n\n    handleClearFilter = () => {\n        this.setState({sections: null, filter: ''});\n        this.props.onFilterChange('');\n    }\n\n    render() {\n        const filterClearTooltip = (\n            <Tooltip id='admin-sidebar-fitler-clear'>\n                <FormattedMessage\n                    id='admin.sidebar.filter-clear'\n                    defaultMessage='Clear search'\n                />\n            </Tooltip>\n        );\n        return (\n            <div className='admin-sidebar'>\n                <AdminSidebarHeader/>\n                <Scrollbars\n                    ref='scrollbar'\n                    autoHide={true}\n                    autoHideTimeout={500}\n                    autoHideDuration={500}\n                    renderThumbHorizontal={renderScrollThumbHorizontal}\n                    renderThumbVertical={renderScrollThumbVertical}\n                    renderView={renderScrollView}\n                >\n                    <div className='nav-pills__container'>\n                        <Highlight filter={this.state.filter}>\n                            <ul className='nav nav-pills nav-stacked'>\n                                <li className='filter-container'>\n                                    <SearchIcon\n                                        className='search__icon'\n                                        aria-hidden='true'\n                                    />\n                                    <input\n                                        className={'filter ' + (this.state.filter ? 'active' : '')}\n                                        type='text'\n                                        onChange={this.onFilterChange}\n                                        value={this.state.filter}\n                                        placeholder={Utils.localizeMessage('admin.sidebar.filter', 'Find settings')}\n                                        ref={this.searchRef}\n                                        id='adminSidebarFilter'\n                                    />\n                                    {this.state.filter &&\n                                        <div\n                                            className='sidebar__search-clear visible'\n                                            onClick={this.handleClearFilter}\n                                        >\n                                            <OverlayTrigger\n                                                delayShow={Constants.OVERLAY_TIME_DELAY}\n                                                placement='bottom'\n                                                overlay={filterClearTooltip}\n                                            >\n                                                <span\n                                                    className='sidebar__search-clear-x'\n                                                    aria-hidden='true'\n                                                >\n                                                    {'×'}\n                                                </span>\n                                            </OverlayTrigger>\n                                        </div>}\n                                </li>\n                                {this.renderRootMenu(this.props.adminDefinition)}\n                            </ul>\n                        </Highlight>\n                    </div>\n                </Scrollbars>\n            </div>\n        );\n    }\n}\n\nexport default injectIntl(AdminSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getPlugins} from 'mattermost-redux/actions/admin';\nimport {getConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\n\nimport {getNavigationBlocked} from 'selectors/views/admin';\nimport {getAdminDefinition} from 'selectors/admin_console';\n\nimport AdminSidebar from './admin_sidebar.jsx';\n\nfunction mapStateToProps(state) {\n    const license = getLicense(state);\n    const config = getConfig(state);\n    const buildEnterpriseReady = config.BuildEnterpriseReady === 'true';\n    const siteName = config.SiteName;\n    const adminDefinition = getAdminDefinition(state);\n\n    return {\n        license,\n        config: state.entities.admin.config,\n        plugins: state.entities.admin.plugins,\n        navigationBlocked: getNavigationBlocked(state),\n        buildEnterpriseReady,\n        siteName,\n        adminDefinition,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getPlugins,\n        }, dispatch),\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps, null, {pure: false})(AdminSidebar);\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport 'bootstrap';\n\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport {Route, Switch, Redirect} from 'react-router-dom';\n\nimport AnnouncementBar from 'components/announcement_bar';\nimport SystemNotice from 'components/system_notice';\nimport ModalController from 'components/modal_controller';\n\nimport SchemaAdminSettings from 'components/admin_console/schema_admin_settings';\nimport DiscardChangesModal from 'components/discard_changes_modal';\n\nimport AdminSidebar from './admin_sidebar';\nimport Highlight from './highlight';\n\nexport default class AdminConsole extends React.Component {\n    static propTypes = {\n        config: PropTypes.object.isRequired,\n        adminDefinition: PropTypes.object.isRequired,\n        environmentConfig: PropTypes.object,\n        license: PropTypes.object.isRequired,\n        unauthorizedRoute: PropTypes.string.isRequired,\n        buildEnterpriseReady: PropTypes.bool,\n        roles: PropTypes.object.isRequired,\n        match: PropTypes.shape({\n            url: PropTypes.string.isRequired,\n        }).isRequired,\n        showNavigationPrompt: PropTypes.bool.isRequired,\n        isCurrentUserSystemAdmin: PropTypes.bool.isRequired,\n\n        actions: PropTypes.shape({\n            getConfig: PropTypes.func.isRequired,\n            getEnvironmentConfig: PropTypes.func.isRequired,\n            setNavigationBlocked: PropTypes.func.isRequired,\n            confirmNavigation: PropTypes.func.isRequired,\n            cancelNavigation: PropTypes.func.isRequired,\n            loadRolesIfNeeded: PropTypes.func.isRequired,\n            editRole: PropTypes.func.isRequired,\n            updateConfig: PropTypes.func,\n        }).isRequired,\n    }\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            filter: '',\n        };\n    }\n\n    componentDidMount() {\n        this.props.actions.getConfig();\n        this.props.actions.getEnvironmentConfig();\n        this.props.actions.loadRolesIfNeeded(['channel_user', 'team_user', 'system_user', 'channel_admin', 'team_admin', 'system_admin']);\n    }\n\n    onFilterChange = (filter) => {\n        this.setState({filter});\n    }\n\n    mainRolesLoaded(roles) {\n        return (\n            roles &&\n            roles.channel_admin &&\n            roles.channel_user &&\n            roles.team_admin &&\n            roles.team_user &&\n            roles.system_admin &&\n            roles.system_user\n        );\n    }\n\n    renderRoutes = (extraProps) => {\n        const schemas = Object.values(this.props.adminDefinition).reduce((acc, section) => {\n            const items = Object.values(section).filter((item) => {\n                if (item.isHidden && item.isHidden(this.props.config, {}, this.props.license, this.props.buildEnterpriseReady)) {\n                    return false;\n                }\n                if (!item.schema) {\n                    return false;\n                }\n                return true;\n            });\n            return acc.concat(items);\n        }, []);\n        const schemaRoutes = schemas.map((item) => {\n            return (\n                <Route\n                    key={item.url}\n                    path={`${this.props.match.url}/${item.url}`}\n                    render={(props) => (\n                        <SchemaAdminSettings\n                            {...extraProps}\n                            {...props}\n                            schema={item.schema}\n                        />\n                    )}\n                />\n            );\n        });\n        const defaultUrl = schemas[0].url;\n\n        return (\n            <Switch>\n                {schemaRoutes}\n                {<Redirect to={`${this.props.match.url}/${defaultUrl}`}/>}\n            </Switch>\n        );\n    }\n\n    render() {\n        const {\n            license,\n            config,\n            environmentConfig,\n            showNavigationPrompt,\n            roles,\n        } = this.props;\n        const {setNavigationBlocked, cancelNavigation, confirmNavigation, editRole, updateConfig} = this.props.actions;\n\n        if (!this.props.isCurrentUserSystemAdmin) {\n            return (\n                <Redirect to={this.props.unauthorizedRoute}/>\n            );\n        }\n\n        if (!this.mainRolesLoaded(this.props.roles)) {\n            return null;\n        }\n\n        if (Object.keys(config).length === 0) {\n            return <div/>;\n        }\n        if (config && Object.keys(config).length === 0 && config.constructor === 'Object') {\n            return (\n                <div className='admin-console__wrapper'>\n                    <AnnouncementBar/>\n                    <div className='admin-console'/>\n                </div>\n            );\n        }\n\n        const discardChangesModal = (\n            <DiscardChangesModal\n                show={showNavigationPrompt}\n                onConfirm={confirmNavigation}\n                onCancel={cancelNavigation}\n            />\n        );\n\n        // not every page in the system console will need the license and config, but the vast majority will\n        const extraProps = {\n            license,\n            config,\n            environmentConfig,\n            setNavigationBlocked,\n            roles,\n            editRole,\n            updateConfig,\n        };\n        return (\n            <div\n                className='admin-console__wrapper'\n                id='adminConsoleWrapper'\n            >\n                <AnnouncementBar/>\n                <SystemNotice/>\n                <AdminSidebar onFilterChange={this.onFilterChange}/>\n                <div className='admin-console'>\n                    <Highlight filter={this.state.filter}>\n                        {this.renderRoutes(extraProps)}\n                    </Highlight>\n                </div>\n                {discardChangesModal}\n                <ModalController/>\n            </div>\n        );\n    }\n}\n","// Copyright (c) 2015-present Mattermost, Inc. All Rights Reserved.\n// See LICENSE.txt for license information.\n\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport {getConfig, getEnvironmentConfig, updateConfig} from 'mattermost-redux/actions/admin';\nimport {loadRolesIfNeeded, editRole} from 'mattermost-redux/actions/roles';\nimport * as Selectors from 'mattermost-redux/selectors/entities/admin';\nimport {withRouter} from 'react-router-dom';\nimport {getConfig as getGeneralConfig, getLicense} from 'mattermost-redux/selectors/entities/general';\nimport {getRoles} from 'mattermost-redux/selectors/entities/roles';\nimport {isCurrentUserSystemAdmin, getCurrentUserId} from 'mattermost-redux/selectors/entities/users';\nimport {getTeam} from 'mattermost-redux/selectors/entities/teams';\n\nimport {General} from 'mattermost-redux/constants';\n\nimport {setNavigationBlocked, deferNavigation, cancelNavigation, confirmNavigation} from 'actions/admin_actions.jsx';\nimport {getNavigationBlocked, showNavigationPrompt} from 'selectors/views/admin';\nimport {getAdminDefinition} from 'selectors/admin_console';\n\nimport LocalStorageStore from 'stores/local_storage_store';\n\nimport AdminConsole from './admin_console.jsx';\n\nfunction mapStateToProps(state) {\n    const generalConfig = getGeneralConfig(state);\n    const buildEnterpriseReady = generalConfig.BuildEnterpriseReady === 'true';\n    const adminDefinition = getAdminDefinition(state);\n    const teamId = LocalStorageStore.getPreviousTeamId(getCurrentUserId(state));\n    const team = getTeam(state, teamId);\n    const unauthorizedRoute = team ? `/${team.name}/channels/${General.DEFAULT_CHANNEL}` : '/';\n\n    return {\n        config: Selectors.getConfig(state),\n        environmentConfig: Selectors.getEnvironmentConfig(state),\n        license: getLicense(state),\n        buildEnterpriseReady,\n        unauthorizedRoute,\n        navigationBlocked: getNavigationBlocked(state),\n        showNavigationPrompt: showNavigationPrompt(state),\n        isCurrentUserSystemAdmin: isCurrentUserSystemAdmin(state),\n        roles: getRoles(state),\n        adminDefinition,\n    };\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return {\n        actions: bindActionCreators({\n            getConfig,\n            getEnvironmentConfig,\n            updateConfig,\n            setNavigationBlocked,\n            deferNavigation,\n            cancelNavigation,\n            confirmNavigation,\n            loadRolesIfNeeded,\n            editRole,\n        }, dispatch),\n    };\n}\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(AdminConsole));\n"],"sourceRoot":""}